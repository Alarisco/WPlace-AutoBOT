/* WPlace AutoBOT — uso bajo tu responsabilidad. Compilado 2025-08-25T12:53:40.405Z */
(() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };

  // src/core/logger.js
  var log;
  var init_logger = __esm({
    "src/core/logger.js"() {
      log = (...a) => console.log("[WPA-UI]", ...a);
    }
  });

  // src/locales/es.js
  var es;
  var init_es = __esm({
    "src/locales/es.js"() {
      es = {
        // Launcher
        launcher: {
          title: "WPlace AutoBOT",
          autoFarm: "\u{1F33E} Auto-Farm",
          autoImage: "\u{1F3A8} Auto-Image",
          autoGuard: "\u{1F6E1}\uFE0F Auto-Guard",
          selection: "Selecci\xF3n",
          user: "Usuario",
          charges: "Cargas",
          backend: "Backend",
          database: "Database",
          uptime: "Uptime",
          close: "Cerrar",
          launch: "Lanzar",
          loading: "Cargando\u2026",
          executing: "Ejecutando\u2026",
          downloading: "Descargando script\u2026",
          chooseBot: "Elige un bot y presiona Lanzar",
          readyToLaunch: "Listo para lanzar",
          loadError: "Error al cargar",
          loadErrorMsg: "No se pudo cargar el bot seleccionado. Revisa tu conexi\xF3n o int\xE9ntalo de nuevo.",
          checking: "\u{1F504} Verificando...",
          online: "\u{1F7E2} Online",
          offline: "\u{1F534} Offline",
          ok: "\u{1F7E2} OK",
          error: "\u{1F534} Error",
          unknown: "-",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Descargar Logs",
          clearLogs: "Limpiar Logs",
          closeLogs: "Cerrar"
        },
        // Image Module
        image: {
          title: "WPlace Auto-Image",
          initBot: "Iniciar Auto-BOT",
          uploadImage: "Subir Imagen",
          resizeImage: "Redimensionar Imagen",
          selectPosition: "Seleccionar Posici\xF3n",
          startPainting: "Iniciar Pintura",
          stopPainting: "Detener Pintura",
          saveProgress: "Guardar Progreso",
          loadProgress: "Cargar Progreso",
          exportGuard: "Exportar a Guard",
          checkingColors: "\u{1F50D} Verificando colores disponibles...",
          noColorsFound: "\u274C \xA1Abre la paleta de colores en el sitio e int\xE9ntalo de nuevo!",
          colorsFound: "\u2705 {count} colores disponibles encontrados",
          loadingImage: "\u{1F5BC}\uFE0F Cargando imagen...",
          imageLoaded: "\u2705 Imagen cargada con {count} p\xEDxeles v\xE1lidos",
          imageError: "\u274C Error al cargar la imagen",
          selectPositionAlert: "\xA1Pinta el primer p\xEDxel en la ubicaci\xF3n donde quieres que comience el arte!",
          waitingPosition: "\u{1F446} Esperando que pintes el p\xEDxel de referencia...",
          positionSet: "\u2705 \xA1Posici\xF3n establecida con \xE9xito!",
          positionTimeout: "\u274C Tiempo agotado para seleccionar posici\xF3n",
          positionDetected: "\u{1F3AF} Posici\xF3n detectada, procesando...",
          positionError: "\u274C Error detectando posici\xF3n, int\xE9ntalo de nuevo",
          startPaintingMsg: "\u{1F3A8} Iniciando pintura...",
          paintingProgress: "\u{1F9F1} Progreso: {painted}/{total} p\xEDxeles...",
          noCharges: "\u231B Sin cargas. Esperando {time}...",
          paintingStopped: "\u23F9\uFE0F Pintura detenida por el usuario",
          paintingComplete: "\u2705 \xA1Pintura completada! {count} p\xEDxeles pintados.",
          paintingError: "\u274C Error durante la pintura",
          missingRequirements: "\u274C Carga una imagen y selecciona una posici\xF3n primero",
          progress: "Progreso",
          userName: "Usuario",
          pixels: "P\xEDxeles",
          charges: "Cargas",
          estimatedTime: "Tiempo estimado",
          initMessage: "Haz clic en 'Iniciar Auto-BOT' para comenzar",
          waitingInit: "Esperando inicializaci\xF3n...",
          resizeSuccess: "\u2705 Imagen redimensionada a {width}x{height}",
          paintingPaused: "\u23F8\uFE0F Pintura pausada en la posici\xF3n X: {x}, Y: {y}",
          pixelsPerBatch: "P\xEDxeles por lote",
          batchSize: "Tama\xF1o del lote",
          nextBatchTime: "Siguiente lote en",
          useAllCharges: "Usar todas las cargas disponibles",
          showOverlay: "Mostrar overlay",
          maxCharges: "Cargas m\xE1ximas por lote",
          waitingForCharges: "\u23F3 Esperando cargas: {current}/{needed}",
          timeRemaining: "Tiempo restante",
          cooldownWaiting: "\u23F3 Esperando {time} para continuar...",
          progressSaved: "\u2705 Progreso guardado como {filename}",
          progressLoaded: "\u2705 Progreso cargado: {painted}/{total} p\xEDxeles pintados",
          progressLoadError: "\u274C Error al cargar progreso: {error}",
          progressSaveError: "\u274C Error al guardar progreso: {error}",
          guardExportSuccess: "\u2705 Exportado para Auto-Guard: {filename}",
          guardExportError: "\u274C Error exportando para Guard: {error}",
          confirmSaveProgress: "\xBFDeseas guardar el progreso actual antes de detener?",
          saveProgressTitle: "Guardar Progreso",
          discardProgress: "Descartar",
          cancel: "Cancelar",
          minimize: "Minimizar",
          width: "Ancho",
          height: "Alto",
          keepAspect: "Mantener proporci\xF3n",
          apply: "Aplicar",
          overlayOn: "Overlay: ON",
          overlayOff: "Overlay: OFF",
          passCompleted: "\u2705 Pasada completada: {painted} p\xEDxeles pintados | Progreso: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 Esperando regeneraci\xF3n de cargas: {current}/{needed} - Tiempo: {time}",
          waitingChargesCountdown: "\u23F3 Esperando cargas: {current}/{needed} - Quedan: {time}",
          autoInitializing: "\u{1F916} Inicializando autom\xE1ticamente...",
          autoInitSuccess: "\u2705 Bot iniciado autom\xE1ticamente",
          autoInitFailed: "\u26A0\uFE0F No se pudo iniciar autom\xE1ticamente. Usa el bot\xF3n manual.",
          paletteDetected: "\u{1F3A8} Paleta de colores detectada",
          paletteNotFound: "\u{1F50D} Buscando paleta de colores...",
          clickingPaintButton: "\u{1F446} Haciendo clic en el bot\xF3n Paint...",
          paintButtonNotFound: "\u274C Bot\xF3n Paint no encontrado",
          manualInitRequired: "\u{1F527} Inicio manual requerido",
          retryAttempt: "\u{1F504} Reintento {attempt}/{maxAttempts} en {delay}s...",
          retryError: "\u{1F4A5} Error en intento {attempt}/{maxAttempts}, reintentando en {delay}s...",
          retryFailed: "\u274C Fall\xF3 despu\xE9s de {maxAttempts} intentos. Continuando con siguiente lote...",
          networkError: "\u{1F310} Error de red. Reintentando...",
          serverError: "\u{1F525} Error del servidor. Reintentando...",
          timeoutError: "\u23F0 Timeout del servidor. Reintentando...",
          // Nuevos textos v2.0
          protectionEnabled: "\u{1F6E1}\uFE0F Protecci\xF3n habilitada",
          protectionDisabled: "\u{1F6E1}\uFE0F Protecci\xF3n deshabilitada",
          paintPattern: "\u{1F4D0} Patr\xF3n de pintado",
          patternLinearStart: "Lineal (Inicio)",
          patternLinearEnd: "Lineal (Final)",
          patternRandom: "Aleatorio",
          patternCenterOut: "Centro hacia afuera",
          patternCornersFirst: "Esquinas primero",
          patternSpiral: "Espiral",
          protectingDrawing: "\u{1F6E1}\uFE0F Protegiendo dibujo...",
          changesDetected: "\u{1F6A8} {count} cambios detectados en el dibujo",
          repairing: "\u{1F527} Reparando {count} p\xEDxeles alterados...",
          repairCompleted: "\u2705 Reparaci\xF3n completada: {count} p\xEDxeles",
          noChargesForRepair: "\u26A1 Sin cargas para reparar, esperando...",
          protectionPriority: "\u{1F6E1}\uFE0F Prioridad de protecci\xF3n activada",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Descargar Logs",
          clearLogs: "Limpiar Logs",
          closeLogs: "Cerrar",
          // Nuevas funcionalidades
          paintingStats: "Estad\xEDsticas de Pintado",
          userInfo: "Informaci\xF3n del Usuario",
          imageProgress: "Progreso de la Imagen",
          availableColors: "Colores Disponibles",
          refreshStats: "Actualizar Estad\xEDsticas",
          noImageLoaded: "No hay imagen cargada",
          cooldown: "Tiempo de espera",
          totalColors: "Total de Colores",
          colorPalette: "Paleta de Colores",
          showAllColors: "Mostrar Todos los Colores (incluyendo no disponibles)",
          selectAllColors: "Seleccionar Todos",
          unselectAllColors: "Deseleccionar Todos",
          noAvailable: "No disponible",
          colorSelected: "Color seleccionado",
          statsUpdated: "\u2705 Estad\xEDsticas actualizadas: {count} colores disponibles"
        },
        // Farm Module (por implementar)
        farm: {
          title: "WPlace Farm Bot",
          start: "Iniciar",
          stop: "Detener",
          stopped: "Bot detenido",
          calibrate: "Calibrar",
          paintOnce: "Una vez",
          checkingStatus: "Verificando estado...",
          configuration: "Configuraci\xF3n",
          delay: "Delay (ms)",
          pixelsPerBatch: "P\xEDxeles/lote",
          minCharges: "Cargas m\xEDn",
          colorMode: "Modo color",
          random: "Aleatorio",
          fixed: "Fijo",
          range: "Rango",
          fixedColor: "Color fijo",
          advanced: "Avanzado",
          tileX: "Tile X",
          tileY: "Tile Y",
          customPalette: "Paleta personalizada",
          paletteExample: "ej: #FF0000,#00FF00,#0000FF",
          capture: "Capturar",
          painted: "Pintados",
          charges: "Cargas",
          retries: "Fallos",
          tile: "Tile",
          configSaved: "Configuraci\xF3n guardada",
          configLoaded: "Configuraci\xF3n cargada",
          configReset: "Configuraci\xF3n reiniciada",
          captureInstructions: "Pinta un p\xEDxel manualmente para capturar coordenadas...",
          backendOnline: "Backend Online",
          backendOffline: "Backend Offline",
          startingBot: "Iniciando bot...",
          stoppingBot: "Deteniendo bot...",
          calibrating: "Calibrando...",
          alreadyRunning: "Auto-Farm ya est\xE1 corriendo.",
          imageRunningWarning: "Auto-Image est\xE1 ejecut\xE1ndose. Ci\xE9rralo antes de iniciar Auto-Farm.",
          selectPosition: "Seleccionar Zona",
          selectPositionAlert: "\u{1F3AF} Pinta un p\xEDxel en una zona DESPOBLADA del mapa para establecer el \xE1rea de farming",
          waitingPosition: "\u{1F446} Esperando que pintes el p\xEDxel de referencia...",
          positionSet: "\u2705 \xA1Zona establecida! Radio: 500px",
          positionTimeout: "\u274C Tiempo agotado para seleccionar zona",
          missingPosition: "\u274C Selecciona una zona primero usando 'Seleccionar Zona'",
          farmRadius: "Radio farm",
          positionInfo: "Zona actual",
          farmingInRadius: "\u{1F33E} Farming en radio {radius}px desde ({x},{y})",
          selectEmptyArea: "\u26A0\uFE0F IMPORTANTE: Selecciona una zona DESPOBLADA para evitar conflictos",
          noPosition: "Sin zona",
          currentZone: "Zona: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} Selecciona una zona primero. Pinta un p\xEDxel en el mapa para establecer la zona de farming",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Descargar Logs",
          clearLogs: "Limpiar Logs",
          closeLogs: "Cerrar"
        },
        // Common/Shared
        common: {
          yes: "S\xED",
          no: "No",
          ok: "Aceptar",
          cancel: "Cancelar",
          close: "Cerrar",
          save: "Guardar",
          load: "Cargar",
          delete: "Eliminar",
          edit: "Editar",
          start: "Iniciar",
          stop: "Detener",
          pause: "Pausar",
          resume: "Reanudar",
          reset: "Reiniciar",
          settings: "Configuraci\xF3n",
          help: "Ayuda",
          about: "Acerca de",
          language: "Idioma",
          loading: "Cargando...",
          error: "Error",
          success: "\xC9xito",
          warning: "Advertencia",
          info: "Informaci\xF3n",
          languageChanged: "Idioma cambiado a {language}"
        },
        // Guard Module
        guard: {
          title: "WPlace Auto-Guard",
          initBot: "Inicializar Guard-BOT",
          selectArea: "Seleccionar \xC1rea",
          captureArea: "Capturar \xC1rea",
          startProtection: "Iniciar Protecci\xF3n",
          stopProtection: "Detener Protecci\xF3n",
          upperLeft: "Esquina Superior Izquierda",
          lowerRight: "Esquina Inferior Derecha",
          protectedPixels: "P\xEDxeles Protegidos",
          detectedChanges: "Cambios Detectados",
          repairedPixels: "P\xEDxeles Reparados",
          charges: "Cargas",
          waitingInit: "Esperando inicializaci\xF3n...",
          checkingColors: "\u{1F3A8} Verificando colores disponibles...",
          noColorsFound: "\u274C No se encontraron colores. Abre la paleta de colores en el sitio.",
          colorsFound: "\u2705 {count} colores disponibles encontrados",
          initSuccess: "\u2705 Guard-BOT inicializado correctamente",
          initError: "\u274C Error inicializando Guard-BOT",
          invalidCoords: "\u274C Coordenadas inv\xE1lidas",
          invalidArea: "\u274C El \xE1rea debe tener esquina superior izquierda menor que inferior derecha",
          areaTooLarge: "\u274C \xC1rea demasiado grande: {size} p\xEDxeles (m\xE1ximo: {max})",
          capturingArea: "\u{1F4F8} Capturando \xE1rea de protecci\xF3n...",
          areaCaptured: "\u2705 \xC1rea capturada: {count} p\xEDxeles bajo protecci\xF3n",
          captureError: "\u274C Error capturando \xE1rea: {error}",
          captureFirst: "\u274C Primero captura un \xE1rea de protecci\xF3n",
          protectionStarted: "\u{1F6E1}\uFE0F Protecci\xF3n iniciada - monitoreando \xE1rea",
          protectionStopped: "\u23F9\uFE0F Protecci\xF3n detenida",
          noChanges: "\u2705 \xC1rea protegida - sin cambios detectados",
          changesDetected: "\u{1F6A8} {count} cambios detectados en el \xE1rea protegida",
          repairing: "\u{1F6E0}\uFE0F Reparando {count} p\xEDxeles alterados...",
          repairedSuccess: "\u2705 Reparados {count} p\xEDxeles correctamente",
          repairError: "\u274C Error reparando p\xEDxeles: {error}",
          noCharges: "\u26A0\uFE0F Sin cargas suficientes para reparar cambios",
          checkingChanges: "\u{1F50D} Verificando cambios en \xE1rea protegida...",
          errorChecking: "\u274C Error verificando cambios: {error}",
          guardActive: "\u{1F6E1}\uFE0F Guardi\xE1n activo - \xE1rea bajo protecci\xF3n",
          lastCheck: "\xDAltima verificaci\xF3n: {time}",
          nextCheck: "Pr\xF3xima verificaci\xF3n en: {time}s",
          autoInitializing: "\u{1F916} Inicializando autom\xE1ticamente...",
          autoInitSuccess: "\u2705 Guard-BOT iniciado autom\xE1ticamente",
          autoInitFailed: "\u26A0\uFE0F No se pudo iniciar autom\xE1ticamente. Usa el bot\xF3n manual.",
          manualInitRequired: "\u{1F527} Inicio manual requerido",
          paletteDetected: "\u{1F3A8} Paleta de colores detectada",
          paletteNotFound: "\u{1F50D} Buscando paleta de colores...",
          clickingPaintButton: "\u{1F446} Haciendo clic en el bot\xF3n Paint...",
          paintButtonNotFound: "\u274C Bot\xF3n Paint no encontrado",
          selectUpperLeft: "\u{1F3AF} Pinta un p\xEDxel en la esquina SUPERIOR IZQUIERDA del \xE1rea a proteger",
          selectLowerRight: "\u{1F3AF} Ahora pinta un p\xEDxel en la esquina INFERIOR DERECHA del \xE1rea",
          waitingUpperLeft: "\u{1F446} Esperando selecci\xF3n de esquina superior izquierda...",
          waitingLowerRight: "\u{1F446} Esperando selecci\xF3n de esquina inferior derecha...",
          upperLeftCaptured: "\u2705 Esquina superior izquierda capturada: ({x}, {y})",
          lowerRightCaptured: "\u2705 Esquina inferior derecha capturada: ({x}, {y})",
          selectionTimeout: "\u274C Tiempo agotado para selecci\xF3n",
          selectionError: "\u274C Error en selecci\xF3n, int\xE9ntalo de nuevo",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Descargar Logs",
          clearLogs: "Limpiar Logs",
          closeLogs: "Cerrar"
        }
      };
    }
  });

  // src/locales/en.js
  var en;
  var init_en = __esm({
    "src/locales/en.js"() {
      en = {
        // Launcher
        launcher: {
          title: "WPlace AutoBOT",
          autoFarm: "\u{1F33E} Auto-Farm",
          autoImage: "\u{1F3A8} Auto-Image",
          autoGuard: "\u{1F6E1}\uFE0F Auto-Guard",
          selection: "Selection",
          user: "User",
          charges: "Charges",
          backend: "Backend",
          database: "Database",
          uptime: "Uptime",
          close: "Close",
          launch: "Launch",
          loading: "Loading\u2026",
          executing: "Executing\u2026",
          downloading: "Downloading script\u2026",
          chooseBot: "Choose a bot and press Launch",
          readyToLaunch: "Ready to launch",
          loadError: "Load error",
          loadErrorMsg: "Could not load the selected bot. Check your connection or try again.",
          checking: "\u{1F504} Checking...",
          online: "\u{1F7E2} Online",
          offline: "\u{1F534} Offline",
          ok: "\u{1F7E2} OK",
          error: "\u{1F534} Error",
          unknown: "-",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Download Logs",
          clearLogs: "Clear Logs",
          closeLogs: "Close"
        },
        // Image Module
        image: {
          title: "WPlace Auto-Image",
          initBot: "Initialize Auto-BOT",
          uploadImage: "Upload Image",
          resizeImage: "Resize Image",
          selectPosition: "Select Position",
          startPainting: "Start Painting",
          stopPainting: "Stop Painting",
          saveProgress: "Save Progress",
          loadProgress: "Load Progress",
          checkingColors: "\u{1F50D} Checking available colors...",
          noColorsFound: "\u274C Open the color palette on the site and try again!",
          colorsFound: "\u2705 Found {count} available colors",
          loadingImage: "\u{1F5BC}\uFE0F Loading image...",
          imageLoaded: "\u2705 Image loaded with {count} valid pixels",
          imageError: "\u274C Error loading image",
          selectPositionAlert: "Paint the first pixel at the location where you want the art to start!",
          waitingPosition: "\u{1F446} Waiting for you to paint the reference pixel...",
          positionSet: "\u2705 Position set successfully!",
          positionTimeout: "\u274C Timeout for position selection",
          positionDetected: "\u{1F3AF} Position detected, processing...",
          positionError: "\u274C Error detecting position, please try again",
          startPaintingMsg: "\u{1F3A8} Starting painting...",
          paintingProgress: "\u{1F9F1} Progress: {painted}/{total} pixels...",
          noCharges: "\u231B No charges. Waiting {time}...",
          paintingStopped: "\u23F9\uFE0F Painting stopped by user",
          paintingComplete: "\u2705 Painting completed! {count} pixels painted.",
          paintingError: "\u274C Error during painting",
          missingRequirements: "\u274C Load an image and select a position first",
          progress: "Progress",
          userName: "User",
          pixels: "Pixels",
          charges: "Charges",
          estimatedTime: "Estimated time",
          initMessage: "Click 'Initialize Auto-BOT' to begin",
          waitingInit: "Waiting for initialization...",
          resizeSuccess: "\u2705 Image resized to {width}x{height}",
          paintingPaused: "\u23F8\uFE0F Painting paused at position X: {x}, Y: {y}",
          pixelsPerBatch: "Pixels per batch",
          batchSize: "Batch size",
          nextBatchTime: "Next batch in",
          useAllCharges: "Use all available charges",
          showOverlay: "Show overlay",
          maxCharges: "Max charges per batch",
          waitingForCharges: "\u23F3 Waiting for charges: {current}/{needed}",
          timeRemaining: "Time remaining",
          cooldownWaiting: "\u23F3 Waiting {time} to continue...",
          progressSaved: "\u2705 Progress saved as {filename}",
          progressLoaded: "\u2705 Progress loaded: {painted}/{total} pixels painted",
          progressLoadError: "\u274C Error loading progress: {error}",
          exportGuard: "Export to Guard",
          progressSaveError: "\u274C Error saving progress: {error}",
          guardExportSuccess: "\u2705 Exported for Auto-Guard: {filename}",
          guardExportError: "\u274C Error exporting for Guard: {error}",
          confirmSaveProgress: "Do you want to save the current progress before stopping?",
          saveProgressTitle: "Save Progress",
          discardProgress: "Discard",
          cancel: "Cancel",
          minimize: "Minimize",
          width: "Width",
          height: "Height",
          keepAspect: "Keep aspect ratio",
          apply: "Apply",
          overlayOn: "Overlay: ON",
          overlayOff: "Overlay: OFF",
          passCompleted: "\u2705 Pass completed: {painted} pixels painted | Progress: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 Waiting for charge regeneration: {current}/{needed} - Time: {time}",
          waitingChargesCountdown: "\u23F3 Waiting for charges: {current}/{needed} - Remaining: {time}",
          autoInitializing: "\u{1F916} Auto-initializing...",
          autoInitSuccess: "\u2705 Bot auto-started successfully",
          autoInitFailed: "\u26A0\uFE0F Could not auto-start. Use manual button.",
          paletteDetected: "\u{1F3A8} Color palette detected",
          paletteNotFound: "\u{1F50D} Searching for color palette...",
          clickingPaintButton: "\u{1F446} Clicking Paint button...",
          paintButtonNotFound: "\u274C Paint button not found",
          manualInitRequired: "\u{1F527} Manual initialization required",
          retryAttempt: "\u{1F504} Retry {attempt}/{maxAttempts} in {delay}s...",
          retryError: "\u{1F4A5} Error in attempt {attempt}/{maxAttempts}, retrying in {delay}s...",
          retryFailed: "\u274C Failed after {maxAttempts} attempts. Continuing with next batch...",
          networkError: "\u{1F310} Network error. Retrying...",
          serverError: "\u{1F525} Server error. Retrying...",
          timeoutError: "\u23F0 Server timeout, retrying...",
          // v2.0 - Protection and Patterns
          protectionEnabled: "Protection enabled",
          protectionDisabled: "Protection disabled",
          paintPattern: "Paint pattern",
          patternLinearStart: "Linear (Start)",
          patternLinearEnd: "Linear (End)",
          patternRandom: "Random",
          patternCenterOut: "Center outward",
          patternCornersFirst: "Corners first",
          patternSpiral: "Spiral",
          solid: "Solid",
          stripes: "Stripes",
          checkerboard: "Checkerboard",
          gradient: "Gradient",
          dots: "Dots",
          waves: "Waves",
          spiral: "Spiral",
          mosaic: "Mosaic",
          bricks: "Bricks",
          zigzag: "Zigzag",
          protectingDrawing: "Protecting drawing...",
          changesDetected: "\u{1F6A8} {count} changes detected in drawing",
          repairing: "\u{1F527} Repairing {count} altered pixels...",
          repairCompleted: "\u2705 Repair completed: {count} pixels",
          noChargesForRepair: "\u26A1 No charges for repair, waiting...",
          protectionPriority: "\u{1F6E1}\uFE0F Protection priority activated",
          patternApplied: "Pattern applied",
          customPattern: "Custom pattern",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Download Logs",
          clearLogs: "Clear Logs",
          closeLogs: "Close"
        },
        // Farm module (to be implemented)
        farm: {
          title: "WPlace Farm Bot",
          start: "Start",
          stop: "Stop",
          stopped: "Bot stopped",
          calibrate: "Calibrate",
          paintOnce: "Once",
          checkingStatus: "Checking status...",
          configuration: "Configuration",
          delay: "Delay (ms)",
          pixelsPerBatch: "Pixels/batch",
          minCharges: "Min charges",
          colorMode: "Color mode",
          random: "Random",
          fixed: "Fixed",
          range: "Range",
          fixedColor: "Fixed color",
          advanced: "Advanced",
          tileX: "Tile X",
          tileY: "Tile Y",
          customPalette: "Custom palette",
          paletteExample: "e.g: #FF0000,#00FF00,#0000FF",
          capture: "Capture",
          painted: "Painted",
          charges: "Charges",
          retries: "Retries",
          tile: "Tile",
          configSaved: "Configuration saved",
          configLoaded: "Configuration loaded",
          configReset: "Configuration reset",
          captureInstructions: "Paint a pixel manually to capture coordinates...",
          backendOnline: "Backend Online",
          backendOffline: "Backend Offline",
          startingBot: "Starting bot...",
          stoppingBot: "Stopping bot...",
          calibrating: "Calibrating...",
          alreadyRunning: "Auto-Farm is already running.",
          imageRunningWarning: "Auto-Image is running. Close it before starting Auto-Farm.",
          selectPosition: "Select Area",
          selectPositionAlert: "\u{1F3AF} Paint a pixel in an EMPTY area of the map to set the farming zone",
          waitingPosition: "\u{1F446} Waiting for you to paint the reference pixel...",
          positionSet: "\u2705 Area set! Radius: 500px",
          positionTimeout: "\u274C Timeout for area selection",
          missingPosition: "\u274C Select an area first using 'Select Area'",
          farmRadius: "Farm radius",
          positionInfo: "Current area",
          farmingInRadius: "\u{1F33E} Farming in {radius}px radius from ({x},{y})",
          selectEmptyArea: "\u26A0\uFE0F IMPORTANT: Select an EMPTY area to avoid conflicts",
          noPosition: "No area",
          currentZone: "Zone: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} Select an area first. Paint a pixel on the map to set the farming zone",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Download Logs",
          clearLogs: "Clear Logs",
          closeLogs: "Close"
        },
        // Common/Shared
        common: {
          yes: "Yes",
          no: "No",
          ok: "OK",
          cancel: "Cancel",
          close: "Close",
          save: "Save",
          load: "Load",
          delete: "Delete",
          edit: "Edit",
          start: "Start",
          stop: "Stop",
          pause: "Pause",
          resume: "Resume",
          reset: "Reset",
          settings: "Settings",
          help: "Help",
          about: "About",
          language: "Language",
          loading: "Loading...",
          error: "Error",
          success: "Success",
          warning: "Warning",
          info: "Information",
          languageChanged: "Language changed to {language}"
        },
        // Guard Module
        guard: {
          title: "WPlace Auto-Guard",
          initBot: "Initialize Guard-BOT",
          selectArea: "Select Area",
          captureArea: "Capture Area",
          startProtection: "Start Protection",
          stopProtection: "Stop Protection",
          upperLeft: "Upper Left Corner",
          lowerRight: "Lower Right Corner",
          protectedPixels: "Protected Pixels",
          detectedChanges: "Detected Changes",
          repairedPixels: "Repaired Pixels",
          charges: "Charges",
          waitingInit: "Waiting for initialization...",
          checkingColors: "\u{1F3A8} Checking available colors...",
          noColorsFound: "\u274C No colors found. Open the color palette on the site.",
          colorsFound: "\u2705 Found {count} available colors",
          initSuccess: "\u2705 Guard-BOT initialized successfully",
          initError: "\u274C Error initializing Guard-BOT",
          invalidCoords: "\u274C Invalid coordinates",
          invalidArea: "\u274C Area must have upper left corner less than lower right corner",
          areaTooLarge: "\u274C Area too large: {size} pixels (maximum: {max})",
          capturingArea: "\u{1F4F8} Capturing protection area...",
          areaCaptured: "\u2705 Area captured: {count} pixels under protection",
          captureError: "\u274C Error capturing area: {error}",
          captureFirst: "\u274C First capture a protection area",
          protectionStarted: "\u{1F6E1}\uFE0F Protection started - monitoring area",
          protectionStopped: "\u23F9\uFE0F Protection stopped",
          noChanges: "\u2705 Protected area - no changes detected",
          changesDetected: "\u{1F6A8} {count} changes detected in protected area",
          repairing: "\u{1F6E0}\uFE0F Repairing {count} altered pixels...",
          repairedSuccess: "\u2705 Successfully repaired {count} pixels",
          repairError: "\u274C Error repairing pixels: {error}",
          noCharges: "\u26A0\uFE0F Insufficient charges to repair changes",
          checkingChanges: "\u{1F50D} Checking changes in protected area...",
          errorChecking: "\u274C Error checking changes: {error}",
          guardActive: "\u{1F6E1}\uFE0F Guardian active - area under protection",
          lastCheck: "Last check: {time}",
          nextCheck: "Next check in: {time}s",
          autoInitializing: "\u{1F916} Auto-initializing...",
          autoInitSuccess: "\u2705 Guard-BOT auto-started successfully",
          autoInitFailed: "\u26A0\uFE0F Could not auto-start. Use manual button.",
          manualInitRequired: "\u{1F527} Manual initialization required",
          paletteDetected: "\u{1F3A8} Color palette detected",
          paletteNotFound: "\u{1F50D} Searching for color palette...",
          clickingPaintButton: "\u{1F446} Clicking Paint button...",
          paintButtonNotFound: "\u274C Paint button not found",
          selectUpperLeft: "\u{1F3AF} Paint a pixel at the UPPER LEFT corner of the area to protect",
          selectLowerRight: "\u{1F3AF} Now paint a pixel at the LOWER RIGHT corner of the area",
          waitingUpperLeft: "\u{1F446} Waiting for upper left corner selection...",
          waitingLowerRight: "\u{1F446} Waiting for lower right corner selection...",
          upperLeftCaptured: "\u2705 Upper left corner captured: ({x}, {y})",
          lowerRightCaptured: "\u2705 Lower right corner captured: ({x}, {y})",
          selectionTimeout: "\u274C Selection timeout",
          selectionError: "\u274C Selection error, please try again",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Download Logs",
          clearLogs: "Clear Logs",
          closeLogs: "Close"
        }
      };
    }
  });

  // src/locales/fr.js
  var fr;
  var init_fr = __esm({
    "src/locales/fr.js"() {
      fr = {
        // Launcher
        launcher: {
          title: "WPlace AutoBOT",
          autoFarm: "\u{1F33E} Auto-Farm",
          autoImage: "\u{1F3A8} Auto-Image",
          autoGuard: "\u{1F6E1}\uFE0F Auto-Guard",
          selection: "S\xE9lection",
          user: "Utilisateur",
          charges: "Charges",
          backend: "Backend",
          database: "Base de donn\xE9es",
          uptime: "Temps actif",
          close: "Fermer",
          launch: "Lancer",
          loading: "Chargement\u2026",
          executing: "Ex\xE9cution\u2026",
          downloading: "T\xE9l\xE9chargement du script\u2026",
          chooseBot: "Choisissez un bot et appuyez sur Lancer",
          readyToLaunch: "Pr\xEAt \xE0 lancer",
          loadError: "Erreur de chargement",
          loadErrorMsg: "Impossible de charger le bot s\xE9lectionn\xE9. V\xE9rifiez votre connexion ou r\xE9essayez.",
          checking: "\u{1F504} V\xE9rification...",
          online: "\u{1F7E2} En ligne",
          offline: "\u{1F534} Hors ligne",
          ok: "\u{1F7E2} OK",
          error: "\u{1F534} Erreur",
          unknown: "-",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "T\xE9l\xE9charger Logs",
          clearLogs: "Effacer Logs",
          closeLogs: "Fermer"
        },
        // Image Module
        image: {
          title: "WPlace Auto-Image",
          initBot: "Initialiser Auto-BOT",
          uploadImage: "T\xE9l\xE9charger Image",
          resizeImage: "Redimensionner Image",
          selectPosition: "S\xE9lectionner Position",
          startPainting: "Commencer Peinture",
          stopPainting: "Arr\xEAter Peinture",
          saveProgress: "Sauvegarder Progr\xE8s",
          loadProgress: "Charger Progr\xE8s",
          checkingColors: "\u{1F50D} V\xE9rification des couleurs disponibles...",
          noColorsFound: "\u274C Ouvrez la palette de couleurs sur le site et r\xE9essayez!",
          colorsFound: "\u2705 {count} couleurs disponibles trouv\xE9es",
          loadingImage: "\u{1F5BC}\uFE0F Chargement de l'image...",
          imageLoaded: "\u2705 Image charg\xE9e avec {count} pixels valides",
          imageError: "\u274C Erreur lors du chargement de l'image",
          selectPositionAlert: "Peignez le premier pixel \xE0 l'emplacement o\xF9 vous voulez que l'art commence!",
          waitingPosition: "\u{1F446} En attente que vous peigniez le pixel de r\xE9f\xE9rence...",
          positionSet: "\u2705 Position d\xE9finie avec succ\xE8s!",
          positionTimeout: "\u274C D\xE9lai d\xE9pass\xE9 pour la s\xE9lection de position",
          positionDetected: "\u{1F3AF} Position d\xE9tect\xE9e, traitement...",
          positionError: "\u274C Erreur d\xE9tectant la position, essayez \xE0 nouveau",
          startPaintingMsg: "\u{1F3A8} D\xE9but de la peinture...",
          paintingProgress: "\u{1F9F1} Progr\xE8s: {painted}/{total} pixels...",
          noCharges: "\u231B Aucune charge. Attendre {time}...",
          paintingStopped: "\u23F9\uFE0F Peinture arr\xEAt\xE9e par l'utilisateur",
          paintingComplete: "\u2705 Peinture termin\xE9e! {count} pixels peints.",
          paintingError: "\u274C Erreur pendant la peinture",
          missingRequirements: "\u274C Chargez une image et s\xE9lectionnez une position d'abord",
          progress: "Progr\xE8s",
          userName: "Usager",
          pixels: "Pixels",
          charges: "Charges",
          estimatedTime: "Temps estim\xE9",
          initMessage: "Cliquez sur 'Initialiser Auto-BOT' pour commencer",
          waitingInit: "En attente d'initialisation...",
          resizeSuccess: "\u2705 Image redimensionn\xE9e \xE0 {width}x{height}",
          paintingPaused: "\u23F8\uFE0F Peinture mise en pause \xE0 la position X: {x}, Y: {y}",
          pixelsPerBatch: "Pixels par lot",
          batchSize: "Taille du lot",
          nextBatchTime: "Prochain lot dans",
          useAllCharges: "Utiliser toutes les charges disponibles",
          showOverlay: "Afficher l'overlay",
          maxCharges: "Charges max par lot",
          waitingForCharges: "\u23F3 En attente de charges: {current}/{needed}",
          timeRemaining: "Temps restant",
          cooldownWaiting: "\u23F3 Attendre {time} pour continuer...",
          progressSaved: "\u2705 Progr\xE8s sauvegard\xE9 sous {filename}",
          progressLoaded: "\u2705 Progr\xE8s charg\xE9: {painted}/{total} pixels peints",
          progressLoadError: "\u274C Erreur lors du chargement du progr\xE8s: {error}",
          exportGuard: "Exporter vers Guard",
          progressSaveError: "\u274C Erreur lors de la sauvegarde du progr\xE8s: {error}",
          guardExportSuccess: "\u2705 Export\xE9 pour Auto-Guard : {filename}",
          guardExportError: "\u274C Erreur lors de l'export pour Guard : {error}",
          confirmSaveProgress: "Voulez-vous sauvegarder le progr\xE8s actuel avant d'arr\xEAter?",
          saveProgressTitle: "Sauvegarder Progr\xE8s",
          discardProgress: "Abandonner",
          cancel: "Annuler",
          minimize: "Minimiser",
          width: "Largeur",
          height: "Hauteur",
          keepAspect: "Garder les proportions",
          apply: "Appliquer",
          overlayOn: "Overlay : ON",
          overlayOff: "Overlay : OFF",
          passCompleted: "\u2705 Passage termin\xE9: {painted} pixels peints | Progr\xE8s: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 Attente de r\xE9g\xE9n\xE9ration des charges: {current}/{needed} - Temps: {time}",
          waitingChargesCountdown: "\u23F3 Attente des charges: {current}/{needed} - Restant: {time}",
          autoInitializing: "\u{1F916} Initialisation automatique...",
          autoInitSuccess: "\u2705 Bot d\xE9marr\xE9 automatiquement",
          autoInitFailed: "\u26A0\uFE0F Impossible de d\xE9marrer automatiquement. Utilisez le bouton manuel.",
          paletteDetected: "\u{1F3A8} Palette de couleurs d\xE9tect\xE9e",
          paletteNotFound: "\u{1F50D} Recherche de la palette de couleurs...",
          clickingPaintButton: "\u{1F446} Clic sur le bouton Paint...",
          paintButtonNotFound: "\u274C Bouton Paint introuvable",
          manualInitRequired: "\u{1F527} Initialisation manuelle requise",
          retryAttempt: "\u{1F504} Tentative {attempt}/{maxAttempts} dans {delay}s...",
          retryError: "\u{1F4A5} Erreur dans tentative {attempt}/{maxAttempts}, nouvel essai dans {delay}s...",
          retryFailed: "\u274C \xC9chec apr\xE8s {maxAttempts} tentatives. Continuant avec le lot suivant...",
          networkError: "\u{1F310} Erreur r\xE9seau. Nouvel essai...",
          serverError: "\u{1F525} Erreur serveur. Nouvel essai...",
          timeoutError: "\u23F0 D\xE9lai d\u2019attente du serveur, nouvelle tentative...",
          // v2.0 - Protection et motifs
          protectionEnabled: "Protection activ\xE9e",
          protectionDisabled: "Protection d\xE9sactiv\xE9e",
          paintPattern: "Motif de peinture",
          patternLinearStart: "Lin\xE9aire (D\xE9but)",
          patternLinearEnd: "Lin\xE9aire (Fin)",
          patternRandom: "Al\xE9atoire",
          patternCenterOut: "Centre vers l\u2019ext\xE9rieur",
          patternCornersFirst: "Coins d\u2019abord",
          patternSpiral: "Spirale",
          solid: "Plein",
          stripes: "Rayures",
          checkerboard: "Damier",
          gradient: "D\xE9grad\xE9",
          dots: "Points",
          waves: "Vagues",
          spiral: "Spirale",
          mosaic: "Mosa\xEFque",
          bricks: "Briques",
          zigzag: "Zigzag",
          protectingDrawing: "Protection du dessin...",
          changesDetected: "\u{1F6A8} {count} changements d\xE9tect\xE9s dans le dessin",
          repairing: "\u{1F527} R\xE9paration de {count} pixels modifi\xE9s...",
          repairCompleted: "\u2705 R\xE9paration termin\xE9e : {count} pixels",
          noChargesForRepair: "\u26A1 Pas de frais pour la r\xE9paration, en attente...",
          protectionPriority: "\u{1F6E1}\uFE0F Priorit\xE9 \xE0 la protection activ\xE9e",
          patternApplied: "Motif appliqu\xE9",
          customPattern: "Motif personnalis\xE9",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "T\xE9l\xE9charger Logs",
          clearLogs: "Effacer Logs",
          closeLogs: "Fermer"
        },
        // Farm Module (to be implemented)
        farm: {
          title: "WPlace Farm Bot",
          start: "D\xE9marrer",
          stop: "Arr\xEAter",
          stopped: "Bot arr\xEAt\xE9",
          calibrate: "Calibrer",
          paintOnce: "Une fois",
          checkingStatus: "V\xE9rification du statut...",
          configuration: "Configuration",
          delay: "D\xE9lai (ms)",
          pixelsPerBatch: "Pixels/lot",
          minCharges: "Charges min",
          colorMode: "Mode couleur",
          random: "Al\xE9atoire",
          fixed: "Fixe",
          range: "Plage",
          fixedColor: "Couleur fixe",
          advanced: "Avanc\xE9",
          tileX: "Tuile X",
          tileY: "Tuile Y",
          customPalette: "Palette personnalis\xE9e",
          paletteExample: "ex: #FF0000,#00FF00,#0000FF",
          capture: "Capturer",
          painted: "Peints",
          charges: "Charges",
          retries: "\xC9checs",
          tile: "Tuile",
          configSaved: "Configuration sauvegard\xE9e",
          configLoaded: "Configuration charg\xE9e",
          configReset: "Configuration r\xE9initialis\xE9e",
          captureInstructions: "Peindre un pixel manuellement pour capturer les coordonn\xE9es...",
          backendOnline: "Backend En ligne",
          backendOffline: "Backend Hors ligne",
          startingBot: "D\xE9marrage du bot...",
          stoppingBot: "Arr\xEAt du bot...",
          calibrating: "Calibrage...",
          alreadyRunning: "Auto-Farm est d\xE9j\xE0 en cours d'ex\xE9cution.",
          imageRunningWarning: "Auto-Image est en cours d'ex\xE9cution. Fermez-le avant de d\xE9marrer Auto-Farm.",
          selectPosition: "S\xE9lectionner Zone",
          selectPositionAlert: "\u{1F3AF} Peignez un pixel dans une zone VIDE de la carte pour d\xE9finir la zone de farming",
          waitingPosition: "\u{1F446} En attente que vous peigniez le pixel de r\xE9f\xE9rence...",
          positionSet: "\u2705 Zone d\xE9finie! Rayon: 500px",
          positionTimeout: "\u274C D\xE9lai d\xE9pass\xE9 pour la s\xE9lection de zone",
          missingPosition: "\u274C S\xE9lectionnez une zone d'abord en utilisant 'S\xE9lectionner Zone'",
          farmRadius: "Rayon farm",
          positionInfo: "Zone actuelle",
          farmingInRadius: "\u{1F33E} Farming dans un rayon de {radius}px depuis ({x},{y})",
          selectEmptyArea: "\u26A0\uFE0F IMPORTANT: S\xE9lectionnez une zone VIDE pour \xE9viter les conflits",
          noPosition: "Aucune zone",
          currentZone: "Zone: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} S\xE9lectionnez une zone d'abord. Peignez un pixel sur la carte pour d\xE9finir la zone de farming",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "T\xE9l\xE9charger Logs",
          clearLogs: "Effacer Logs",
          closeLogs: "Fermer"
        },
        // Common/Shared
        common: {
          yes: "Oui",
          no: "Non",
          ok: "OK",
          cancel: "Annuler",
          close: "Fermer",
          save: "Sauvegarder",
          load: "Charger",
          delete: "Supprimer",
          edit: "Modifier",
          start: "D\xE9marrer",
          stop: "Arr\xEAter",
          pause: "Pause",
          resume: "Reprendre",
          reset: "R\xE9initialiser",
          settings: "Param\xE8tres",
          help: "Aide",
          about: "\xC0 propos",
          language: "Langue",
          loading: "Chargement...",
          error: "Erreur",
          success: "Succ\xE8s",
          warning: "Avertissement",
          info: "Information",
          languageChanged: "Langue chang\xE9e en {language}"
        },
        // Guard Module
        guard: {
          title: "WPlace Auto-Guard",
          initBot: "Initialiser Guard-BOT",
          selectArea: "S\xE9lectionner Zone",
          captureArea: "Capturer Zone",
          startProtection: "D\xE9marrer Protection",
          stopProtection: "Arr\xEAter Protection",
          upperLeft: "Coin Sup\xE9rieur Gauche",
          lowerRight: "Coin Inf\xE9rieur Droit",
          protectedPixels: "Pixels Prot\xE9g\xE9s",
          detectedChanges: "Changements D\xE9tect\xE9s",
          repairedPixels: "Pixels R\xE9par\xE9s",
          charges: "Charges",
          waitingInit: "En attente d'initialisation...",
          checkingColors: "\u{1F3A8} V\xE9rification des couleurs disponibles...",
          noColorsFound: "\u274C Aucune couleur trouv\xE9e. Ouvrez la palette de couleurs sur le site.",
          colorsFound: "\u2705 {count} couleurs disponibles trouv\xE9es",
          initSuccess: "\u2705 Guard-BOT initialis\xE9 avec succ\xE8s",
          initError: "\u274C Erreur lors de l'initialisation de Guard-BOT",
          invalidCoords: "\u274C Coordonn\xE9es invalides",
          invalidArea: "\u274C La zone doit avoir le coin sup\xE9rieur gauche inf\xE9rieur au coin inf\xE9rieur droit",
          areaTooLarge: "\u274C Zone trop grande: {size} pixels (maximum: {max})",
          capturingArea: "\u{1F4F8} Capture de la zone de protection...",
          areaCaptured: "\u2705 Zone captur\xE9e: {count} pixels sous protection",
          captureError: "\u274C Erreur lors de la capture de zone: {error}",
          captureFirst: "\u274C Capturez d'abord une zone de protection",
          protectionStarted: "\u{1F6E1}\uFE0F Protection d\xE9marr\xE9e - surveillance de la zone",
          protectionStopped: "\u23F9\uFE0F Protection arr\xEAt\xE9e",
          noChanges: "\u2705 Zone prot\xE9g\xE9e - aucun changement d\xE9tect\xE9",
          changesDetected: "\u{1F6A8} {count} changements d\xE9tect\xE9s dans la zone prot\xE9g\xE9e",
          repairing: "\u{1F6E0}\uFE0F R\xE9paration de {count} pixels alt\xE9r\xE9s...",
          repairedSuccess: "\u2705 {count} pixels r\xE9par\xE9s avec succ\xE8s",
          repairError: "\u274C Erreur lors de la r\xE9paration des pixels: {error}",
          noCharges: "\u26A0\uFE0F Charges insuffisantes pour r\xE9parer les changements",
          checkingChanges: "\u{1F50D} V\xE9rification des changements dans la zone prot\xE9g\xE9e...",
          errorChecking: "\u274C Erreur lors de la v\xE9rification des changements: {error}",
          guardActive: "\u{1F6E1}\uFE0F Gardien actif - zone sous protection",
          lastCheck: "Derni\xE8re v\xE9rification: {time}",
          nextCheck: "Prochaine v\xE9rification dans: {time}s",
          autoInitializing: "\u{1F916} Initialisation automatique...",
          autoInitSuccess: "\u2705 Guard-BOT d\xE9marr\xE9 automatiquement",
          autoInitFailed: "\u26A0\uFE0F Impossible de d\xE9marrer automatiquement. Utilisez le bouton manuel.",
          manualInitRequired: "\u{1F527} Initialisation manuelle requise",
          paletteDetected: "\u{1F3A8} Palette de couleurs d\xE9tect\xE9e",
          paletteNotFound: "\u{1F50D} Recherche de la palette de couleurs...",
          clickingPaintButton: "\u{1F446} Clic sur le bouton Paint...",
          paintButtonNotFound: "\u274C Bouton Paint introuvable",
          selectUpperLeft: "\u{1F3AF} Peignez un pixel au coin SUP\xC9RIEUR GAUCHE de la zone \xE0 prot\xE9ger",
          selectLowerRight: "\u{1F3AF} Maintenant peignez un pixel au coin INF\xC9RIEUR DROIT de la zone",
          waitingUpperLeft: "\u{1F446} En attente de la s\xE9lection du coin sup\xE9rieur gauche...",
          waitingLowerRight: "\u{1F446} En attente de la s\xE9lection du coin inf\xE9rieur droit...",
          upperLeftCaptured: "\u2705 Coin sup\xE9rieur gauche captur\xE9: ({x}, {y})",
          lowerRightCaptured: "\u2705 Coin inf\xE9rieur droit captur\xE9: ({x}, {y})",
          selectionTimeout: "\u274C D\xE9lai de s\xE9lection d\xE9pass\xE9",
          selectionError: "\u274C Erreur de s\xE9lection, veuillez r\xE9essayer",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "T\xE9l\xE9charger Logs",
          clearLogs: "Effacer Logs",
          closeLogs: "Fermer"
        }
      };
    }
  });

  // src/locales/ru.js
  var ru;
  var init_ru = __esm({
    "src/locales/ru.js"() {
      ru = {
        // Launcher
        launcher: {
          title: "WPlace AutoBOT",
          autoFarm: "\u{1F33E} \u0410\u0432\u0442\u043E-\u0424\u0430\u0440\u043C",
          autoImage: "\u{1F3A8} \u0410\u0432\u0442\u043E-\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435",
          autoGuard: "\u{1F6E1}\uFE0F \u0410\u0432\u0442\u043E-\u0417\u0430\u0449\u0438\u0442\u0430",
          selection: "\u0412\u044B\u0431\u0440\u0430\u043D\u043E",
          user: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C",
          charges: "\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F",
          backend: "\u0411\u044D\u043A\u0435\u043D\u0434",
          database: "\u0411\u0430\u0437\u0430 \u0434\u0430\u043D\u043D\u044B\u0445",
          uptime: "\u0412\u0440\u0435\u043C\u044F \u0440\u0430\u0431\u043E\u0442\u044B",
          close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
          launch: "\u0417\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C",
          loading: "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430",
          executing: "\u0412\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435",
          downloading: "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0441\u043A\u0440\u0438\u043F\u0442\u0430...",
          chooseBot: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0431\u043E\u0442\u0430 \u0438 \u043D\u0430\u0436\u043C\u0438\u0442\u0435 \u0417\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C",
          readyToLaunch: "\u0413\u043E\u0442\u043E\u0432\u043E \u043A \u0437\u0430\u043F\u0443\u0441\u043A\u0443",
          loadError: "\u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438",
          loadErrorMsg: "\u041D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u0433\u043E \u0431\u043E\u0442\u0430. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u0438\u043B\u0438 \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437.",
          checking: "\u{1F504} \u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430...",
          online: "\u{1F7E2} \u041E\u043D\u043B\u0430\u0439\u043D",
          offline: "\u{1F534} \u041E\u0444\u043B\u0430\u0439\u043D",
          ok: "\u{1F7E2} \u041E\u041A",
          error: "\u{1F534} \u041E\u0448\u0438\u0431\u043A\u0430",
          unknown: "-",
          logWindow: "Logs",
          logWindowTitle: "\u041B\u043E\u0433\u0438 - {botName}",
          downloadLogs: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u041B\u043E\u0433\u0438",
          clearLogs: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u041B\u043E\u0433\u0438",
          closeLogs: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C"
        },
        // Image Module
        image: {
          title: "WPlace \u0410\u0432\u0442\u043E-\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435",
          initBot: "\u0418\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u0442\u044C Auto-BOT",
          uploadImage: "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435",
          resizeImage: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0440\u0430\u0437\u043C\u0435\u0440 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F",
          selectPosition: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u043C\u0435\u0441\u0442\u043E \u043D\u0430\u0447\u0430\u043B\u0430",
          startPainting: "\u041D\u0430\u0447\u0430\u0442\u044C \u0440\u0438\u0441\u043E\u0432\u0430\u0442\u044C",
          stopPainting: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0440\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u0435",
          saveProgress: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          loadProgress: "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          checkingColors: "\u{1F50D} \u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0446\u0432\u0435\u0442\u043E\u0432...",
          noColorsFound: "\u274C \u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u043F\u0430\u043B\u0438\u0442\u0440\u0443 \u0446\u0432\u0435\u0442\u043E\u0432 \u043D\u0430 \u0441\u0430\u0439\u0442\u0435 \u0438 \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043D\u043E\u0432\u0430!",
          colorsFound: "\u2705 \u041D\u0430\u0439\u0434\u0435\u043D\u043E {count} \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0446\u0432\u0435\u0442\u043E\u0432",
          loadingImage: "\u{1F5BC}\uFE0F \u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F...",
          imageLoaded: "\u2705 \u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043E \u0441 {count} \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u043C\u0438 \u043F\u0438\u043A\u0441\u0435\u043B\u044F\u043C\u0438",
          imageError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F",
          selectPositionAlert: "\u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u0440\u0442\u043E\u0432\u044B\u0439 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432 \u0442\u043E\u043C \u043C\u0435\u0441\u0442\u0435, \u0433\u0434\u0435 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u0440\u0438\u0441\u0443\u043D\u043E\u043A \u043D\u0430\u0447\u0438\u043D\u0430\u043B\u0441\u044F!",
          waitingPosition: "\u{1F446} \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0441\u0442\u0430\u0440\u0442\u043E\u0432\u043E\u0433\u043E \u043F\u0438\u043A\u0441\u0435\u043B\u044F....",
          positionSet: "\u2705 \u041F\u043E\u0437\u0438\u0446\u0438\u044F \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0430 \u0443\u0441\u043F\u0435\u0448\u043D\u043E!",
          positionTimeout: "\u274C \u0422\u0430\u0439\u043C\u0430\u0443\u0442 \u0432\u044B\u0431\u043E\u0440\u0430 \u043F\u043E\u0437\u0438\u0446\u0438\u0438",
          positionDetected: "\u{1F3AF} \u041F\u043E\u0437\u0438\u0446\u0438\u044F \u0432\u044B\u0431\u0440\u0430\u043D\u0430, \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430...",
          positionError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u044B\u0431\u043E\u0440\u0430 \u043F\u043E\u0437\u0438\u0446\u0438\u0438, \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437",
          startPaintingMsg: "\u{1F3A8} \u041D\u0430\u0447\u0430\u043B\u043E \u0440\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u044F...",
          paintingProgress: "\u{1F9F1} \u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441: {painted} \u0438\u0437 {total} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439...",
          noCharges: "\u231B \u041D\u0435\u0442 \u0437\u0430\u0440\u044F\u0434\u043E\u0432. \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 {time}...",
          paintingStopped: "\u23F9\uFE0F \u0420\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u0435 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043E \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u043C",
          paintingComplete: "\u2705 \u0420\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E! {count} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u043D\u0430\u0440\u0438\u0441\u043E\u0432\u0430\u043D\u043E.",
          paintingError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432 \u043F\u0440\u043E\u0446\u0435\u0441\u0441\u0435 \u0440\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u044F",
          missingRequirements: "\u274C \u0421\u043F\u0435\u0440\u0432\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0438 \u0432\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043C\u0435\u0441\u0442\u043E \u043D\u0430\u0447\u0430\u043B\u0430",
          progress: "\u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          userName: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C",
          pixels: "\u041F\u0438\u043A\u0441\u0435\u043B\u0438",
          charges: "\u0417\u0430\u0440\u044F\u0434\u044B",
          estimatedTime: "\u041F\u0440\u0435\u0434\u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F",
          initMessage: "\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \xAB\u0417\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C Auto-BOT\xBB, \u0447\u0442\u043E\u0431\u044B \u043D\u0430\u0447\u0430\u0442\u044C",
          waitingInit: "\u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438...",
          resizeSuccess: "\u2705 \u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u043E \u0434\u043E {width}x{height}",
          paintingPaused: "\u23F8\uFE0F \u0420\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u0435 \u043F\u0440\u0438\u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043E \u043D\u0430 \u043F\u043E\u0437\u0438\u0446\u0438\u0438 X: {x}, Y: {y}",
          pixelsPerBatch: "\u041F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u0432 \u043F\u0440\u043E\u0445\u043E\u0434\u0435",
          batchSize: "\u0420\u0430\u0437\u043C\u0435\u0440 \u043F\u0440\u043E\u0445\u043E\u0434\u0430",
          nextBatchTime: "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u043F\u0440\u043E\u0445\u043E\u0434 \u0447\u0435\u0440\u0435\u0437",
          useAllCharges: "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0432\u0441\u0435 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0435 \u0437\u0430\u0440\u044F\u0434\u044B",
          showOverlay: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043D\u0430\u043B\u043E\u0436\u0435\u043D\u0438\u0435",
          maxCharges: "\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u043A\u043E\u043B-\u0432\u043E \u0437\u0430\u0440\u044F\u0434\u043E\u0432 \u0437\u0430 \u043F\u0440\u043E\u0445\u043E\u0434",
          waitingForCharges: "\u23F3 \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0437\u0430\u0440\u044F\u0434\u043E\u0432: {current} \u0438\u0437 {needed}",
          timeRemaining: "\u0412\u0440\u0435\u043C\u0435\u043D\u0438 \u043E\u0441\u0442\u0430\u043B\u043E\u0441\u044C",
          cooldownWaiting: "\u23F3 \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 {time} \u0434\u043B\u044F \u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0435\u043D\u0438\u044F...",
          progressSaved: "\u2705 \u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D \u043A\u0430\u043A {filename}",
          progressLoaded: "\u2705 \u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D: {painted} \u0438\u0437 {total} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u043D\u0430\u0440\u0438\u0441\u043E\u0432\u0430\u043D\u043E",
          progressLoadError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441\u0430: {error}",
          exportGuard: "\u042D\u043A\u0441\u043F\u043E\u0440\u0442 \u0432 Guard",
          progressSaveError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441\u0430: {error}",
          guardExportSuccess: "\u2705 \u042D\u043A\u0441\u043F\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043E \u0434\u043B\u044F Auto-Guard: {filename}",
          guardExportError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u044D\u043A\u0441\u043F\u043E\u0440\u0442\u0430 \u0434\u043B\u044F Guard: {error}",
          confirmSaveProgress: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0442\u0435\u043A\u0443\u0449\u0438\u0439 \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441 \u043F\u0435\u0440\u0435\u0434 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u043E\u0439?",
          saveProgressTitle: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          discardProgress: "\u041D\u0435 \u0441\u043E\u0445\u0440\u0430\u043D\u044F\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          cancel: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C",
          minimize: "\u0421\u0432\u0435\u0440\u043D\u0443\u0442\u044C",
          width: "\u0428\u0438\u0440\u0438\u043D\u0430",
          height: "\u0412\u044B\u0441\u043E\u0442\u0430",
          keepAspect: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D",
          apply: "\u041F\u0440\u0438\u043C\u0435\u043D\u0438\u0442\u044C",
          overlayOn: "\u041D\u0430\u043B\u043E\u0436\u0435\u043D\u0438\u0435: \u0412\u041A\u041B",
          overlayOff: "\u041D\u0430\u043B\u043E\u0436\u0435\u043D\u0438\u0435: \u0412\u042B\u041A\u041B",
          passCompleted: "\u2705 \u041F\u0440\u043E\u0446\u0435\u0441\u0441 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D: {painted} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u043D\u0430\u0440\u0438\u0441\u043E\u0432\u0430\u043D\u043E | \u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441: {percent}% ({current} \u0438\u0437 {total})",
          waitingChargesRegen: "\u23F3 \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0432\u043E\u0441\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u0437\u0430\u0440\u044F\u0434\u0430: {current} \u0438\u0437 {needed} - \u0412\u0440\u0435\u043C\u044F: {time}",
          waitingChargesCountdown: "\u23F3 \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0437\u0430\u0440\u044F\u0434\u043E\u0432: {current} \u0438\u0437 {needed} - \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F: {time}",
          autoInitializing: "\u{1F916} \u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F...",
          autoInitSuccess: "\u2705 \u0411\u043E\u0442 \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u043B\u0441\u044F \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438",
          autoInitFailed: "\u26A0\uFE0F \u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u0430\u0432\u0442\u043E\u0437\u0430\u043F\u0443\u0441\u043A. \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u043A\u043D\u043E\u043F\u043A\u0443 \u0440\u0443\u0447\u043D\u043E\u0433\u043E \u0437\u0430\u043F\u0443\u0441\u043A\u0430.",
          paletteDetected: "\u{1F3A8} \u0426\u0432\u0435\u0442\u043E\u0432\u0430\u044F \u043F\u0430\u043B\u0438\u0442\u0440\u0430 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u0430",
          paletteNotFound: "\u{1F50D} \u041F\u043E\u0438\u0441\u043A \u0446\u0432\u0435\u0442\u043E\u0432\u043E\u0439 \u043F\u0430\u043B\u0438\u0442\u0440\u044B...",
          clickingPaintButton: "\u{1F446} \u041D\u0430\u0436\u0430\u0442\u0438\u0435 \u043A\u043D\u043E\u043F\u043A\u0438 \xABPaint\xBB...",
          paintButtonNotFound: "\u274C \u041A\u043D\u043E\u043F\u043A\u0430 \xABPaint\xBB \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u0430",
          manualInitRequired: "\u{1F527} \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F \u0440\u0443\u0447\u043D\u0430\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F",
          retryAttempt: "\u{1F504} \u041F\u043E\u0432\u0442\u043E\u0440\u043D\u0430\u044F \u043F\u043E\u043F\u044B\u0442\u043A\u0430 {attempt} \u0438\u0437 {maxAttempts} \u0447\u0435\u0440\u0435\u0437 {delay}s...",
          retryError: "\u{1F4A5} \u041E\u0448\u0438\u0431\u043A\u0430 \u0432 \u043F\u043E\u043F\u044B\u0442\u043A\u0435 {attempt} \u0438\u0437 {maxAttempts}, \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 {delay}s...",
          retryFailed: "\u274C \u041F\u0440\u043E\u0432\u0430\u043B\u0435\u043D\u043E \u0441\u043F\u0443\u0441\u0442\u044F {maxAttempts} \u043F\u043E\u043F\u044B\u0442\u043E\u043A. \u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0435\u043D\u0438\u0435 \u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u043C \u043F\u0440\u043E\u0445\u043E\u0434\u0435...",
          networkError: "\u{1F310} \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u0435\u0442\u0438. \u041F\u043E\u0432\u0442\u043E\u0440\u043D\u0430\u044F \u043F\u043E\u043F\u044B\u0442\u043A\u0430...",
          serverError: "\u{1F525} \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041F\u043E\u0432\u0442\u043E\u0440\u043D\u0430\u044F \u043F\u043E\u043F\u044B\u0442\u043A\u0430...",
          timeoutError: "\u23F0 \u0422\u0430\u0439\u043C-\u0430\u0443\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043F\u043E\u0432\u0442\u043E\u0440\u043D\u0430\u044F \u043F\u043E\u043F\u044B\u0442\u043A\u0430...",
          // v2.0 - Защита и шаблоны
          protectionEnabled: "\u0417\u0430\u0449\u0438\u0442\u0430 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u0430",
          protectionDisabled: "\u0417\u0430\u0449\u0438\u0442\u0430 \u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0430",
          paintPattern: "\u0428\u0430\u0431\u043B\u043E\u043D \u0440\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u044F",
          patternLinearStart: "\u041B\u0438\u043D\u0435\u0439\u043D\u044B\u0439 (\u043D\u0430\u0447\u0430\u043B\u043E)",
          patternLinearEnd: "\u041B\u0438\u043D\u0435\u0439\u043D\u044B\u0439 (\u043A\u043E\u043D\u0435\u0446)",
          patternRandom: "\u0421\u043B\u0443\u0447\u0430\u0439\u043D\u044B\u0439",
          patternCenterOut: "\u0418\u0437 \u0446\u0435\u043D\u0442\u0440\u0430 \u043D\u0430\u0440\u0443\u0436\u0443",
          patternCornersFirst: "\u0421\u043D\u0430\u0447\u0430\u043B\u0430 \u0443\u0433\u043B\u044B",
          patternSpiral: "\u0421\u043F\u0438\u0440\u0430\u043B\u044C",
          solid: "\u0421\u043F\u043B\u043E\u0448\u043D\u043E\u0439",
          stripes: "\u041F\u043E\u043B\u043E\u0441\u044B",
          checkerboard: "\u0428\u0430\u0445\u043C\u0430\u0442\u043D\u0430\u044F \u0434\u043E\u0441\u043A\u0430",
          gradient: "\u0413\u0440\u0430\u0434\u0438\u0435\u043D\u0442",
          dots: "\u0422\u043E\u0447\u043A\u0438",
          waves: "\u0412\u043E\u043B\u043D\u044B",
          spiral: "\u0421\u043F\u0438\u0440\u0430\u043B\u044C",
          mosaic: "\u041C\u043E\u0437\u0430\u0438\u043A\u0430",
          bricks: "\u041A\u0438\u0440\u043F\u0438\u0447\u0438",
          zigzag: "\u0417\u0438\u0433\u0437\u0430\u0433",
          protectingDrawing: "\u0417\u0430\u0449\u0438\u0442\u0430 \u0440\u0438\u0441\u0443\u043D\u043A\u0430...",
          changesDetected: "\u{1F6A8} \u041E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439: {count}",
          repairing: "\u{1F527} \u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 {count} \u0438\u0437\u043C\u0435\u043D\u0451\u043D\u043D\u044B\u0445 \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439...",
          repairCompleted: "\u2705 \u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E: {count} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439",
          noChargesForRepair: "\u26A1 \u041A\u043E\u043C\u0438\u0441\u0441\u0438\u0439 \u0437\u0430 \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u043D\u0435\u0442, \u043E\u0436\u0438\u0434\u0430\u043D\u0438\u0435...",
          protectionPriority: "\u{1F6E1}\uFE0F \u041F\u0440\u0438\u043E\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0449\u0438\u0442\u044B \u0430\u043A\u0442\u0438\u0432\u0438\u0440\u043E\u0432\u0430\u043D",
          patternApplied: "\u0428\u0430\u0431\u043B\u043E\u043D \u043F\u0440\u0438\u043C\u0435\u043D\u0451\u043D",
          customPattern: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u0448\u0430\u0431\u043B\u043E\u043D",
          logWindow: "Logs",
          logWindowTitle: "\u041B\u043E\u0433\u0438 - {botName}",
          downloadLogs: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u041B\u043E\u0433\u0438",
          clearLogs: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u041B\u043E\u0433\u0438",
          closeLogs: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C"
        },
        // Farm Module (to be implemented)
        farm: {
          title: "WPlace \u0410\u0432\u0442\u043E-\u0424\u0430\u0440\u043C",
          start: "\u041D\u0430\u0447\u0430\u0442\u044C",
          stop: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C",
          stopped: "\u0411\u043E\u0442 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D",
          calibrate: "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u0430\u0442\u044C",
          paintOnce: "\u0415\u0434\u0438\u043D\u043E\u0440\u0430\u0437\u043E\u0432\u043E",
          checkingStatus: "\u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430...",
          configuration: "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F",
          delay: "\u0417\u0430\u0434\u0435\u0440\u0436\u043A\u0430 (\u043C\u0441)",
          pixelsPerBatch: "\u041F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u0437\u0430 \u043F\u0440\u043E\u0445\u043E\u0434",
          minCharges: "\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u043A\u043E\u043B-\u0432\u043E",
          colorMode: "\u0420\u0435\u0436\u0438\u043C \u0446\u0432\u0435\u0442\u043E\u0432",
          random: "\u0421\u043B\u0443\u0447\u0430\u0439\u043D\u044B\u0439",
          fixed: "\u0424\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439",
          range: "\u0414\u0438\u0430\u043F\u0430\u0437\u043E\u043D",
          fixedColor: "\u0424\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u0446\u0432\u0435\u0442",
          advanced: "\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u043D\u044B\u0435",
          tileX: "\u041F\u043B\u0438\u0442\u043A\u0430 X",
          tileY: "\u041F\u043B\u0438\u0442\u043A\u0430 Y",
          customPalette: "\u0421\u0432\u043E\u044F \u043F\u0430\u043B\u0438\u0442\u0440\u0430",
          paletteExample: "\u043F\u0440\u0438\u043C\u0435\u0440: #FF0000,#00FF00,#0000FF",
          capture: "\u0417\u0430\u0445\u0432\u0430\u0442",
          painted: "\u0417\u0430\u043A\u0440\u0430\u0448\u0435\u043D\u043E",
          charges: "\u0417\u0430\u0440\u044F\u0434\u044B",
          retries: "\u041F\u043E\u0432\u0442\u043E\u0440\u043D\u044B\u0435 \u043F\u043E\u043F\u044B\u0442\u043A\u0438",
          tile: "\u041F\u043B\u0438\u0442\u043A\u0430",
          configSaved: "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0430",
          configLoaded: "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u0430",
          configReset: "\u0421\u0431\u0440\u043E\u0441 \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",
          captureInstructions: "\u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432\u0440\u0443\u0447\u043D\u0443\u044E \u0434\u043B\u044F \u0437\u0430\u0445\u0432\u0430\u0442\u0430 \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442...",
          backendOnline: "\u0411\u044D\u043A\u044D\u043D\u0434 \u041E\u043D\u043B\u0430\u0439\u043D",
          backendOffline: "\u0411\u044D\u043A\u044D\u043D\u0434 \u041E\u0444\u043B\u0430\u0439\u043D",
          startingBot: "\u0417\u0430\u043F\u0443\u0441\u043A \u0431\u043E\u0442\u0430...",
          stoppingBot: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0430 \u0431\u043E\u0442\u0430...",
          calibrating: "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430...",
          alreadyRunning: "\u0410\u0432\u0442\u043E-\u0424\u0430\u0440\u043C \u0443\u0436\u0435 \u0437\u0430\u043F\u0443\u0449\u0435\u043D",
          imageRunningWarning: "\u0410\u0432\u0442\u043E-\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0437\u0430\u043F\u0443\u0449\u0435\u043D\u043E. \u0417\u0430\u043A\u0440\u043E\u0439\u0442\u0435 \u0435\u0433\u043E \u043F\u0435\u0440\u0435\u0434 \u0437\u0430\u043F\u0443\u0441\u043A\u043E\u043C \u0410\u0432\u0442\u043E-\u0424\u0430\u0440\u043C\u0430.",
          selectPosition: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C",
          selectPositionAlert: "\u{1F3AF} \u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432 \u041F\u0423\u0421\u0422\u041E\u0419 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u043A\u0430\u0440\u0442\u044B, \u0447\u0442\u043E\u0431\u044B \u043E\u0431\u043E\u0437\u043D\u0430\u0447\u0438\u0442\u044C \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u0444\u0430\u0440\u043C\u0430.",
          waitingPosition: "\u{1F446} \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0441\u0442\u0430\u0440\u0442\u043E\u0432\u043E\u0433\u043E \u043F\u0438\u043A\u0441\u0435\u043B\u044F....",
          positionSet: "\u2705 \u041E\u0431\u043B\u0430\u0441\u0442\u044C \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0430! \u0420\u0430\u0434\u0438\u0443\u0441: 500px",
          positionTimeout: "\u274C \u0422\u0430\u0439\u043C\u0430\u0443\u0442 \u0432\u044B\u0431\u043E\u0440\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          missingPosition: "\u274C \u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u0441 \u043F\u043E\u043C\u043E\u0449\u044C\u044E \xAB\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u043E\u0431\u043B\u0430\u0441\u0442\u044C\xBB",
          farmRadius: "\u0420\u0430\u0434\u0438\u0443\u0441 \u0444\u0430\u0440\u043C\u0430",
          positionInfo: "\u0422\u0435\u043A\u0443\u0449\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C",
          farmingInRadius: "\u{1F33E} \u0424\u0430\u0440\u043C \u0432 \u0440\u0430\u0434\u0438\u0443\u0441\u0435 {radius}px \u043E\u0442 ({x},{y})",
          selectEmptyArea: "\u26A0\uFE0F \u0412\u0410\u0416\u041D\u041E: \u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u041F\u0423\u0421\u0422\u0423\u042E \u043E\u0431\u043B\u0430\u0441\u0442\u044C, \u0447\u0442\u043E\u0431\u044B \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044C \u043A\u043E\u043D\u0444\u043B\u0438\u043A\u0442\u043E\u0432.",
          noPosition: "\u041D\u0435\u0442 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          currentZone: "\u041E\u0431\u043B\u0430\u0441\u0442\u044C: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} \u0421\u043D\u0430\u0447\u0430\u043B\u0430 \u0432\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\u0431\u043B\u0430\u0441\u0442\u044C. \u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u043D\u0430 \u043A\u0430\u0440\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u043E\u0431\u043E\u0437\u043D\u0430\u0447\u0438\u0442\u044C \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u0444\u0430\u0440\u043C\u0430.",
          logWindow: "Logs",
          logWindowTitle: "\u041B\u043E\u0433\u0438 - {botName}",
          downloadLogs: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u041B\u043E\u0433\u0438",
          clearLogs: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u041B\u043E\u0433\u0438",
          closeLogs: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C"
        },
        // Common/Shared
        common: {
          yes: "\u0414\u0430",
          no: "\u041D\u0435\u0442",
          ok: "\u041E\u041A",
          cancel: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C",
          close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
          save: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C",
          load: "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C",
          delete: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
          edit: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C",
          start: "\u041D\u0430\u0447\u0430\u0442\u044C",
          stop: "\u0417\u0430\u043A\u043E\u043D\u0447\u0438\u0442\u044C",
          pause: "\u041F\u0440\u0438\u043E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C",
          resume: "\u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C",
          reset: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C",
          settings: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
          help: "\u041F\u043E\u043C\u043E\u0449\u044C",
          about: "\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F",
          language: "\u042F\u0437\u044B\u043A",
          loading: "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...",
          error: "\u041E\u0448\u0438\u0431\u043A\u0430",
          success: "\u0423\u0441\u043F\u0435\u0445",
          warning: "\u041F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0436\u0434\u0435\u043D\u0438\u0435",
          info: "\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F",
          languageChanged: "\u042F\u0437\u044B\u043A \u0438\u0437\u043C\u0435\u043D\u0435\u043D \u043D\u0430 {language}"
        },
        // Guard Module
        guard: {
          title: "WPlace \u0410\u0432\u0442\u043E-\u0417\u0430\u0449\u0438\u0442\u0430",
          initBot: "\u0418\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u0442\u044C Guard-BOT",
          selectArea: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u041E\u0431\u043B\u0430\u0441\u0442\u044C",
          captureArea: "\u0417\u0430\u0445\u0432\u0430\u0442\u0438\u0442\u044C \u041E\u0431\u043B\u0430\u0441\u0442\u044C",
          startProtection: "\u041D\u0430\u0447\u0430\u0442\u044C \u0417\u0430\u0449\u0438\u0442\u0443",
          stopProtection: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0417\u0430\u0449\u0438\u0442\u0443",
          upperLeft: "\u0412\u0435\u0440\u0445\u043D\u0438\u0439 \u041B\u0435\u0432\u044B\u0439 \u0423\u0433\u043E\u043B",
          lowerRight: "\u041D\u0438\u0436\u043D\u0438\u0439 \u041F\u0440\u0430\u0432\u044B\u0439 \u0423\u0433\u043E\u043B",
          protectedPixels: "\u0417\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u044B\u0435 \u041F\u0438\u043A\u0441\u0435\u043B\u0438",
          detectedChanges: "\u041E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043D\u044B\u0435 \u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F",
          repairedPixels: "\u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043D\u044B\u0435 \u041F\u0438\u043A\u0441\u0435\u043B\u0438",
          charges: "\u0417\u0430\u0440\u044F\u0434\u044B",
          waitingInit: "\u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438...",
          checkingColors: "\u{1F3A8} \u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0446\u0432\u0435\u0442\u043E\u0432...",
          noColorsFound: "\u274C \u0426\u0432\u0435\u0442\u0430 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u044B. \u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u043F\u0430\u043B\u0438\u0442\u0440\u0443 \u0446\u0432\u0435\u0442\u043E\u0432 \u043D\u0430 \u0441\u0430\u0439\u0442\u0435.",
          colorsFound: "\u2705 \u041D\u0430\u0439\u0434\u0435\u043D\u043E {count} \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0446\u0432\u0435\u0442\u043E\u0432",
          initSuccess: "\u2705 Guard-BOT \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u043D",
          initError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 Guard-BOT",
          invalidCoords: "\u274C \u041D\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\u044B",
          invalidArea: "\u274C \u041E\u0431\u043B\u0430\u0441\u0442\u044C \u0434\u043E\u043B\u0436\u043D\u0430 \u0438\u043C\u0435\u0442\u044C \u0432\u0435\u0440\u0445\u043D\u0438\u0439 \u043B\u0435\u0432\u044B\u0439 \u0443\u0433\u043E\u043B \u043C\u0435\u043D\u044C\u0448\u0435 \u043D\u0438\u0436\u043D\u0435\u0433\u043E \u043F\u0440\u0430\u0432\u043E\u0433\u043E \u0443\u0433\u043B\u0430",
          areaTooLarge: "\u274C \u041E\u0431\u043B\u0430\u0441\u0442\u044C \u0441\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u0430\u044F: {size} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 (\u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C: {max})",
          capturingArea: "\u{1F4F8} \u0417\u0430\u0445\u0432\u0430\u0442 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u0437\u0430\u0449\u0438\u0442\u044B...",
          areaCaptured: "\u2705 \u041E\u0431\u043B\u0430\u0441\u0442\u044C \u0437\u0430\u0445\u0432\u0430\u0447\u0435\u043D\u0430: {count} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u043F\u043E\u0434 \u0437\u0430\u0449\u0438\u0442\u043E\u0439",
          captureError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0445\u0432\u0430\u0442\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u0438: {error}",
          captureFirst: "\u274C \u0421\u043D\u0430\u0447\u0430\u043B\u0430 \u0437\u0430\u0445\u0432\u0430\u0442\u0438\u0442\u0435 \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u0437\u0430\u0449\u0438\u0442\u044B",
          protectionStarted: "\u{1F6E1}\uFE0F \u0417\u0430\u0449\u0438\u0442\u0430 \u0437\u0430\u043F\u0443\u0449\u0435\u043D\u0430 - \u043C\u043E\u043D\u0438\u0442\u043E\u0440\u0438\u043D\u0433 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          protectionStopped: "\u23F9\uFE0F \u0417\u0430\u0449\u0438\u0442\u0430 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0430",
          noChanges: "\u2705 \u0417\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C - \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u043D\u0435 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E",
          changesDetected: "\u{1F6A8} {count} \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E \u0432 \u0437\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u043E\u0439 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          repairing: "\u{1F6E0}\uFE0F \u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 {count} \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u043D\u044B\u0445 \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439...",
          repairedSuccess: "\u2705 \u0423\u0441\u043F\u0435\u0448\u043D\u043E \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043E {count} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439",
          repairError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439: {error}",
          noCharges: "\u26A0\uFE0F \u041D\u0435\u0434\u043E\u0441\u0442\u0430\u0442\u043E\u0447\u043D\u043E \u0437\u0430\u0440\u044F\u0434\u043E\u0432 \u0434\u043B\u044F \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439",
          checkingChanges: "\u{1F50D} \u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u0432 \u0437\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u043E\u0439 \u043E\u0431\u043B\u0430\u0441\u0442\u0438...",
          errorChecking: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439: {error}",
          guardActive: "\u{1F6E1}\uFE0F \u0421\u0442\u0440\u0430\u0436 \u0430\u043A\u0442\u0438\u0432\u0435\u043D - \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u043F\u043E\u0434 \u0437\u0430\u0449\u0438\u0442\u043E\u0439",
          lastCheck: "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u044F\u044F \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0430: {time}",
          nextCheck: "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0430\u044F \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0447\u0435\u0440\u0435\u0437: {time}\u0441",
          autoInitializing: "\u{1F916} \u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F...",
          autoInitSuccess: "\u2705 Guard-BOT \u0437\u0430\u043F\u0443\u0449\u0435\u043D \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438",
          autoInitFailed: "\u26A0\uFE0F \u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438. \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u043A\u043D\u043E\u043F\u043A\u0443 \u0440\u0443\u0447\u043D\u043E\u0433\u043E \u0437\u0430\u043F\u0443\u0441\u043A\u0430.",
          manualInitRequired: "\u{1F527} \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F \u0440\u0443\u0447\u043D\u0430\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F",
          paletteDetected: "\u{1F3A8} \u0426\u0432\u0435\u0442\u043E\u0432\u0430\u044F \u043F\u0430\u043B\u0438\u0442\u0440\u0430 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u0430",
          paletteNotFound: "\u{1F50D} \u041F\u043E\u0438\u0441\u043A \u0446\u0432\u0435\u0442\u043E\u0432\u043E\u0439 \u043F\u0430\u043B\u0438\u0442\u0440\u044B...",
          clickingPaintButton: "\u{1F446} \u041D\u0430\u0436\u0430\u0442\u0438\u0435 \u043A\u043D\u043E\u043F\u043A\u0438 \xABPaint\xBB...",
          paintButtonNotFound: "\u274C \u041A\u043D\u043E\u043F\u043A\u0430 \xABPaint\xBB \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u0430",
          selectUpperLeft: "\u{1F3AF} \u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432 \u0412\u0415\u0420\u0425\u041D\u0415\u041C \u041B\u0415\u0412\u041E\u041C \u0443\u0433\u043B\u0443 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u0434\u043B\u044F \u0437\u0430\u0449\u0438\u0442\u044B",
          selectLowerRight: "\u{1F3AF} \u0422\u0435\u043F\u0435\u0440\u044C \u043D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432 \u041D\u0418\u0416\u041D\u0415\u041C \u041F\u0420\u0410\u0412\u041E\u041C \u0443\u0433\u043B\u0443 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          waitingUpperLeft: "\u{1F446} \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0432\u044B\u0431\u043E\u0440\u0430 \u0432\u0435\u0440\u0445\u043D\u0435\u0433\u043E \u043B\u0435\u0432\u043E\u0433\u043E \u0443\u0433\u043B\u0430...",
          waitingLowerRight: "\u{1F446} \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0432\u044B\u0431\u043E\u0440\u0430 \u043D\u0438\u0436\u043D\u0435\u0433\u043E \u043F\u0440\u0430\u0432\u043E\u0433\u043E \u0443\u0433\u043B\u0430...",
          upperLeftCaptured: "\u2705 \u0412\u0435\u0440\u0445\u043D\u0438\u0439 \u043B\u0435\u0432\u044B\u0439 \u0443\u0433\u043E\u043B \u0437\u0430\u0445\u0432\u0430\u0447\u0435\u043D: ({x}, {y})",
          lowerRightCaptured: "\u2705 \u041D\u0438\u0436\u043D\u0438\u0439 \u043F\u0440\u0430\u0432\u044B\u0439 \u0443\u0433\u043E\u043B \u0437\u0430\u0445\u0432\u0430\u0447\u0435\u043D: ({x}, {y})",
          selectionTimeout: "\u274C \u0422\u0430\u0439\u043C-\u0430\u0443\u0442 \u0432\u044B\u0431\u043E\u0440\u0430",
          selectionError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u044B\u0431\u043E\u0440\u0430, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043D\u043E\u0432\u0430",
          logWindow: "Logs",
          logWindowTitle: "\u041B\u043E\u0433\u0438 - {botName}",
          downloadLogs: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u041B\u043E\u0433\u0438",
          clearLogs: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u041B\u043E\u0433\u0438",
          closeLogs: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C"
        }
      };
    }
  });

  // src/locales/zh-Hans.js
  var zhHans;
  var init_zh_Hans = __esm({
    "src/locales/zh-Hans.js"() {
      zhHans = {
        // 启动器
        launcher: {
          title: "WPlace \u81EA\u52A8\u673A\u5668\u4EBA",
          autoFarm: "\u{1F33E} \u81EA\u52A8\u519C\u573A",
          autoImage: "\u{1F3A8} \u81EA\u52A8\u7ED8\u56FE",
          autoGuard: "\u{1F6E1}\uFE0F \u81EA\u52A8\u5B88\u62A4",
          selection: "\u9009\u62E9",
          user: "\u7528\u6237",
          charges: "\u6B21\u6570",
          backend: "\u540E\u7AEF",
          database: "\u6570\u636E\u5E93",
          uptime: "\u8FD0\u884C\u65F6\u95F4",
          close: "\u5173\u95ED",
          launch: "\u542F\u52A8",
          loading: "\u52A0\u8F7D\u4E2D\u2026",
          executing: "\u6267\u884C\u4E2D\u2026",
          downloading: "\u6B63\u5728\u4E0B\u8F7D\u811A\u672C\u2026",
          chooseBot: "\u9009\u62E9\u4E00\u4E2A\u673A\u5668\u4EBA\u5E76\u70B9\u51FB\u542F\u52A8",
          readyToLaunch: "\u51C6\u5907\u542F\u52A8",
          loadError: "\u52A0\u8F7D\u9519\u8BEF",
          loadErrorMsg: "\u65E0\u6CD5\u52A0\u8F7D\u6240\u9009\u673A\u5668\u4EBA\u3002\u8BF7\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5\u6216\u91CD\u8BD5\u3002",
          checking: "\u{1F504} \u68C0\u67E5\u4E2D...",
          online: "\u{1F7E2} \u5728\u7EBF",
          offline: "\u{1F534} \u79BB\u7EBF",
          ok: "\u{1F7E2} \u6B63\u5E38",
          error: "\u{1F534} \u9519\u8BEF",
          unknown: "-",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u5FD7\u7A97\u53E3",
          downloadLogs: "\u4E0B\u8F7D\u65E5\u5FD7",
          clearLogs: "\u6E05\u9664\u65E5\u5FD7",
          closeLogs: "\u5173\u95ED"
        },
        // 绘图模块
        image: {
          title: "WPlace \u81EA\u52A8\u7ED8\u56FE",
          initBot: "\u521D\u59CB\u5316\u81EA\u52A8\u673A\u5668\u4EBA",
          uploadImage: "\u4E0A\u4F20\u56FE\u7247",
          resizeImage: "\u8C03\u6574\u56FE\u7247\u5927\u5C0F",
          selectPosition: "\u9009\u62E9\u4F4D\u7F6E",
          startPainting: "\u5F00\u59CB\u7ED8\u5236",
          stopPainting: "\u505C\u6B62\u7ED8\u5236",
          saveProgress: "\u4FDD\u5B58\u8FDB\u5EA6",
          loadProgress: "\u52A0\u8F7D\u8FDB\u5EA6",
          checkingColors: "\u{1F50D} \u68C0\u67E5\u53EF\u7528\u989C\u8272...",
          noColorsFound: "\u274C \u8BF7\u5728\u7F51\u7AD9\u4E0A\u6253\u5F00\u8C03\u8272\u677F\u540E\u91CD\u8BD5\uFF01",
          colorsFound: "\u2705 \u627E\u5230 {count} \u79CD\u53EF\u7528\u989C\u8272",
          loadingImage: "\u{1F5BC}\uFE0F \u6B63\u5728\u52A0\u8F7D\u56FE\u7247...",
          imageLoaded: "\u2705 \u56FE\u7247\u5DF2\u52A0\u8F7D\uFF0C\u6709\u6548\u50CF\u7D20 {count} \u4E2A",
          imageError: "\u274C \u56FE\u7247\u52A0\u8F7D\u5931\u8D25",
          selectPositionAlert: "\u8BF7\u5728\u4F60\u60F3\u5F00\u59CB\u7ED8\u5236\u7684\u5730\u65B9\u6D82\u7B2C\u4E00\u4E2A\u50CF\u7D20\uFF01",
          waitingPosition: "\u{1F446} \u7B49\u5F85\u4F60\u6D82\u53C2\u8003\u50CF\u7D20...",
          positionSet: "\u2705 \u4F4D\u7F6E\u8BBE\u7F6E\u6210\u529F\uFF01",
          positionTimeout: "\u274C \u4F4D\u7F6E\u9009\u62E9\u8D85\u65F6",
          positionDetected: "\u{1F3AF} \u5DF2\u68C0\u6D4B\u5230\u4F4D\u7F6E\uFF0C\u5904\u7406\u4E2D...",
          positionError: "\u274C \u4F4D\u7F6E\u68C0\u6D4B\u5931\u8D25\uFF0C\u8BF7\u91CD\u8BD5",
          startPaintingMsg: "\u{1F3A8} \u5F00\u59CB\u7ED8\u5236...",
          paintingProgress: "\u{1F9F1} \u8FDB\u5EA6: {painted}/{total} \u50CF\u7D20...",
          noCharges: "\u231B \u6CA1\u6709\u6B21\u6570\u3002\u7B49\u5F85 {time}...",
          paintingStopped: "\u23F9\uFE0F \u7528\u6237\u5DF2\u505C\u6B62\u7ED8\u5236",
          paintingComplete: "\u2705 \u7ED8\u5236\u5B8C\u6210\uFF01\u5171\u7ED8\u5236 {count} \u4E2A\u50CF\u7D20\u3002",
          paintingError: "\u274C \u7ED8\u5236\u8FC7\u7A0B\u4E2D\u51FA\u9519",
          missingRequirements: "\u274C \u8BF7\u5148\u52A0\u8F7D\u56FE\u7247\u5E76\u9009\u62E9\u4F4D\u7F6E",
          progress: "\u8FDB\u5EA6",
          userName: "\u7528\u6237",
          pixels: "\u50CF\u7D20",
          charges: "\u6B21\u6570",
          estimatedTime: "\u9884\u8BA1\u65F6\u95F4",
          initMessage: "\u70B9\u51FB\u201C\u521D\u59CB\u5316\u81EA\u52A8\u673A\u5668\u4EBA\u201D\u5F00\u59CB",
          waitingInit: "\u7B49\u5F85\u521D\u59CB\u5316...",
          resizeSuccess: "\u2705 \u56FE\u7247\u5DF2\u8C03\u6574\u4E3A {width}x{height}",
          paintingPaused: "\u23F8\uFE0F \u7ED8\u5236\u6682\u505C\u4E8E\u4F4D\u7F6E X: {x}, Y: {y}",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20\u6570",
          batchSize: "\u6279\u6B21\u5927\u5C0F",
          nextBatchTime: "\u4E0B\u6B21\u6279\u6B21\u65F6\u95F4",
          useAllCharges: "\u4F7F\u7528\u6240\u6709\u53EF\u7528\u6B21\u6570",
          showOverlay: "\u663E\u793A\u8986\u76D6\u5C42",
          maxCharges: "\u6BCF\u6279\u6700\u5927\u6B21\u6570",
          waitingForCharges: "\u23F3 \u7B49\u5F85\u6B21\u6570: {current}/{needed}",
          timeRemaining: "\u5269\u4F59\u65F6\u95F4",
          cooldownWaiting: "\u23F3 \u7B49\u5F85 {time} \u540E\u7EE7\u7EED...",
          progressSaved: "\u2705 \u8FDB\u5EA6\u5DF2\u4FDD\u5B58\u4E3A {filename}",
          progressLoaded: "\u2705 \u5DF2\u52A0\u8F7D\u8FDB\u5EA6: {painted}/{total} \u50CF\u7D20\u5DF2\u7ED8\u5236",
          progressLoadError: "\u274C \u52A0\u8F7D\u8FDB\u5EA6\u5931\u8D25: {error}",
          exportGuard: "\u5BFC\u51FA\u5230 Guard",
          progressSaveError: "\u274C \u4FDD\u5B58\u8FDB\u5EA6\u5931\u8D25: {error}",
          guardExportSuccess: "\u2705 \u5DF2\u5BFC\u51FA\u5230 Auto-Guard: {filename}",
          guardExportError: "\u274C \u5BFC\u51FA\u5230 Guard \u65F6\u51FA\u9519: {error}",
          confirmSaveProgress: "\u5728\u505C\u6B62\u4E4B\u524D\u8981\u4FDD\u5B58\u5F53\u524D\u8FDB\u5EA6\u5417\uFF1F",
          saveProgressTitle: "\u4FDD\u5B58\u8FDB\u5EA6",
          discardProgress: "\u653E\u5F03",
          cancel: "\u53D6\u6D88",
          minimize: "\u6700\u5C0F\u5316",
          width: "\u5BBD\u5EA6",
          height: "\u9AD8\u5EA6",
          keepAspect: "\u4FDD\u6301\u7EB5\u6A2A\u6BD4",
          apply: "\u5E94\u7528",
          overlayOn: "\u8986\u76D6\u5C42: \u5F00\u542F",
          overlayOff: "\u8986\u76D6\u5C42: \u5173\u95ED",
          passCompleted: "\u2705 \u6279\u6B21\u5B8C\u6210: \u5DF2\u7ED8\u5236 {painted} \u50CF\u7D20 | \u8FDB\u5EA6: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 \u7B49\u5F85\u6B21\u6570\u6062\u590D: {current}/{needed} - \u65F6\u95F4: {time}",
          waitingChargesCountdown: "\u23F3 \u7B49\u5F85\u6B21\u6570: {current}/{needed} - \u5269\u4F59: {time}",
          autoInitializing: "\u{1F916} \u6B63\u5728\u81EA\u52A8\u521D\u59CB\u5316...",
          autoInitSuccess: "\u2705 \u81EA\u52A8\u542F\u52A8\u6210\u529F",
          autoInitFailed: "\u26A0\uFE0F \u65E0\u6CD5\u81EA\u52A8\u542F\u52A8\uFF0C\u8BF7\u624B\u52A8\u64CD\u4F5C\u3002",
          paletteDetected: "\u{1F3A8} \u5DF2\u68C0\u6D4B\u5230\u8C03\u8272\u677F",
          paletteNotFound: "\u{1F50D} \u6B63\u5728\u641C\u7D22\u8C03\u8272\u677F...",
          clickingPaintButton: "\u{1F446} \u6B63\u5728\u70B9\u51FB\u7ED8\u5236\u6309\u94AE...",
          paintButtonNotFound: "\u274C \u672A\u627E\u5230\u7ED8\u5236\u6309\u94AE",
          manualInitRequired: "\u{1F527} \u9700\u8981\u624B\u52A8\u521D\u59CB\u5316",
          retryAttempt: "\u{1F504} \u91CD\u8BD5 {attempt}/{maxAttempts}\uFF0C\u7B49\u5F85 {delay} \u79D2...",
          retryError: "\u{1F4A5} \u7B2C {attempt}/{maxAttempts} \u6B21\u5C1D\u8BD5\u51FA\u9519\uFF0C\u5C06\u5728 {delay} \u79D2\u540E\u91CD\u8BD5...",
          retryFailed: "\u274C \u8D85\u8FC7 {maxAttempts} \u6B21\u5C1D\u8BD5\u5931\u8D25\u3002\u7EE7\u7EED\u4E0B\u4E00\u6279...",
          networkError: "\u{1F310} \u7F51\u7EDC\u9519\u8BEF\uFF0C\u6B63\u5728\u91CD\u8BD5...",
          serverError: "\u{1F525} \u670D\u52A1\u5668\u9519\u8BEF\uFF0C\u6B63\u5728\u91CD\u8BD5...",
          timeoutError: "\u23F0 \u670D\u52A1\u5668\u8D85\u65F6\uFF0C\u6B63\u5728\u91CD\u8BD5...",
          // v2.0 - 保护与绘制模式
          protectionEnabled: "\u5DF2\u5F00\u542F\u4FDD\u62A4",
          protectionDisabled: "\u5DF2\u5173\u95ED\u4FDD\u62A4",
          paintPattern: "\u7ED8\u5236\u6A21\u5F0F",
          patternLinearStart: "\u7EBF\u6027\uFF08\u8D77\u70B9\uFF09",
          patternLinearEnd: "\u7EBF\u6027\uFF08\u7EC8\u70B9\uFF09",
          patternRandom: "\u968F\u673A",
          patternCenterOut: "\u4ECE\u4E2D\u5FC3\u5411\u5916",
          patternCornersFirst: "\u5148\u89D2\u843D",
          patternSpiral: "\u87BA\u65CB",
          solid: "\u5B9E\u5FC3",
          stripes: "\u6761\u7EB9",
          checkerboard: "\u68CB\u76D8\u683C",
          gradient: "\u6E10\u53D8",
          dots: "\u70B9\u72B6",
          waves: "\u6CE2\u6D6A",
          spiral: "\u87BA\u65CB",
          mosaic: "\u9A6C\u8D5B\u514B",
          bricks: "\u7816\u5757",
          zigzag: "\u4E4B\u5B57\u5F62",
          protectingDrawing: "\u6B63\u5728\u4FDD\u62A4\u56FE\u7A3F...",
          changesDetected: "\u{1F6A8} \u68C0\u6D4B\u5230 {count} \u5904\u66F4\u6539",
          repairing: "\u{1F527} \u6B63\u5728\u4FEE\u590D {count} \u4E2A\u66F4\u6539\u7684\u50CF\u7D20...",
          repairCompleted: "\u2705 \u4FEE\u590D\u5B8C\u6210\uFF1A{count} \u4E2A\u50CF\u7D20",
          noChargesForRepair: "\u26A1 \u4FEE\u590D\u4E0D\u6D88\u8017\u70B9\u6570\uFF0C\u7B49\u5F85\u4E2D...",
          protectionPriority: "\u{1F6E1}\uFE0F \u5DF2\u542F\u7528\u4FDD\u62A4\u4F18\u5148",
          patternApplied: "\u5DF2\u5E94\u7528\u6A21\u5F0F",
          customPattern: "\u81EA\u5B9A\u4E49\u6A21\u5F0F",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u5FD7\u7A97\u53E3",
          downloadLogs: "\u4E0B\u8F7D\u65E5\u5FD7",
          clearLogs: "\u6E05\u9664\u65E5\u5FD7",
          closeLogs: "\u5173\u95ED"
        },
        // 农场模块（待实现）
        farm: {
          title: "WPlace \u519C\u573A\u673A\u5668\u4EBA",
          start: "\u5F00\u59CB",
          stop: "\u505C\u6B62",
          stopped: "\u673A\u5668\u4EBA\u5DF2\u505C\u6B62",
          calibrate: "\u6821\u51C6",
          paintOnce: "\u4E00\u6B21",
          checkingStatus: "\u68C0\u67E5\u72B6\u6001\u4E2D...",
          configuration: "\u914D\u7F6E",
          delay: "\u5EF6\u8FDF (\u6BEB\u79D2)",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20",
          minCharges: "\u6700\u5C11\u6B21\u6570",
          colorMode: "\u989C\u8272\u6A21\u5F0F",
          random: "\u968F\u673A",
          fixed: "\u56FA\u5B9A",
          range: "\u8303\u56F4",
          fixedColor: "\u56FA\u5B9A\u989C\u8272",
          advanced: "\u9AD8\u7EA7",
          tileX: "\u74E6\u7247 X",
          tileY: "\u74E6\u7247 Y",
          customPalette: "\u81EA\u5B9A\u4E49\u8C03\u8272\u677F",
          paletteExample: "\u4F8B\u5982: #FF0000,#00FF00,#0000FF",
          capture: "\u6355\u83B7",
          painted: "\u5DF2\u7ED8\u5236",
          charges: "\u6B21\u6570",
          retries: "\u91CD\u8BD5",
          tile: "\u74E6\u7247",
          configSaved: "\u914D\u7F6E\u5DF2\u4FDD\u5B58",
          configLoaded: "\u914D\u7F6E\u5DF2\u52A0\u8F7D",
          configReset: "\u914D\u7F6E\u5DF2\u91CD\u7F6E",
          captureInstructions: "\u8BF7\u624B\u52A8\u7ED8\u5236\u4E00\u4E2A\u50CF\u7D20\u4EE5\u6355\u83B7\u5750\u6807...",
          backendOnline: "\u540E\u7AEF\u5728\u7EBF",
          backendOffline: "\u540E\u7AEF\u79BB\u7EBF",
          startingBot: "\u6B63\u5728\u542F\u52A8\u673A\u5668\u4EBA...",
          stoppingBot: "\u6B63\u5728\u505C\u6B62\u673A\u5668\u4EBA...",
          calibrating: "\u6821\u51C6\u4E2D...",
          alreadyRunning: "\u81EA\u52A8\u519C\u573A\u5DF2\u5728\u8FD0\u884C\u3002",
          imageRunningWarning: "\u81EA\u52A8\u7ED8\u56FE\u6B63\u5728\u8FD0\u884C\uFF0C\u8BF7\u5148\u5173\u95ED\u518D\u542F\u52A8\u81EA\u52A8\u519C\u573A\u3002",
          selectPosition: "\u9009\u62E9\u533A\u57DF",
          selectPositionAlert: "\u{1F3AF} \u5728\u5730\u56FE\u7684\u7A7A\u767D\u533A\u57DF\u6D82\u4E00\u4E2A\u50CF\u7D20\u4EE5\u8BBE\u7F6E\u519C\u573A\u533A\u57DF",
          waitingPosition: "\u{1F446} \u7B49\u5F85\u4F60\u6D82\u53C2\u8003\u50CF\u7D20...",
          positionSet: "\u2705 \u533A\u57DF\u8BBE\u7F6E\u6210\u529F\uFF01\u534A\u5F84: 500px",
          positionTimeout: "\u274C \u533A\u57DF\u9009\u62E9\u8D85\u65F6",
          missingPosition: "\u274C \u8BF7\u5148\u9009\u62E9\u533A\u57DF\uFF08\u4F7F\u7528\u201C\u9009\u62E9\u533A\u57DF\u201D\u6309\u94AE\uFF09",
          farmRadius: "\u519C\u573A\u534A\u5F84",
          positionInfo: "\u5F53\u524D\u533A\u57DF",
          farmingInRadius: "\u{1F33E} \u6B63\u5728\u4EE5\u534A\u5F84 {radius}px \u5728 ({x},{y}) \u519C\u573A",
          selectEmptyArea: "\u26A0\uFE0F \u91CD\u8981: \u8BF7\u9009\u62E9\u7A7A\u767D\u533A\u57DF\u4EE5\u907F\u514D\u51B2\u7A81",
          noPosition: "\u672A\u9009\u62E9\u533A\u57DF",
          currentZone: "\u533A\u57DF: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} \u8BF7\u5148\u9009\u62E9\u533A\u57DF\uFF0C\u5728\u5730\u56FE\u4E0A\u6D82\u4E00\u4E2A\u50CF\u7D20\u4EE5\u8BBE\u7F6E\u519C\u573A\u533A\u57DF",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u5FD7\u7A97\u53E3",
          downloadLogs: "\u4E0B\u8F7D\u65E5\u5FD7",
          clearLogs: "\u6E05\u9664\u65E5\u5FD7",
          closeLogs: "\u5173\u95ED"
        },
        // 公共
        common: {
          yes: "\u662F",
          no: "\u5426",
          ok: "\u786E\u8BA4",
          cancel: "\u53D6\u6D88",
          close: "\u5173\u95ED",
          save: "\u4FDD\u5B58",
          load: "\u52A0\u8F7D",
          delete: "\u5220\u9664",
          edit: "\u7F16\u8F91",
          start: "\u5F00\u59CB",
          stop: "\u505C\u6B62",
          pause: "\u6682\u505C",
          resume: "\u7EE7\u7EED",
          reset: "\u91CD\u7F6E",
          settings: "\u8BBE\u7F6E",
          help: "\u5E2E\u52A9",
          about: "\u5173\u4E8E",
          language: "\u8BED\u8A00",
          loading: "\u52A0\u8F7D\u4E2D...",
          error: "\u9519\u8BEF",
          success: "\u6210\u529F",
          warning: "\u8B66\u544A",
          info: "\u4FE1\u606F",
          languageChanged: "\u8BED\u8A00\u5DF2\u5207\u6362\u4E3A {language}"
        },
        // 守护模块
        guard: {
          title: "WPlace \u81EA\u52A8\u5B88\u62A4",
          initBot: "\u521D\u59CB\u5316\u5B88\u62A4\u673A\u5668\u4EBA",
          selectArea: "\u9009\u62E9\u533A\u57DF",
          captureArea: "\u6355\u83B7\u533A\u57DF",
          startProtection: "\u5F00\u59CB\u5B88\u62A4",
          stopProtection: "\u505C\u6B62\u5B88\u62A4",
          upperLeft: "\u5DE6\u4E0A\u89D2",
          lowerRight: "\u53F3\u4E0B\u89D2",
          protectedPixels: "\u53D7\u4FDD\u62A4\u50CF\u7D20",
          detectedChanges: "\u68C0\u6D4B\u5230\u7684\u53D8\u5316",
          repairedPixels: "\u4FEE\u590D\u7684\u50CF\u7D20",
          charges: "\u6B21\u6570",
          waitingInit: "\u7B49\u5F85\u521D\u59CB\u5316...",
          checkingColors: "\u{1F3A8} \u68C0\u67E5\u53EF\u7528\u989C\u8272...",
          noColorsFound: "\u274C \u672A\u627E\u5230\u989C\u8272\uFF0C\u8BF7\u5728\u7F51\u7AD9\u4E0A\u6253\u5F00\u8C03\u8272\u677F\u3002",
          colorsFound: "\u2705 \u627E\u5230 {count} \u79CD\u53EF\u7528\u989C\u8272",
          initSuccess: "\u2705 \u5B88\u62A4\u673A\u5668\u4EBA\u521D\u59CB\u5316\u6210\u529F",
          initError: "\u274C \u5B88\u62A4\u673A\u5668\u4EBA\u521D\u59CB\u5316\u5931\u8D25",
          invalidCoords: "\u274C \u5750\u6807\u65E0\u6548",
          invalidArea: "\u274C \u533A\u57DF\u65E0\u6548\uFF0C\u5DE6\u4E0A\u89D2\u5FC5\u987B\u5C0F\u4E8E\u53F3\u4E0B\u89D2",
          areaTooLarge: "\u274C \u533A\u57DF\u8FC7\u5927: {size} \u50CF\u7D20 (\u6700\u5927: {max})",
          capturingArea: "\u{1F4F8} \u6355\u83B7\u5B88\u62A4\u533A\u57DF\u4E2D...",
          areaCaptured: "\u2705 \u533A\u57DF\u6355\u83B7\u6210\u529F: {count} \u50CF\u7D20\u53D7\u4FDD\u62A4",
          captureError: "\u274C \u6355\u83B7\u533A\u57DF\u51FA\u9519: {error}",
          captureFirst: "\u274C \u8BF7\u5148\u6355\u83B7\u4E00\u4E2A\u5B88\u62A4\u533A\u57DF",
          protectionStarted: "\u{1F6E1}\uFE0F \u5B88\u62A4\u5DF2\u542F\u52A8 - \u533A\u57DF\u76D1\u63A7\u4E2D",
          protectionStopped: "\u23F9\uFE0F \u5B88\u62A4\u5DF2\u505C\u6B62",
          noChanges: "\u2705 \u533A\u57DF\u5B89\u5168 - \u672A\u68C0\u6D4B\u5230\u53D8\u5316",
          changesDetected: "\u{1F6A8} \u68C0\u6D4B\u5230 {count} \u4E2A\u53D8\u5316",
          repairing: "\u{1F6E0}\uFE0F \u6B63\u5728\u4FEE\u590D {count} \u4E2A\u50CF\u7D20...",
          repairedSuccess: "\u2705 \u5DF2\u6210\u529F\u4FEE\u590D {count} \u4E2A\u50CF\u7D20",
          repairError: "\u274C \u4FEE\u590D\u51FA\u9519: {error}",
          noCharges: "\u26A0\uFE0F \u6B21\u6570\u4E0D\u8DB3\uFF0C\u65E0\u6CD5\u4FEE\u590D",
          checkingChanges: "\u{1F50D} \u6B63\u5728\u68C0\u67E5\u533A\u57DF\u53D8\u5316...",
          errorChecking: "\u274C \u68C0\u67E5\u51FA\u9519: {error}",
          guardActive: "\u{1F6E1}\uFE0F \u5B88\u62A4\u4E2D - \u533A\u57DF\u53D7\u4FDD\u62A4",
          lastCheck: "\u4E0A\u6B21\u68C0\u67E5: {time}",
          nextCheck: "\u4E0B\u6B21\u68C0\u67E5: {time} \u79D2\u540E",
          autoInitializing: "\u{1F916} \u6B63\u5728\u81EA\u52A8\u521D\u59CB\u5316...",
          autoInitSuccess: "\u2705 \u81EA\u52A8\u542F\u52A8\u6210\u529F",
          autoInitFailed: "\u26A0\uFE0F \u65E0\u6CD5\u81EA\u52A8\u542F\u52A8\uFF0C\u8BF7\u624B\u52A8\u64CD\u4F5C\u3002",
          manualInitRequired: "\u{1F527} \u9700\u8981\u624B\u52A8\u521D\u59CB\u5316",
          paletteDetected: "\u{1F3A8} \u5DF2\u68C0\u6D4B\u5230\u8C03\u8272\u677F",
          paletteNotFound: "\u{1F50D} \u6B63\u5728\u641C\u7D22\u8C03\u8272\u677F...",
          clickingPaintButton: "\u{1F446} \u6B63\u5728\u70B9\u51FB\u7ED8\u5236\u6309\u94AE...",
          paintButtonNotFound: "\u274C \u672A\u627E\u5230\u7ED8\u5236\u6309\u94AE",
          selectUpperLeft: "\u{1F3AF} \u5728\u9700\u8981\u4FDD\u62A4\u533A\u57DF\u7684\u5DE6\u4E0A\u89D2\u6D82\u4E00\u4E2A\u50CF\u7D20",
          selectLowerRight: "\u{1F3AF} \u73B0\u5728\u5728\u53F3\u4E0B\u89D2\u6D82\u4E00\u4E2A\u50CF\u7D20",
          waitingUpperLeft: "\u{1F446} \u7B49\u5F85\u9009\u62E9\u5DE6\u4E0A\u89D2...",
          waitingLowerRight: "\u{1F446} \u7B49\u5F85\u9009\u62E9\u53F3\u4E0B\u89D2...",
          upperLeftCaptured: "\u2705 \u5DF2\u6355\u83B7\u5DE6\u4E0A\u89D2: ({x}, {y})",
          lowerRightCaptured: "\u2705 \u5DF2\u6355\u83B7\u53F3\u4E0B\u89D2: ({x}, {y})",
          selectionTimeout: "\u274C \u9009\u62E9\u8D85\u65F6",
          selectionError: "\u274C \u9009\u62E9\u51FA\u9519\uFF0C\u8BF7\u91CD\u8BD5",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u5FD7\u7A97\u53E3",
          downloadLogs: "\u4E0B\u8F7D\u65E5\u5FD7",
          clearLogs: "\u6E05\u9664\u65E5\u5FD7",
          closeLogs: "\u5173\u95ED"
        }
      };
    }
  });

  // src/locales/zh-Hant.js
  var zhHant;
  var init_zh_Hant = __esm({
    "src/locales/zh-Hant.js"() {
      zhHant = {
        // 啓動器
        launcher: {
          title: "WPlace \u81EA\u52D5\u6A5F\u5668\u4EBA",
          autoFarm: "\u{1F33E} \u81EA\u52D5\u8FB2\u5834",
          autoImage: "\u{1F3A8} \u81EA\u52D5\u7E6A\u5716",
          autoGuard: "\u{1F6E1}\uFE0F \u81EA\u52D5\u5B88\u8B77",
          selection: "\u9078\u64C7",
          user: "\u7528\u6237",
          charges: "\u6B21\u6578",
          backend: "\u5F8C\u7AEF",
          database: "\u6578\u64DA\u5EAB",
          uptime: "\u904B\u884C\u6642\u9593",
          close: "\u95DC\u9589",
          launch: "\u5553\u52D5",
          loading: "\u52A0\u8F09\u4E2D\u2026",
          executing: "\u57F7\u884C\u4E2D\u2026",
          downloading: "\u6B63\u5728\u4E0B\u8F09\u8173\u672C\u2026",
          chooseBot: "\u9078\u64C7\u4E00\u500B\u6A5F\u5668\u4EBA\u4E26\u9EDE\u64CA\u5553\u52D5",
          readyToLaunch: "\u6E96\u5099\u5553\u52D5",
          loadError: "\u52A0\u8F09\u932F\u8AA4",
          loadErrorMsg: "\u7121\u6CD5\u52A0\u8F09\u6240\u9078\u6A5F\u5668\u4EBA\u3002\u8ACB\u6AA2\u67E5\u7DB2\u7D61\u9023\u63A5\u6216\u91CD\u8A66\u3002",
          checking: "\u{1F504} \u6AA2\u67E5\u4E2D...",
          online: "\u{1F7E2} \u5728\u7DDA",
          offline: "\u{1F534} \u96E2\u7DDA",
          ok: "\u{1F7E2} \u6B63\u5E38",
          error: "\u{1F534} \u932F\u8AA4",
          unknown: "-",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u8A8C\u8996\u7A97",
          downloadLogs: "\u4E0B\u8F09\u65E5\u8A8C",
          clearLogs: "\u6E05\u9664\u65E5\u8A8C",
          closeLogs: "\u95DC\u9589"
        },
        // 繪圖模塊
        image: {
          title: "WPlace \u81EA\u52D5\u7E6A\u5716",
          initBot: "\u521D\u59CB\u5316\u81EA\u52D5\u6A5F\u5668\u4EBA",
          uploadImage: "\u4E0A\u50B3\u5716\u7247",
          resizeImage: "\u8ABF\u6574\u5716\u7247\u5927\u5C0F",
          selectPosition: "\u9078\u64C7\u4F4D\u7F6E",
          startPainting: "\u958B\u59CB\u7E6A\u88FD",
          stopPainting: "\u505C\u6B62\u7E6A\u88FD",
          saveProgress: "\u4FDD\u5B58\u9032\u5EA6",
          loadProgress: "\u52A0\u8F09\u9032\u5EA6",
          checkingColors: "\u{1F50D} \u6AA2\u67E5\u53EF\u7528\u984F\u8272...",
          noColorsFound: "\u274C \u8ACB\u5728\u7DB2\u7AD9\u4E0A\u6253\u958B\u8ABF\u8272\u677F\u5F8C\u91CD\u8A66\uFF01",
          colorsFound: "\u2705 \u627E\u5230 {count} \u7A2E\u53EF\u7528\u984F\u8272",
          loadingImage: "\u{1F5BC}\uFE0F \u6B63\u5728\u52A0\u8F09\u5716\u7247...",
          imageLoaded: "\u2705 \u5716\u7247\u5DF2\u52A0\u8F09\uFF0C\u6709\u6548\u50CF\u7D20 {count} \u500B",
          imageError: "\u274C \u5716\u7247\u52A0\u8F09\u5931\u6557",
          selectPositionAlert: "\u8ACB\u5728\u4F60\u60F3\u958B\u59CB\u7E6A\u88FD\u7684\u5730\u65B9\u5857\u7B2C\u4E00\u500B\u50CF\u7D20\uFF01",
          waitingPosition: "\u{1F446} \u7B49\u5F85\u4F60\u5857\u53C3\u8003\u50CF\u7D20...",
          positionSet: "\u2705 \u4F4D\u7F6E\u8A2D\u7F6E\u6210\u529F\uFF01",
          positionTimeout: "\u274C \u4F4D\u7F6E\u9078\u64C7\u8D85\u6642",
          positionDetected: "\u{1F3AF} \u5DF2\u6AA2\u6E2C\u5230\u4F4D\u7F6E\uFF0C\u8655\u7406\u4E2D...",
          positionError: "\u274C \u4F4D\u7F6E\u6AA2\u6E2C\u5931\u6557\uFF0C\u8ACB\u91CD\u8A66",
          startPaintingMsg: "\u{1F3A8} \u958B\u59CB\u7E6A\u88FD...",
          paintingProgress: "\u{1F9F1} \u9032\u5EA6: {painted}/{total} \u50CF\u7D20...",
          noCharges: "\u231B \u6C92\u6709\u6B21\u6578\u3002\u7B49\u5F85 {time}...",
          paintingStopped: "\u23F9\uFE0F \u7528\u6237\u5DF2\u505C\u6B62\u7E6A\u88FD",
          paintingComplete: "\u2705 \u7E6A\u88FD\u5B8C\u6210\uFF01\u5171\u7E6A\u88FD {count} \u500B\u50CF\u7D20\u3002",
          paintingError: "\u274C \u7E6A\u88FD\u904E\u7A0B\u4E2D\u51FA\u932F",
          missingRequirements: "\u274C \u8ACB\u5148\u52A0\u8F09\u5716\u7247\u4E26\u9078\u64C7\u4F4D\u7F6E",
          progress: "\u9032\u5EA6",
          userName: "\u7528\u6237",
          pixels: "\u50CF\u7D20",
          charges: "\u6B21\u6578",
          estimatedTime: "\u9810\u8A08\u6642\u9593",
          initMessage: "\u9EDE\u64CA\u201C\u521D\u59CB\u5316\u81EA\u52D5\u6A5F\u5668\u4EBA\u201D\u958B\u59CB",
          waitingInit: "\u7B49\u5F85\u521D\u59CB\u5316...",
          resizeSuccess: "\u2705 \u5716\u7247\u5DF2\u8ABF\u6574\u70BA {width}x{height}",
          paintingPaused: "\u23F8\uFE0F \u7E6A\u88FD\u66AB\u505C\u65BC\u4F4D\u7F6E X: {x}, Y: {y}",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20\u6578",
          batchSize: "\u6279\u6B21\u5927\u5C0F",
          nextBatchTime: "\u4E0B\u6B21\u6279\u6B21\u6642\u9593",
          useAllCharges: "\u4F7F\u7528\u6240\u6709\u53EF\u7528\u6B21\u6578",
          showOverlay: "\u986F\u793A\u8986\u84CB\u5C64",
          maxCharges: "\u6BCF\u6279\u6700\u5927\u6B21\u6578",
          waitingForCharges: "\u23F3 \u7B49\u5F85\u6B21\u6578: {current}/{needed}",
          timeRemaining: "\u5269\u9918\u6642\u9593",
          cooldownWaiting: "\u23F3 \u7B49\u5F85 {time} \u5F8C\u7E7C\u7E8C...",
          progressSaved: "\u2705 \u9032\u5EA6\u5DF2\u4FDD\u5B58\u70BA {filename}",
          progressLoaded: "\u2705 \u5DF2\u52A0\u8F09\u9032\u5EA6: {painted}/{total} \u50CF\u7D20\u5DF2\u7E6A\u88FD",
          progressLoadError: "\u274C \u52A0\u8F09\u9032\u5EA6\u5931\u6557: {error}",
          exportGuard: "\u532F\u51FA\u5230 Guard",
          progressSaveError: "\u274C \u4FDD\u5B58\u9032\u5EA6\u5931\u6557: {error}",
          guardExportSuccess: "\u2705 \u5DF2\u532F\u51FA\u5230 Auto-Guard: {filename}",
          guardExportError: "\u274C \u532F\u51FA\u5230 Guard \u6642\u51FA\u932F: {error}",
          confirmSaveProgress: "\u5728\u505C\u6B62\u4E4B\u524D\u8981\u4FDD\u5B58\u7576\u524D\u9032\u5EA6\u55CE\uFF1F",
          saveProgressTitle: "\u4FDD\u5B58\u9032\u5EA6",
          discardProgress: "\u653E\u68C4",
          cancel: "\u53D6\u6D88",
          minimize: "\u6700\u5C0F\u5316",
          width: "\u5BEC\u5EA6",
          height: "\u9AD8\u5EA6",
          keepAspect: "\u4FDD\u6301\u7E31\u6A6B\u6BD4",
          apply: "\u61C9\u7528",
          overlayOn: "\u8986\u84CB\u5C64: \u958B\u5553",
          overlayOff: "\u8986\u84CB\u5C64: \u95DC\u9589",
          passCompleted: "\u2705 \u6279\u6B21\u5B8C\u6210: \u5DF2\u7E6A\u88FD {painted} \u50CF\u7D20 | \u9032\u5EA6: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 \u7B49\u5F85\u6B21\u6578\u6062\u5FA9: {current}/{needed} - \u6642\u9593: {time}",
          waitingChargesCountdown: "\u23F3 \u7B49\u5F85\u6B21\u6578: {current}/{needed} - \u5269\u9918: {time}",
          autoInitializing: "\u{1F916} \u6B63\u5728\u81EA\u52D5\u521D\u59CB\u5316...",
          autoInitSuccess: "\u2705 \u81EA\u52D5\u5553\u52D5\u6210\u529F",
          autoInitFailed: "\u26A0\uFE0F \u7121\u6CD5\u81EA\u52D5\u5553\u52D5\uFF0C\u8ACB\u624B\u52D5\u64CD\u4F5C\u3002",
          paletteDetected: "\u{1F3A8} \u5DF2\u6AA2\u6E2C\u5230\u8ABF\u8272\u677F",
          paletteNotFound: "\u{1F50D} \u6B63\u5728\u641C\u7D22\u8ABF\u8272\u677F...",
          clickingPaintButton: "\u{1F446} \u6B63\u5728\u9EDE\u64CA\u7E6A\u88FD\u6309\u9215...",
          paintButtonNotFound: "\u274C \u672A\u627E\u5230\u7E6A\u88FD\u6309\u9215",
          manualInitRequired: "\u{1F527} \u9700\u8981\u624B\u52D5\u521D\u59CB\u5316",
          retryAttempt: "\u{1F504} \u91CD\u8A66 {attempt}/{maxAttempts}\uFF0C\u7B49\u5F85 {delay} \u79D2...",
          retryError: "\u{1F4A5} \u7B2C {attempt}/{maxAttempts} \u6B21\u5617\u8A66\u51FA\u932F\uFF0C\u5C07\u5728 {delay} \u79D2\u5F8C\u91CD\u8A66...",
          retryFailed: "\u274C \u8D85\u904E {maxAttempts} \u6B21\u5617\u8A66\u5931\u6557\u3002\u7E7C\u7E8C\u4E0B\u4E00\u6279...",
          networkError: "\u{1F310} \u7DB2\u7D61\u932F\u8AA4\uFF0C\u6B63\u5728\u91CD\u8A66...",
          serverError: "\u{1F525} \u670D\u52D9\u5668\u932F\u8AA4\uFF0C\u6B63\u5728\u91CD\u8A66...",
          timeoutError: "\u23F0 \u4F3A\u670D\u5668\u903E\u6642\uFF0C\u6B63\u5728\u91CD\u8A66...",
          // v2.0 - 保護與繪製模式
          protectionEnabled: "\u5DF2\u555F\u7528\u4FDD\u8B77",
          protectionDisabled: "\u5DF2\u505C\u7528\u4FDD\u8B77",
          paintPattern: "\u7E6A\u88FD\u6A21\u5F0F",
          patternLinearStart: "\u7DDA\u6027\uFF08\u8D77\u9EDE\uFF09",
          patternLinearEnd: "\u7DDA\u6027\uFF08\u7D42\u9EDE\uFF09",
          patternRandom: "\u96A8\u6A5F",
          patternCenterOut: "\u7531\u4E2D\u5FC3\u5411\u5916",
          patternCornersFirst: "\u5148\u89D2\u843D",
          patternSpiral: "\u87BA\u65CB",
          solid: "\u5BE6\u5FC3",
          stripes: "\u689D\u7D0B",
          checkerboard: "\u68CB\u76E4\u683C",
          gradient: "\u6F38\u5C64",
          dots: "\u9EDE\u72C0",
          waves: "\u6CE2\u6D6A",
          spiral: "\u87BA\u65CB",
          mosaic: "\u99AC\u8CFD\u514B",
          bricks: "\u78DA\u584A",
          zigzag: "\u4E4B\u5B57\u5F62",
          protectingDrawing: "\u6B63\u5728\u4FDD\u8B77\u7E6A\u5716...",
          changesDetected: "\u{1F6A8} \u5075\u6E2C\u5230 {count} \u8655\u8B8A\u66F4",
          repairing: "\u{1F527} \u6B63\u5728\u4FEE\u5FA9 {count} \u500B\u8B8A\u66F4\u7684\u50CF\u7D20...",
          repairCompleted: "\u2705 \u4FEE\u5FA9\u5B8C\u6210\uFF1A{count} \u500B\u50CF\u7D20",
          noChargesForRepair: "\u26A1 \u4FEE\u5FA9\u4E0D\u6D88\u8017\u9EDE\u6578\uFF0C\u7B49\u5F85\u4E2D...",
          protectionPriority: "\u{1F6E1}\uFE0F \u5DF2\u555F\u7528\u4FDD\u8B77\u512A\u5148",
          patternApplied: "\u5DF2\u5957\u7528\u6A21\u5F0F",
          customPattern: "\u81EA\u8A02\u6A21\u5F0F",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u8A8C\u8996\u7A97",
          downloadLogs: "\u4E0B\u8F09\u65E5\u8A8C",
          clearLogs: "\u6E05\u9664\u65E5\u8A8C",
          closeLogs: "\u95DC\u9589"
        },
        // 農場模塊（待實現）
        farm: {
          title: "WPlace \u8FB2\u5834\u6A5F\u5668\u4EBA",
          start: "\u958B\u59CB",
          stop: "\u505C\u6B62",
          stopped: "\u6A5F\u5668\u4EBA\u5DF2\u505C\u6B62",
          calibrate: "\u6821\u6E96",
          paintOnce: "\u4E00\u6B21",
          checkingStatus: "\u6AA2\u67E5\u72C0\u614B\u4E2D...",
          configuration: "\u914D\u7F6E",
          delay: "\u5EF6\u9072 (\u6BEB\u79D2)",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20",
          minCharges: "\u6700\u5C11\u6B21\u6578",
          colorMode: "\u984F\u8272\u6A21\u5F0F",
          random: "\u96A8\u6A5F",
          fixed: "\u56FA\u5B9A",
          range: "\u7BC4\u570D",
          fixedColor: "\u56FA\u5B9A\u984F\u8272",
          advanced: "\u9AD8\u7D1A",
          tileX: "\u74E6\u7247 X",
          tileY: "\u74E6\u7247 Y",
          customPalette: "\u81EA\u5B9A\u7FA9\u8ABF\u8272\u677F",
          paletteExample: "\u4F8B\u5982: #FF0000,#00FF00,#0000FF",
          capture: "\u6355\u7372",
          painted: "\u5DF2\u7E6A\u88FD",
          charges: "\u6B21\u6578",
          retries: "\u91CD\u8A66",
          tile: "\u74E6\u7247",
          configSaved: "\u914D\u7F6E\u5DF2\u4FDD\u5B58",
          configLoaded: "\u914D\u7F6E\u5DF2\u52A0\u8F09",
          configReset: "\u914D\u7F6E\u5DF2\u91CD\u7F6E",
          captureInstructions: "\u8ACB\u624B\u52D5\u7E6A\u88FD\u4E00\u500B\u50CF\u7D20\u4EE5\u6355\u7372\u5EA7\u6A19...",
          backendOnline: "\u5F8C\u7AEF\u5728\u7DDA",
          backendOffline: "\u5F8C\u7AEF\u96E2\u7DDA",
          startingBot: "\u6B63\u5728\u5553\u52D5\u6A5F\u5668\u4EBA...",
          stoppingBot: "\u6B63\u5728\u505C\u6B62\u6A5F\u5668\u4EBA...",
          calibrating: "\u6821\u6E96\u4E2D...",
          alreadyRunning: "\u81EA\u52D5\u8FB2\u5834\u5DF2\u5728\u904B\u884C\u3002",
          imageRunningWarning: "\u81EA\u52D5\u7E6A\u5716\u6B63\u5728\u904B\u884C\uFF0C\u8ACB\u5148\u95DC\u9589\u518D\u5553\u52D5\u81EA\u52D5\u8FB2\u5834\u3002",
          selectPosition: "\u9078\u64C7\u5340\u57DF",
          selectPositionAlert: "\u{1F3AF} \u5728\u5730\u5716\u7684\u7A7A\u767D\u5340\u57DF\u5857\u4E00\u500B\u50CF\u7D20\u4EE5\u8A2D\u7F6E\u8FB2\u5834\u5340\u57DF",
          waitingPosition: "\u{1F446} \u7B49\u5F85\u4F60\u5857\u53C3\u8003\u50CF\u7D20...",
          positionSet: "\u2705 \u5340\u57DF\u8A2D\u7F6E\u6210\u529F\uFF01\u534A\u5F91: 500px",
          positionTimeout: "\u274C \u5340\u57DF\u9078\u64C7\u8D85\u6642",
          missingPosition: "\u274C \u8ACB\u5148\u9078\u64C7\u5340\u57DF\uFF08\u4F7F\u7528\u201C\u9078\u64C7\u5340\u57DF\u201D\u6309\u9215\uFF09",
          farmRadius: "\u8FB2\u5834\u534A\u5F91",
          positionInfo: "\u7576\u524D\u5340\u57DF",
          farmingInRadius: "\u{1F33E} \u6B63\u5728\u4EE5\u534A\u5F91 {radius}px \u5728 ({x},{y}) \u8FB2\u5834",
          selectEmptyArea: "\u26A0\uFE0F \u91CD\u8981: \u8ACB\u9078\u64C7\u7A7A\u767D\u5340\u57DF\u4EE5\u907F\u514D\u885D\u7A81",
          noPosition: "\u672A\u9078\u64C7\u5340\u57DF",
          currentZone: "\u5340\u57DF: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} \u8ACB\u5148\u9078\u64C7\u5340\u57DF\uFF0C\u5728\u5730\u5716\u4E0A\u5857\u4E00\u500B\u50CF\u7D20\u4EE5\u8A2D\u7F6E\u8FB2\u5834\u5340\u57DF",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u8A8C\u8996\u7A97",
          downloadLogs: "\u4E0B\u8F09\u65E5\u8A8C",
          clearLogs: "\u6E05\u9664\u65E5\u8A8C",
          closeLogs: "\u95DC\u9589"
        },
        // 公共
        common: {
          yes: "\u662F",
          no: "\u5426",
          ok: "\u78BA\u8A8D",
          cancel: "\u53D6\u6D88",
          close: "\u95DC\u9589",
          save: "\u4FDD\u5B58",
          load: "\u52A0\u8F09",
          delete: "\u522A\u9664",
          edit: "\u7DE8\u8F2F",
          start: "\u958B\u59CB",
          stop: "\u505C\u6B62",
          pause: "\u66AB\u505C",
          resume: "\u7E7C\u7E8C",
          reset: "\u91CD\u7F6E",
          settings: "\u8A2D\u7F6E",
          help: "\u5E6B\u52A9",
          about: "\u95DC\u65BC",
          language: "\u8A9E\u8A00",
          loading: "\u52A0\u8F09\u4E2D...",
          error: "\u932F\u8AA4",
          success: "\u6210\u529F",
          warning: "\u8B66\u544A",
          info: "\u4FE1\u606F",
          languageChanged: "\u8A9E\u8A00\u5DF2\u5207\u63DB\u70BA {language}"
        },
        // 守護模塊
        guard: {
          title: "WPlace \u81EA\u52D5\u5B88\u8B77",
          initBot: "\u521D\u59CB\u5316\u5B88\u8B77\u6A5F\u5668\u4EBA",
          selectArea: "\u9078\u64C7\u5340\u57DF",
          captureArea: "\u6355\u7372\u5340\u57DF",
          startProtection: "\u958B\u59CB\u5B88\u8B77",
          stopProtection: "\u505C\u6B62\u5B88\u8B77",
          upperLeft: "\u5DE6\u4E0A\u89D2",
          lowerRight: "\u53F3\u4E0B\u89D2",
          protectedPixels: "\u53D7\u4FDD\u8B77\u50CF\u7D20",
          detectedChanges: "\u6AA2\u6E2C\u5230\u7684\u8B8A\u5316",
          repairedPixels: "\u4FEE\u5FA9\u7684\u50CF\u7D20",
          charges: "\u6B21\u6578",
          waitingInit: "\u7B49\u5F85\u521D\u59CB\u5316...",
          checkingColors: "\u{1F3A8} \u6AA2\u67E5\u53EF\u7528\u984F\u8272...",
          noColorsFound: "\u274C \u672A\u627E\u5230\u984F\u8272\uFF0C\u8ACB\u5728\u7DB2\u7AD9\u4E0A\u6253\u958B\u8ABF\u8272\u677F\u3002",
          colorsFound: "\u2705 \u627E\u5230 {count} \u7A2E\u53EF\u7528\u984F\u8272",
          initSuccess: "\u2705 \u5B88\u8B77\u6A5F\u5668\u4EBA\u521D\u59CB\u5316\u6210\u529F",
          initError: "\u274C \u5B88\u8B77\u6A5F\u5668\u4EBA\u521D\u59CB\u5316\u5931\u6557",
          invalidCoords: "\u274C \u5EA7\u6A19\u7121\u6548",
          invalidArea: "\u274C \u5340\u57DF\u7121\u6548\uFF0C\u5DE6\u4E0A\u89D2\u5FC5\u9808\u5C0F\u65BC\u53F3\u4E0B\u89D2",
          areaTooLarge: "\u274C \u5340\u57DF\u904E\u5927: {size} \u50CF\u7D20 (\u6700\u5927: {max})",
          capturingArea: "\u{1F4F8} \u6355\u7372\u5B88\u8B77\u5340\u57DF\u4E2D...",
          areaCaptured: "\u2705 \u5340\u57DF\u6355\u7372\u6210\u529F: {count} \u50CF\u7D20\u53D7\u4FDD\u8B77",
          captureError: "\u274C \u6355\u7372\u5340\u57DF\u51FA\u932F: {error}",
          captureFirst: "\u274C \u8ACB\u5148\u6355\u7372\u4E00\u500B\u5B88\u8B77\u5340\u57DF",
          protectionStarted: "\u{1F6E1}\uFE0F \u5B88\u8B77\u5DF2\u5553\u52D5 - \u5340\u57DF\u76E3\u63A7\u4E2D",
          protectionStopped: "\u23F9\uFE0F \u5B88\u8B77\u5DF2\u505C\u6B62",
          noChanges: "\u2705 \u5340\u57DF\u5B89\u5168 - \u672A\u6AA2\u6E2C\u5230\u8B8A\u5316",
          changesDetected: "\u{1F6A8} \u6AA2\u6E2C\u5230 {count} \u500B\u8B8A\u5316",
          repairing: "\u{1F6E0}\uFE0F \u6B63\u5728\u4FEE\u5FA9 {count} \u500B\u50CF\u7D20...",
          repairedSuccess: "\u2705 \u5DF2\u6210\u529F\u4FEE\u5FA9 {count} \u500B\u50CF\u7D20",
          repairError: "\u274C \u4FEE\u5FA9\u51FA\u932F: {error}",
          noCharges: "\u26A0\uFE0F \u6B21\u6578\u4E0D\u8DB3\uFF0C\u7121\u6CD5\u4FEE\u5FA9",
          checkingChanges: "\u{1F50D} \u6B63\u5728\u6AA2\u67E5\u5340\u57DF\u8B8A\u5316...",
          errorChecking: "\u274C \u6AA2\u67E5\u51FA\u932F: {error}",
          guardActive: "\u{1F6E1}\uFE0F \u5B88\u8B77\u4E2D - \u5340\u57DF\u53D7\u4FDD\u8B77",
          lastCheck: "\u4E0A\u6B21\u6AA2\u67E5: {time}",
          nextCheck: "\u4E0B\u6B21\u6AA2\u67E5: {time} \u79D2\u5F8C",
          autoInitializing: "\u{1F916} \u6B63\u5728\u81EA\u52D5\u521D\u59CB\u5316...",
          autoInitSuccess: "\u2705 \u81EA\u52D5\u5553\u52D5\u6210\u529F",
          autoInitFailed: "\u26A0\uFE0F \u7121\u6CD5\u81EA\u52D5\u5553\u52D5\uFF0C\u8ACB\u624B\u52D5\u64CD\u4F5C\u3002",
          manualInitRequired: "\u{1F527} \u9700\u8981\u624B\u52D5\u521D\u59CB\u5316",
          paletteDetected: "\u{1F3A8} \u5DF2\u6AA2\u6E2C\u5230\u8ABF\u8272\u677F",
          paletteNotFound: "\u{1F50D} \u6B63\u5728\u641C\u7D22\u8ABF\u8272\u677F...",
          clickingPaintButton: "\u{1F446} \u6B63\u5728\u9EDE\u64CA\u7E6A\u88FD\u6309\u9215...",
          paintButtonNotFound: "\u274C \u672A\u627E\u5230\u7E6A\u88FD\u6309\u9215",
          selectUpperLeft: "\u{1F3AF} \u5728\u9700\u8981\u4FDD\u8B77\u5340\u57DF\u7684\u5DE6\u4E0A\u89D2\u5857\u4E00\u500B\u50CF\u7D20",
          selectLowerRight: "\u{1F3AF} \u73FE\u5728\u5728\u53F3\u4E0B\u89D2\u5857\u4E00\u500B\u50CF\u7D20",
          waitingUpperLeft: "\u{1F446} \u7B49\u5F85\u9078\u64C7\u5DE6\u4E0A\u89D2...",
          waitingLowerRight: "\u{1F446} \u7B49\u5F85\u9078\u64C7\u53F3\u4E0B\u89D2...",
          upperLeftCaptured: "\u2705 \u5DF2\u6355\u7372\u5DE6\u4E0A\u89D2: ({x}, {y})",
          lowerRightCaptured: "\u2705 \u5DF2\u6355\u7372\u53F3\u4E0B\u89D2: ({x}, {y})",
          selectionTimeout: "\u274C \u9078\u64C7\u8D85\u6642",
          selectionError: "\u274C \u9078\u64C7\u51FA\u932F\uFF0C\u8ACB\u91CD\u8A66",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u8A8C\u8996\u7A97",
          downloadLogs: "\u4E0B\u8F09\u65E5\u8A8C",
          clearLogs: "\u6E05\u9664\u65E5\u8A8C",
          closeLogs: "\u95DC\u9589"
        }
      };
    }
  });

  // src/locales/index.js
  function detectBrowserLanguage() {
    const browserLang = window.navigator.language || window.navigator.userLanguage || "es";
    const langCode = browserLang.split("-")[0].toLowerCase();
    if (translations[langCode]) {
      return langCode;
    }
    return "es";
  }
  function getSavedLanguage() {
    return null;
  }
  function saveLanguage(langCode) {
    return;
  }
  function initializeLanguage() {
    const savedLang = getSavedLanguage();
    const browserLang = detectBrowserLanguage();
    let selectedLang = "es";
    if (savedLang && translations[savedLang]) {
      selectedLang = savedLang;
    } else if (browserLang && translations[browserLang]) {
      selectedLang = browserLang;
    }
    setLanguage(selectedLang);
    return selectedLang;
  }
  function setLanguage(langCode) {
    if (!translations[langCode]) {
      console.warn(`Idioma '${langCode}' no disponible. Usando '${currentLanguage}'`);
      return;
    }
    currentLanguage = langCode;
    currentTranslations = translations[langCode];
    saveLanguage(langCode);
    if (typeof window !== "undefined" && window.CustomEvent) {
      window.dispatchEvent(new window.CustomEvent("languageChanged", {
        detail: { language: langCode, translations: currentTranslations }
      }));
    }
  }
  function getCurrentLanguage() {
    return currentLanguage;
  }
  function t(key, params = {}) {
    const keys = key.split(".");
    let value = currentTranslations;
    for (const k of keys) {
      if (value && typeof value === "object" && k in value) {
        value = value[k];
      } else {
        console.warn(`Clave de traducci\xF3n no encontrada: '${key}'`);
        return key;
      }
    }
    if (typeof value !== "string") {
      console.warn(`Clave de traducci\xF3n no es string: '${key}'`);
      return key;
    }
    return interpolate(value, params);
  }
  function interpolate(text, params) {
    if (!params || Object.keys(params).length === 0) {
      return text;
    }
    return text.replace(/\{(\w+)\}/g, (match, key) => {
      return params[key] !== void 0 ? params[key] : match;
    });
  }
  function getSection(section) {
    if (currentTranslations[section]) {
      return currentTranslations[section];
    }
    console.warn(`Secci\xF3n de traducci\xF3n no encontrada: '${section}'`);
    return {};
  }
  var translations, currentLanguage, currentTranslations;
  var init_locales = __esm({
    "src/locales/index.js"() {
      init_es();
      init_en();
      init_fr();
      init_ru();
      init_zh_Hans();
      init_zh_Hant();
      translations = {
        es,
        en,
        fr,
        ru,
        zhHans,
        zhHant
      };
      currentLanguage = "es";
      currentTranslations = translations[currentLanguage];
      initializeLanguage();
    }
  });

  // src/image/config.js
  var IMAGE_DEFAULTS, imageState;
  var init_config = __esm({
    "src/image/config.js"() {
      init_locales();
      IMAGE_DEFAULTS = {
        SITEKEY: "0x4AAAAAABpqJe8FO0N84q0F",
        COOLDOWN_DEFAULT: 31e3,
        TRANSPARENCY_THRESHOLD: 100,
        WHITE_THRESHOLD: 250,
        LOG_INTERVAL: 10,
        TILE_SIZE: 3e3,
        PIXELS_PER_BATCH: 20,
        CHARGE_REGEN_MS: 3e4,
        THEME: {
          primary: "#000000",
          secondary: "#111111",
          accent: "#222222",
          text: "#ffffff",
          highlight: "#775ce3",
          success: "#00ff00",
          error: "#ff0000",
          warning: "#ffaa00"
        }
      };
      imageState = {
        running: false,
        imageLoaded: false,
        processing: false,
        totalPixels: 0,
        paintedPixels: 0,
        availableColors: [],
        currentCharges: 0,
        cooldown: IMAGE_DEFAULTS.COOLDOWN_DEFAULT,
        imageData: null,
        stopFlag: false,
        colorsChecked: false,
        startPosition: null,
        selectingPosition: false,
        positionTimeoutId: null,
        // Para manejar timeout de selección
        cleanupObserver: null,
        // Para limpiar observers
        region: null,
        minimized: false,
        lastPosition: { x: 0, y: 0 },
        estimatedTime: 0,
        language: "es",
        tileX: null,
        tileY: null,
        pixelsPerBatch: IMAGE_DEFAULTS.PIXELS_PER_BATCH,
        useAllChargesFirst: true,
        // Usar todas las cargas en la primera pasada
        isFirstBatch: true,
        // Controlar si es la primera pasada
        maxCharges: 9999,
        // Cargas máximas del usuario
        nextBatchCooldown: 0,
        // Tiempo para el siguiente lote
        inCooldown: false,
        cooldownEndTime: 0,
        remainingPixels: [],
        lastChargeUpdate: 0,
        chargeDecimalPart: 0,
        originalImageName: null,
        retryCount: 0,
        // Contador de reintentos para estadísticas
        // Nuevas opciones para protección y patrones
        protectionEnabled: true,
        // Habilitar protección del dibujo
        smartVerification: true,
        // Verificación inteligente de píxeles (omitir píxeles ya correctos)
        paintPattern: "linear_start",
        // Patrón de pintado predeterminado
        drawnPixelsMap: /* @__PURE__ */ new Map(),
        // Mapa de píxeles ya dibujados para protección
        lastProtectionCheck: 0
        // Timestamp de última verificación de protección
      };
    }
  });

  // src/image/patterns.js
  var patterns_exports = {};
  __export(patterns_exports, {
    PAINT_PATTERNS: () => PAINT_PATTERNS,
    applyPaintPattern: () => applyPaintPattern,
    getPatternName: () => getPatternName,
    sortPixelsByPattern: () => sortPixelsByPattern
  });
  function getPatternName(pattern) {
    const names = {
      [PAINT_PATTERNS.LINEAR_START]: "Lineal (Inicio)",
      [PAINT_PATTERNS.LINEAR_END]: "Lineal (Final)",
      [PAINT_PATTERNS.RANDOM]: "Aleatorio",
      [PAINT_PATTERNS.CENTER_OUT]: "Centro hacia afuera",
      [PAINT_PATTERNS.CORNERS_FIRST]: "Esquinas primero",
      [PAINT_PATTERNS.SPIRAL]: "Espiral"
    };
    return names[pattern] || pattern;
  }
  function sortPixelsByPattern(pixels, pattern, imageWidth, imageHeight) {
    if (!pixels || pixels.length === 0) {
      return pixels;
    }
    log(`\u{1F3A8} Aplicando patr\xF3n de pintado: ${getPatternName(pattern)} (${pixels.length} p\xEDxeles)`);
    const sortedPixels = [...pixels];
    switch (pattern) {
      case PAINT_PATTERNS.LINEAR_START:
        return sortLinearStart(sortedPixels);
      case PAINT_PATTERNS.LINEAR_END:
        return sortLinearEnd(sortedPixels);
      case PAINT_PATTERNS.RANDOM:
        return sortRandom(sortedPixels);
      case PAINT_PATTERNS.CENTER_OUT:
        return sortCenterOut(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.CORNERS_FIRST:
        return sortCornersFirst(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.SPIRAL:
        return sortSpiral(sortedPixels, imageWidth, imageHeight);
      default:
        log(`\u26A0\uFE0F Patr\xF3n desconocido: ${pattern}, usando linear_start`);
        return sortLinearStart(sortedPixels);
    }
  }
  function sortLinearStart(pixels) {
    return pixels.sort((a, b) => {
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      if (aY !== bY) return aY - bY;
      return aX - bX;
    });
  }
  function sortLinearEnd(pixels) {
    return pixels.sort((a, b) => {
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      if (aY !== bY) return bY - aY;
      return bX - aX;
    });
  }
  function sortRandom(pixels) {
    for (let i = pixels.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [pixels[i], pixels[j]] = [pixels[j], pixels[i]];
    }
    return pixels;
  }
  function sortCenterOut(pixels, imageWidth, imageHeight) {
    const centerX = imageWidth / 2;
    const centerY = imageHeight / 2;
    return pixels.sort((a, b) => {
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const distA = Math.sqrt(Math.pow(aX - centerX, 2) + Math.pow(aY - centerY, 2));
      const distB = Math.sqrt(Math.pow(bX - centerX, 2) + Math.pow(bY - centerY, 2));
      return distA - distB;
    });
  }
  function sortCornersFirst(pixels, imageWidth, imageHeight) {
    const corners = [
      { x: 0, y: 0 },
      // Superior izquierda
      { x: imageWidth - 1, y: 0 },
      // Superior derecha
      { x: 0, y: imageHeight - 1 },
      // Inferior izquierda
      { x: imageWidth - 1, y: imageHeight - 1 }
      // Inferior derecha
    ];
    return pixels.sort((a, b) => {
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const minDistA = Math.min(...corners.map(
        (corner) => Math.sqrt(Math.pow(aX - corner.x, 2) + Math.pow(aY - corner.y, 2))
      ));
      const minDistB = Math.min(...corners.map(
        (corner) => Math.sqrt(Math.pow(bX - corner.x, 2) + Math.pow(bY - corner.y, 2))
      ));
      return minDistA - minDistB;
    });
  }
  function sortSpiral(pixels, imageWidth, imageHeight) {
    const coordinateMap = /* @__PURE__ */ new Map();
    let spiralIndex = 0;
    let left = 0, right = imageWidth - 1;
    let top = 0, bottom = imageHeight - 1;
    while (left <= right && top <= bottom) {
      for (let x = left; x <= right; x++) {
        coordinateMap.set(`${x},${top}`, spiralIndex++);
      }
      top++;
      for (let y = top; y <= bottom; y++) {
        coordinateMap.set(`${right},${y}`, spiralIndex++);
      }
      right--;
      if (top <= bottom) {
        for (let x = right; x >= left; x--) {
          coordinateMap.set(`${x},${bottom}`, spiralIndex++);
        }
        bottom--;
      }
      if (left <= right) {
        for (let y = bottom; y >= top; y--) {
          coordinateMap.set(`${left},${y}`, spiralIndex++);
        }
        left++;
      }
    }
    return pixels.sort((a, b) => {
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const indexA = coordinateMap.get(`${aX},${aY}`) || Number.MAX_SAFE_INTEGER;
      const indexB = coordinateMap.get(`${bX},${bY}`) || Number.MAX_SAFE_INTEGER;
      return indexA - indexB;
    });
  }
  function applyPaintPattern(remainingPixels, pattern, imageData) {
    if (!remainingPixels || remainingPixels.length === 0) {
      return remainingPixels;
    }
    const imageWidth = (imageData == null ? void 0 : imageData.width) || 100;
    const imageHeight = (imageData == null ? void 0 : imageData.height) || 100;
    const sortedPixels = sortPixelsByPattern(remainingPixels, pattern, imageWidth, imageHeight);
    log(`\u2705 Patr\xF3n aplicado: ${getPatternName(pattern)} a ${sortedPixels.length} p\xEDxeles`);
    return sortedPixels;
  }
  var PAINT_PATTERNS;
  var init_patterns = __esm({
    "src/image/patterns.js"() {
      init_logger();
      PAINT_PATTERNS = {
        LINEAR_START: "linear_start",
        LINEAR_END: "linear_end",
        RANDOM: "random",
        CENTER_OUT: "center_out",
        CORNERS_FIRST: "corners_first",
        SPIRAL: "spiral"
      };
    }
  });

  // src/image/save-load.js
  var save_load_exports = {};
  __export(save_load_exports, {
    clearProgress: () => clearProgress,
    exportForGuard: () => exportForGuard,
    getProgressInfo: () => getProgressInfo,
    hasProgress: () => hasProgress,
    loadProgress: () => loadProgress,
    saveProgress: () => saveProgress
  });
  function getFullPixelData() {
    if (!imageState.imageData) {
      return null;
    }
    if (imageState.imageData.processor && typeof imageState.imageData.processor.generatePixelQueue === "function") {
      return imageState.imageData.processor.generatePixelQueue();
    }
    if (imageState.imageData.pixels) {
      return imageState.imageData.pixels;
    }
    return null;
  }
  function exportForGuard(filename = null) {
    try {
      if (!imageState.imageData || imageState.drawnPixelsMap.size === 0) {
        throw new Error("No hay p\xEDxeles dibujados para exportar a Guard");
      }
      const drawnPixels = Array.from(imageState.drawnPixelsMap.values());
      let minX = Number.MAX_SAFE_INTEGER, maxX = Number.MIN_SAFE_INTEGER;
      let minY = Number.MAX_SAFE_INTEGER, maxY = Number.MIN_SAFE_INTEGER;
      for (const pixel of drawnPixels) {
        const globalX = pixel.tileX * 1e3 + pixel.localX;
        const globalY = pixel.tileY * 1e3 + pixel.localY;
        minX = Math.min(minX, globalX);
        maxX = Math.max(maxX, globalX);
        minY = Math.min(minY, globalY);
        maxY = Math.max(maxY, globalY);
      }
      const guardData = {
        version: "2.0-guard",
        timestamp: Date.now(),
        source: "Auto-Image",
        originalProject: {
          name: imageState.originalImageName,
          totalPixels: imageState.totalPixels,
          paintedPixels: imageState.paintedPixels
        },
        protectionArea: {
          x1: minX,
          y1: minY,
          x2: maxX + 1,
          // +1 para área inclusiva
          y2: maxY + 1,
          width: maxX - minX + 1,
          height: maxY - minY + 1,
          pixelCount: drawnPixels.length
        },
        // Mapa de píxeles original en formato Guard
        originalPixels: drawnPixels.map((pixel) => {
          const globalX = pixel.tileX * 1e3 + pixel.localX;
          const globalY = pixel.tileY * 1e3 + pixel.localY;
          return {
            key: `${globalX},${globalY}`,
            globalX,
            globalY,
            localX: pixel.localX,
            localY: pixel.localY,
            tileX: pixel.tileX,
            tileY: pixel.tileY,
            colorId: pixel.color.id,
            r: pixel.color.r || 255,
            g: pixel.color.g || 255,
            b: pixel.color.b || 255,
            paintedAt: pixel.paintedAt || Date.now()
          };
        }),
        // Colores disponibles
        colors: imageState.availableColors.map((color) => ({
          id: color.id,
          r: color.r,
          g: color.g,
          b: color.b
        })),
        guardConfig: {
          pixelsPerBatch: 10,
          // Configuración por defecto de Guard
          minChargesToWait: 20,
          checkInterval: 1e4
        }
      };
      const dataStr = JSON.stringify(guardData, null, 2);
      const blob = new window.Blob([dataStr], { type: "application/json" });
      const finalFilename = filename || `wplace_guard_${imageState.originalImageName || "drawing"}_${(/* @__PURE__ */ new Date()).toISOString().slice(0, 19).replace(/:/g, "-")}.json`;
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = finalFilename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      log(`\u2705 Datos exportados para Auto-Guard: ${finalFilename}`);
      log(`\u{1F4CA} \xC1rea de protecci\xF3n: (${minX},${minY}) a (${maxX},${maxY}) - ${drawnPixels.length} p\xEDxeles`);
      return { success: true, filename: finalFilename, pixelCount: drawnPixels.length };
    } catch (error) {
      log("\u274C Error exportando para Guard:", error);
      return { success: false, error: error.message };
    }
  }
  function saveProgress(filename = null) {
    try {
      if (!imageState.imageData || imageState.paintedPixels === 0) {
        throw new Error("No hay progreso para guardar");
      }
      const progressData = {
        version: "2.0",
        // Versión actualizada para compatibilidad
        timestamp: Date.now(),
        imageData: {
          width: imageState.imageData.width,
          height: imageState.imageData.height,
          originalName: imageState.originalImageName,
          // Guardar todos los píxeles del proyecto completo para protección
          fullPixelData: getFullPixelData()
        },
        progress: {
          paintedPixels: imageState.paintedPixels,
          totalPixels: imageState.totalPixels,
          lastPosition: { ...imageState.lastPosition }
        },
        position: {
          startPosition: { ...imageState.startPosition },
          tileX: imageState.tileX,
          tileY: imageState.tileY
        },
        config: {
          pixelsPerBatch: imageState.pixelsPerBatch,
          useAllChargesFirst: imageState.useAllChargesFirst,
          isFirstBatch: imageState.isFirstBatch,
          maxCharges: imageState.maxCharges,
          // Nuevas configuraciones v2.0
          protectionEnabled: imageState.protectionEnabled,
          paintPattern: imageState.paintPattern
        },
        // Filtrar solo los datos serializables de los colores (sin elementos DOM)
        colors: imageState.availableColors.map((color) => ({
          id: color.id,
          r: color.r,
          g: color.g,
          b: color.b
        })),
        remainingPixels: imageState.remainingPixels || [],
        // Nueva información v2.0 para protección
        drawnPixels: Array.from(imageState.drawnPixelsMap.values()),
        protection: {
          enabled: imageState.protectionEnabled,
          lastCheck: imageState.lastProtectionCheck
        }
      };
      const dataStr = JSON.stringify(progressData, null, 2);
      const blob = new window.Blob([dataStr], { type: "application/json" });
      const finalFilename = filename || `wplace_progress_${imageState.originalImageName || "image"}_${(/* @__PURE__ */ new Date()).toISOString().slice(0, 19).replace(/:/g, "-")}.json`;
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = finalFilename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      log(`\u2705 Progreso guardado: ${finalFilename}`);
      return { success: true, filename: finalFilename };
    } catch (error) {
      log("\u274C Error guardando progreso:", error);
      return { success: false, error: error.message };
    }
  }
  async function loadProgress(file) {
    return new Promise((resolve) => {
      try {
        const reader = new window.FileReader();
        reader.onload = (e) => {
          try {
            const progressData = JSON.parse(e.target.result);
            const requiredFields = ["imageData", "progress", "position", "colors"];
            const missingFields = requiredFields.filter((field) => !(field in progressData));
            if (missingFields.length > 0) {
              throw new Error(`Campos requeridos faltantes: ${missingFields.join(", ")}`);
            }
            const fileVersion = progressData.version || "1.0";
            log(`\u{1F4C1} Cargando progreso versi\xF3n ${fileVersion}`);
            if (imageState.availableColors.length > 0) {
              const savedColorIds = progressData.colors.map((c) => c.id);
              const currentColorIds = imageState.availableColors.map((c) => c.id);
              const commonColors = savedColorIds.filter((id) => currentColorIds.includes(id));
              if (commonColors.length < savedColorIds.length * 0.8) {
                log("\u26A0\uFE0F Los colores guardados no coinciden completamente con los actuales");
              }
            }
            imageState.imageData = {
              ...progressData.imageData,
              pixels: []
              // Los píxeles se regenerarán si es necesario
            };
            imageState.paintedPixels = progressData.progress.paintedPixels;
            imageState.totalPixels = progressData.progress.totalPixels;
            if (progressData.progress.lastPosition) {
              imageState.lastPosition = progressData.progress.lastPosition;
            } else if (progressData.position.lastX !== void 0 && progressData.position.lastY !== void 0) {
              imageState.lastPosition = { x: progressData.position.lastX, y: progressData.position.lastY };
            }
            if (progressData.position.startPosition) {
              imageState.startPosition = progressData.position.startPosition;
            } else if (progressData.position.startX !== void 0 && progressData.position.startY !== void 0) {
              imageState.startPosition = { x: progressData.position.startX, y: progressData.position.startY };
            }
            imageState.tileX = progressData.position.tileX;
            imageState.tileY = progressData.position.tileY;
            imageState.originalImageName = progressData.imageData.originalName;
            imageState.remainingPixels = progressData.remainingPixels || progressData.progress.remainingPixels || [];
            if (progressData.config) {
              imageState.pixelsPerBatch = progressData.config.pixelsPerBatch || imageState.pixelsPerBatch;
              imageState.useAllChargesFirst = progressData.config.useAllChargesFirst !== void 0 ? progressData.config.useAllChargesFirst : imageState.useAllChargesFirst;
              imageState.isFirstBatch = imageState.useAllChargesFirst ? true : progressData.config.isFirstBatch !== void 0 ? progressData.config.isFirstBatch : false;
              log(`\u{1F4C1} Progreso cargado - useAllChargesFirst: ${imageState.useAllChargesFirst}, isFirstBatch: ${imageState.isFirstBatch}`);
              imageState.maxCharges = progressData.config.maxCharges || imageState.maxCharges;
              if (fileVersion >= "2.0") {
                imageState.protectionEnabled = progressData.config.protectionEnabled !== void 0 ? progressData.config.protectionEnabled : true;
                imageState.paintPattern = progressData.config.paintPattern || "linear_start";
              }
            }
            if (fileVersion >= "2.0" && progressData.drawnPixels) {
              imageState.drawnPixelsMap.clear();
              for (const pixel of progressData.drawnPixels) {
                const key = `${pixel.imageX},${pixel.imageY}`;
                imageState.drawnPixelsMap.set(key, pixel);
              }
              log(`\u2705 Cargados ${progressData.drawnPixels.length} p\xEDxeles dibujados para protecci\xF3n`);
              if (progressData.protection) {
                imageState.protectionEnabled = progressData.protection.enabled !== void 0 ? progressData.protection.enabled : true;
                imageState.lastProtectionCheck = progressData.protection.lastCheck || 0;
              }
            } else {
              imageState.drawnPixelsMap.clear();
              log("\u{1F4C1} Archivo v1.0 detectado, protecci\xF3n se activar\xE1 al continuar pintado");
            }
            if (imageState.paintPattern && imageState.paintPattern !== "linear_start" && imageState.remainingPixels.length > 0) {
              try {
                Promise.resolve().then(() => (init_patterns(), patterns_exports)).then(({ applyPaintPattern: applyPaintPattern2 }) => {
                  imageState.remainingPixels = applyPaintPattern2(
                    imageState.remainingPixels,
                    imageState.paintPattern,
                    imageState.imageData
                  );
                  log(`\u{1F3A8} Patr\xF3n de pintado aplicado: ${imageState.paintPattern}`);
                }).catch((patternError) => {
                  log("\u26A0\uFE0F Error aplicando patr\xF3n de pintado:", patternError);
                });
              } catch (patternError) {
                log("\u26A0\uFE0F Error cargando m\xF3dulo de patrones:", patternError);
              }
            }
            try {
              if (window.__WPA_PLAN_OVERLAY__) {
                window.__WPA_PLAN_OVERLAY__.injectStyles();
                window.__WPA_PLAN_OVERLAY__.setEnabled(true);
                if (imageState.startPosition && imageState.tileX !== void 0 && imageState.tileY !== void 0) {
                  window.__WPA_PLAN_OVERLAY__.setAnchor({
                    tileX: imageState.tileX,
                    tileY: imageState.tileY,
                    pxX: imageState.startPosition.x,
                    pxY: imageState.startPosition.y
                  });
                  log(`\u2705 Plan overlay anclado con posici\xF3n cargada: tile(${imageState.tileX},${imageState.tileY}) local(${imageState.startPosition.x},${imageState.startPosition.y})`);
                }
                window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
                  enabled: true,
                  nextBatchCount: imageState.pixelsPerBatch
                });
                log(`\u2705 Plan overlay activado con ${imageState.remainingPixels.length} p\xEDxeles restantes`);
              }
            } catch (e2) {
              log("\u26A0\uFE0F Error activando plan overlay al cargar progreso:", e2);
            }
            imageState.imageLoaded = true;
            imageState.colorsChecked = true;
            log(`\u2705 Progreso cargado (v${fileVersion}): ${imageState.paintedPixels}/${imageState.totalPixels} p\xEDxeles`);
            if (fileVersion >= "2.0") {
              log(`\u{1F6E1}\uFE0F Protecci\xF3n: ${imageState.protectionEnabled ? "habilitada" : "deshabilitada"}, Patr\xF3n: ${imageState.paintPattern}`);
            }
            resolve({
              success: true,
              data: progressData,
              painted: imageState.paintedPixels,
              total: imageState.totalPixels,
              canContinue: imageState.remainingPixels.length > 0,
              version: fileVersion
            });
          } catch (parseError) {
            log("\u274C Error parseando archivo de progreso:", parseError);
            resolve({ success: false, error: parseError.message });
          }
        };
        reader.onerror = () => {
          const error = "Error leyendo archivo";
          log("\u274C", error);
          resolve({ success: false, error });
        };
        reader.readAsText(file);
      } catch (error) {
        log("\u274C Error cargando progreso:", error);
        resolve({ success: false, error: error.message });
      }
    });
  }
  function clearProgress() {
    imageState.paintedPixels = 0;
    imageState.totalPixels = 0;
    imageState.lastPosition = { x: 0, y: 0 };
    imageState.remainingPixels = [];
    imageState.imageData = null;
    imageState.startPosition = null;
    imageState.imageLoaded = false;
    imageState.originalImageName = null;
    imageState.isFirstBatch = true;
    imageState.nextBatchCooldown = 0;
    imageState.drawnPixelsMap.clear();
    imageState.lastProtectionCheck = 0;
    log("\u{1F9F9} Progreso limpiado");
  }
  function hasProgress() {
    return imageState.imageLoaded && imageState.paintedPixels > 0 && imageState.remainingPixels && imageState.remainingPixels.length > 0;
  }
  function getProgressInfo() {
    return {
      hasProgress: hasProgress(),
      painted: imageState.paintedPixels,
      total: imageState.totalPixels,
      remaining: imageState.remainingPixels ? imageState.remainingPixels.length : 0,
      percentage: imageState.totalPixels > 0 ? imageState.paintedPixels / imageState.totalPixels * 100 : 0,
      lastPosition: { ...imageState.lastPosition },
      canContinue: hasProgress()
    };
  }
  var init_save_load = __esm({
    "src/image/save-load.js"() {
      init_logger();
      init_config();
    }
  });

  // src/image/index.js
  init_logger();
  init_config();

  // src/image/blue-marble-processor.js
  init_logger();

  // src/image/color-utils.js
  init_logger();
  var ColorUtils = class _ColorUtils {
    /**
     * Convierte RGB a espacio de color LAB
     * @param {number} r - Componente rojo (0-255)
     * @param {number} g - Componente verde (0-255)
     * @param {number} b - Componente azul (0-255)
     * @returns {Array} [L, a, b] valores en espacio LAB
     */
    static _rgbToLab(r, g, b) {
      const srgbToLinear = (v) => {
        v /= 255;
        return v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
      };
      const rl = srgbToLinear(r);
      const gl = srgbToLinear(g);
      const bl = srgbToLinear(b);
      let X = rl * 0.4124 + gl * 0.3576 + bl * 0.1805;
      let Y = rl * 0.2126 + gl * 0.7152 + bl * 0.0722;
      let Z = rl * 0.0193 + gl * 0.1192 + bl * 0.9505;
      X /= 0.95047;
      Y /= 1;
      Z /= 1.08883;
      const f = (t2) => t2 > 8856e-6 ? Math.cbrt(t2) : 7.787 * t2 + 16 / 116;
      const fX = f(X), fY = f(Y), fZ = f(Z);
      const L = 116 * fY - 16;
      const a = 500 * (fX - fY);
      const b2 = 200 * (fY - fZ);
      return [L, a, b2];
    }
    /**
     * Obtiene valores LAB con caché para mejor rendimiento
     * @param {number} r - Componente rojo (0-255)
     * @param {number} g - Componente verde (0-255)
     * @param {number} b - Componente azul (0-255)
     * @returns {Array} [L, a, b] valores en espacio LAB
     */
    static _lab(r, g, b) {
      if (!_ColorUtils._labCache) {
        _ColorUtils._labCache = /* @__PURE__ */ new Map();
      }
      const key = r << 16 | g << 8 | b;
      let v = _ColorUtils._labCache.get(key);
      if (!v) {
        v = _ColorUtils._rgbToLab(r, g, b);
        _ColorUtils._labCache.set(key, v);
      }
      return v;
    }
    /**
     * Encuentra el color más cercano en la paleta usando algoritmo LAB avanzado
     * @param {number} r - Componente rojo del color objetivo (0-255)
     * @param {number} g - Componente verde del color objetivo (0-255)
     * @param {number} b - Componente azul del color objetivo (0-255)
     * @param {Array} palette - Array de colores disponibles
     * @param {Object} options - Opciones adicionales
     * @returns {Object|null} Color más cercano de la paleta
     */
    static findClosestPaletteColor(r, g, b, palette, options = {}) {
      var _a, _b, _c, _d, _e, _f;
      if (!palette || palette.length === 0) return null;
      const {
        useLegacyRgb = false,
        chromaPenalty = 0,
        whiteThreshold = 240
      } = options;
      if (r >= whiteThreshold && g >= whiteThreshold && b >= whiteThreshold) {
        const whiteColor = palette.find((color) => {
          var _a2, _b2, _c2;
          const cr = color.r || ((_a2 = color.rgb) == null ? void 0 : _a2.r) || 0;
          const cg = color.g || ((_b2 = color.rgb) == null ? void 0 : _b2.g) || 0;
          const cb = color.b || ((_c2 = color.rgb) == null ? void 0 : _c2.b) || 0;
          return cr >= whiteThreshold && cg >= whiteThreshold && cb >= whiteThreshold;
        });
        if (whiteColor) return whiteColor;
      }
      let closestColor = null;
      let minDistance = Infinity;
      if (useLegacyRgb) {
        for (const color of palette) {
          const cr = color.r || ((_a = color.rgb) == null ? void 0 : _a.r) || 0;
          const cg = color.g || ((_b = color.rgb) == null ? void 0 : _b.g) || 0;
          const cb = color.b || ((_c = color.rgb) == null ? void 0 : _c.b) || 0;
          const distance = Math.sqrt(
            Math.pow(r - cr, 2) + Math.pow(g - cg, 2) + Math.pow(b - cb, 2)
          );
          if (distance < minDistance) {
            minDistance = distance;
            closestColor = color;
          }
        }
      } else {
        const targetLab = _ColorUtils._lab(r, g, b);
        for (const color of palette) {
          const cr = color.r || ((_d = color.rgb) == null ? void 0 : _d.r) || 0;
          const cg = color.g || ((_e = color.rgb) == null ? void 0 : _e.g) || 0;
          const cb = color.b || ((_f = color.rgb) == null ? void 0 : _f.b) || 0;
          const colorLab = _ColorUtils._lab(cr, cg, cb);
          let distance = Math.sqrt(
            Math.pow(targetLab[0] - colorLab[0], 2) + Math.pow(targetLab[1] - colorLab[1], 2) + Math.pow(targetLab[2] - colorLab[2], 2)
          );
          if (chromaPenalty > 0) {
            const targetChroma = Math.sqrt(targetLab[1] * targetLab[1] + targetLab[2] * targetLab[2]);
            const colorChroma = Math.sqrt(colorLab[1] * colorLab[1] + colorLab[2] * colorLab[2]);
            const chromaDiff = Math.abs(targetChroma - colorChroma);
            distance += chromaDiff * chromaPenalty;
          }
          if (distance < minDistance) {
            minDistance = distance;
            closestColor = color;
          }
        }
      }
      return closestColor;
    }
    /**
     * Función de compatibilidad con la interfaz existente
     * @param {Object} rgb - Objeto con propiedades r, g, b
     * @param {Array} palette - Array de colores disponibles
     * @param {Object} options - Opciones adicionales
     * @returns {Object|null} Color más cercano de la paleta
     */
    static findClosestColor(rgb, palette, options = {}) {
      return _ColorUtils.findClosestPaletteColor(rgb.r, rgb.g, rgb.b, palette, options);
    }
    /**
     * Limpia la caché LAB (útil para liberar memoria)
     */
    static clearCache() {
      if (_ColorUtils._labCache) {
        _ColorUtils._labCache.clear();
        log("Cach\xE9 de colores LAB limpiada");
      }
    }
    /**
     * Obtiene estadísticas de la caché
     * @returns {Object} Estadísticas de uso de caché
     */
    static getCacheStats() {
      if (!_ColorUtils._labCache) {
        return { size: 0, memoryEstimate: 0 };
      }
      return {
        size: _ColorUtils._labCache.size,
        memoryEstimate: _ColorUtils._labCache.size * 32
        // Estimación aproximada en bytes
      };
    }
  };
  var findClosestColor = ColorUtils.findClosestColor.bind(ColorUtils);
  var findClosestPaletteColor = ColorUtils.findClosestPaletteColor.bind(ColorUtils);

  // src/image/processor.js
  init_logger();
  function detectAvailableColors() {
    log("\u{1F3A8} Detectando colores disponibles...");
    const colorElements = document.querySelectorAll('[id^="color-"]');
    const colors = [];
    for (const element of colorElements) {
      if (element.querySelector("svg")) {
        continue;
      }
      const idStr = element.id.replace("color-", "");
      const id = parseInt(idStr);
      if (id === 0) {
        continue;
      }
      const backgroundStyle = element.style.backgroundColor;
      if (backgroundStyle) {
        const rgbMatch = backgroundStyle.match(/\d+/g);
        if (rgbMatch && rgbMatch.length >= 3) {
          const rgb = {
            r: parseInt(rgbMatch[0]),
            g: parseInt(rgbMatch[1]),
            b: parseInt(rgbMatch[2])
          };
          colors.push({
            id,
            element,
            ...rgb
          });
          log(`Color detectado: id=${id}, rgb(${rgb.r},${rgb.g},${rgb.b})`);
        }
      }
    }
    log(`\u2705 ${colors.length} colores disponibles detectados`);
    return colors;
  }

  // src/image/blue-marble-processor.js
  var BlueMarblelImageProcessor = class {
    constructor(imageSrc) {
      this.imageSrc = imageSrc;
      this.img = new window.Image();
      this.originalName = null;
      this.tileSize = 1e3;
      this.drawMult = 3;
      this.shreadSize = 3;
      this.bitmap = null;
      this.imageWidth = 0;
      this.imageHeight = 0;
      this.totalPixels = 0;
      this.requiredPixelCount = 0;
      this.defacePixelCount = 0;
      this.colorPalette = {};
      this.allowedColorsSet = /* @__PURE__ */ new Set();
      this.rgbToMeta = /* @__PURE__ */ new Map();
      this.coords = [0, 0, 0, 0];
      this.templateTiles = {};
      this.templateTilesBuffers = {};
      this.tilePrefixes = /* @__PURE__ */ new Set();
      this.selectedColors = null;
      this.allSiteColors = [];
      this.initialAllowedColorsSet = null;
      this.allowedColors = [];
    }
    async load() {
      return new Promise((resolve, reject) => {
        this.img.onload = async () => {
          try {
            this.bitmap = await createImageBitmap(this.img);
            this.imageWidth = this.bitmap.width;
            this.imageHeight = this.bitmap.height;
            this.totalPixels = this.imageWidth * this.imageHeight;
            log(`[BLUE MARBLE] Imagen cargada: ${this.imageWidth}\xD7${this.imageHeight}`);
            resolve();
          } catch (error) {
            reject(error);
          }
        };
        this.img.onerror = reject;
        this.img.src = this.imageSrc;
      });
    }
    /**
     * Inicializa la paleta de colores desde WPlace (como Blue Marble)
     */
    initializeColorPalette() {
      log("[BLUE MARBLE] Inicializando paleta de colores...");
      const availableColors = detectAvailableColors();
      const filteredColors = availableColors.filter((c) => c.id !== void 0 && typeof c.r === "number" && typeof c.g === "number" && typeof c.b === "number");
      this.allowedColorsSet = new Set(
        filteredColors.map((c) => `${c.r},${c.g},${c.b}`)
      );
      const defaceKey = "222,250,206";
      this.allowedColorsSet.add(defaceKey);
      this.rgbToMeta = new Map(
        filteredColors.map((c) => [
          `${c.r},${c.g},${c.b}`,
          {
            id: c.id,
            premium: !!c.premium,
            name: c.name || `Color ${c.id}`
          }
        ])
      );
      this.rgbToMeta.set(defaceKey, {
        id: 0,
        premium: false,
        name: "Transparent"
      });
      this.allSiteColors = filteredColors.map((c) => ({ r: c.r, g: c.g, b: c.b, id: c.id, name: c.name, premium: !!c.premium }));
      this.initialAllowedColorsSet = new Set(this.allowedColorsSet);
      this.allowedColors = [...this.allSiteColors];
      log(`[BLUE MARBLE] Paleta inicializada: ${this.allowedColorsSet.size} colores permitidos`);
      return Array.from(availableColors);
    }
    /**
     * Detecta colores disponibles del sitio (versión mejorada de Blue Marble)
     */
    detectSiteColors() {
      const colorElements = document.querySelectorAll('[id^="color-"]');
      const colors = [];
      for (const element of colorElements) {
        const idStr = element.id.replace("color-", "");
        const id = parseInt(idStr);
        if (element.querySelector("svg")) {
          continue;
        }
        if (id === 0) {
          continue;
        }
        const backgroundStyle = element.style.backgroundColor;
        if (backgroundStyle) {
          const rgbMatch = backgroundStyle.match(/\d+/g);
          if (rgbMatch && rgbMatch.length >= 3) {
            const rgb = [
              parseInt(rgbMatch[0]),
              parseInt(rgbMatch[1]),
              parseInt(rgbMatch[2])
            ];
            const colorInfo = {
              id,
              element,
              rgb,
              name: element.title || element.getAttribute("aria-label") || `Color ${id}`,
              premium: element.classList.contains("premium") || element.querySelector(".premium")
            };
            colors.push(colorInfo);
          }
        }
      }
      log(`[BLUE MARBLE] ${colors.length} colores detectados del sitio`);
      return colors;
    }
    /**
     * Establece las coordenadas de posición (como Blue Marble)
     */
    setCoords(tileX, tileY, pixelX, pixelY) {
      this.coords = [tileX, tileY, pixelX, pixelY];
    }
    /**
     * Analiza píxeles de la imagen y cuenta requeridos vs #deface (como Blue Marble)
     */
    async analyzePixels() {
      if (!this.bitmap) {
        throw new Error("Imagen no cargada. Llama a load() primero.");
      }
      try {
        const inspectCanvas = new OffscreenCanvas(this.imageWidth, this.imageHeight);
        const inspectCtx = inspectCanvas.getContext("2d", { willReadFrequently: true });
        inspectCtx.imageSmoothingEnabled = false;
        inspectCtx.clearRect(0, 0, this.imageWidth, this.imageHeight);
        inspectCtx.drawImage(this.bitmap, 0, 0);
        const inspectData = inspectCtx.getImageData(0, 0, this.imageWidth, this.imageHeight).data;
        let required = 0;
        let deface = 0;
        const paletteMap = /* @__PURE__ */ new Map();
        for (let y = 0; y < this.imageHeight; y++) {
          for (let x = 0; x < this.imageWidth; x++) {
            const idx = (y * this.imageWidth + x) * 4;
            const r = inspectData[idx];
            const g = inspectData[idx + 1];
            const b = inspectData[idx + 2];
            const a = inspectData[idx + 3];
            if (a === 0) continue;
            const key = `${r},${g},${b}`;
            if (r === 222 && g === 250 && b === 206) {
              deface++;
            }
            let matchedKey = key;
            let isValidPixel = this.allowedColorsSet.has(key);
            if (!isValidPixel && this.allowedColors && this.allowedColors.length > 0) {
              const closestColor = ColorUtils.findClosestPaletteColor(r, g, b, this.allowedColors, {
                useLegacyRgb: false,
                // Usar algoritmo LAB avanzado
                whiteThreshold: 240
              });
              if (closestColor) {
                matchedKey = `${closestColor.r},${closestColor.g},${closestColor.b}`;
                isValidPixel = true;
              }
            }
            if (!isValidPixel) continue;
            required++;
            paletteMap.set(matchedKey, (paletteMap.get(matchedKey) || 0) + 1);
          }
        }
        this.requiredPixelCount = required;
        this.defacePixelCount = deface;
        const paletteObj = {};
        for (const [key, count] of paletteMap.entries()) {
          paletteObj[key] = { count, enabled: true };
        }
        this.colorPalette = paletteObj;
        log(`[BLUE MARBLE] An\xE1lisis: ${required.toLocaleString()} p\xEDxeles, ${paletteMap.size} colores`);
        return {
          totalPixels: this.totalPixels,
          requiredPixels: required,
          defacePixels: deface,
          uniqueColors: paletteMap.size,
          colorPalette: paletteObj
        };
      } catch {
        this.requiredPixelCount = Math.max(0, this.totalPixels);
        this.defacePixelCount = 0;
        return {
          totalPixels: this.totalPixels,
          requiredPixels: this.totalPixels,
          defacePixels: 0,
          uniqueColors: 0,
          colorPalette: {}
        };
      }
    }
    /**
     * Crea tiles de template (proceso principal de Blue Marble)
     */
    async createTemplateTiles() {
      if (!this.bitmap) {
        throw new Error("Imagen no cargada. Llama a load() primero.");
      }
      const templateTiles = {};
      const templateTilesBuffers = {};
      const canvas = new OffscreenCanvas(this.tileSize, this.tileSize);
      const context = canvas.getContext("2d", { willReadFrequently: true });
      for (let pixelY = this.coords[3]; pixelY < this.imageHeight + this.coords[3]; ) {
        const drawSizeY = Math.min(
          this.tileSize - pixelY % this.tileSize,
          this.imageHeight - (pixelY - this.coords[3])
        );
        for (let pixelX = this.coords[2]; pixelX < this.imageWidth + this.coords[2]; ) {
          const drawSizeX = Math.min(
            this.tileSize - pixelX % this.tileSize,
            this.imageWidth - (pixelX - this.coords[2])
          );
          const canvasWidth = drawSizeX * this.shreadSize;
          const canvasHeight = drawSizeY * this.shreadSize;
          canvas.width = canvasWidth;
          canvas.height = canvasHeight;
          context.imageSmoothingEnabled = false;
          context.clearRect(0, 0, canvasWidth, canvasHeight);
          context.drawImage(
            this.bitmap,
            // Bitmap de imagen a dibujar
            pixelX - this.coords[2],
            // Coordenada X desde donde dibujar
            pixelY - this.coords[3],
            // Coordenada Y desde donde dibujar
            drawSizeX,
            // Ancho X a dibujar desde
            drawSizeY,
            // Alto Y a dibujar desde
            0,
            // Coordenada X donde dibujar
            0,
            // Coordenada Y donde dibujar
            drawSizeX * this.shreadSize,
            // Ancho X donde dibujar
            drawSizeY * this.shreadSize
            // Alto Y donde dibujar
          );
          const imageData = context.getImageData(0, 0, canvasWidth, canvasHeight);
          for (let y = 0; y < canvasHeight; y++) {
            for (let x = 0; x < canvasWidth; x++) {
              const pixelIndex = (y * canvasWidth + x) * 4;
              if (imageData.data[pixelIndex] === 222 && imageData.data[pixelIndex + 1] === 250 && imageData.data[pixelIndex + 2] === 206) {
                if ((x + y) % 2 === 0) {
                  imageData.data[pixelIndex] = 0;
                  imageData.data[pixelIndex + 1] = 0;
                  imageData.data[pixelIndex + 2] = 0;
                } else {
                  imageData.data[pixelIndex] = 255;
                  imageData.data[pixelIndex + 1] = 255;
                  imageData.data[pixelIndex + 2] = 255;
                }
                imageData.data[pixelIndex + 3] = 32;
              } else if (x % this.shreadSize !== 1 || y % this.shreadSize !== 1) {
                imageData.data[pixelIndex + 3] = 0;
              } else {
                const r = imageData.data[pixelIndex];
                const g = imageData.data[pixelIndex + 1];
                const b = imageData.data[pixelIndex + 2];
                if (!this.allowedColorsSet.has(`${r},${g},${b}`)) {
                  imageData.data[pixelIndex + 3] = 0;
                }
              }
            }
          }
          context.putImageData(imageData, 0, 0);
          const templateTileName = `${(this.coords[0] + Math.floor(pixelX / 1e3)).toString().padStart(4, "0")},${(this.coords[1] + Math.floor(pixelY / 1e3)).toString().padStart(4, "0")},${(pixelX % 1e3).toString().padStart(3, "0")},${(pixelY % 1e3).toString().padStart(3, "0")}`;
          templateTiles[templateTileName] = await createImageBitmap(canvas);
          this.tilePrefixes.add(templateTileName.split(",").slice(0, 2).join(","));
          const canvasBlob = await canvas.convertToBlob();
          const canvasBuffer = await canvasBlob.arrayBuffer();
          templateTilesBuffers[templateTileName] = canvasBuffer;
          pixelX += drawSizeX;
        }
        pixelY += drawSizeY;
      }
      this.templateTiles = templateTiles;
      this.templateTilesBuffers = templateTilesBuffers;
      log(`[BLUE MARBLE] ${Object.keys(templateTiles).length} tiles creados`);
      return { templateTiles, templateTilesBuffers };
    }
    /**
     * Genera cola de píxeles para pintar (compatible con Auto-Image)
     */
    generatePixelQueue() {
      if (!this.bitmap) {
        throw new Error("Imagen no cargada. Llama a load() primero.");
      }
      const queue = [];
      const baseX = this.coords[0] * 1e3 + (this.coords[2] || 0);
      const baseY = this.coords[1] * 1e3 + (this.coords[3] || 0);
      const readCanvas = new OffscreenCanvas(this.imageWidth, this.imageHeight);
      const readCtx = readCanvas.getContext("2d", { willReadFrequently: true });
      readCtx.imageSmoothingEnabled = false;
      readCtx.drawImage(this.bitmap, 0, 0);
      const pixelData = readCtx.getImageData(0, 0, this.imageWidth, this.imageHeight).data;
      for (let y = 0; y < this.imageHeight; y++) {
        for (let x = 0; x < this.imageWidth; x++) {
          const idx = (y * this.imageWidth + x) * 4;
          const r = pixelData[idx];
          const g = pixelData[idx + 1];
          const b = pixelData[idx + 2];
          const alpha = pixelData[idx + 3];
          if (alpha === 0) continue;
          if (r === 222 && g === 250 && b === 206) continue;
          const colorKey = `${r},${g},${b}`;
          let finalColorKey = colorKey;
          let finalR = r, finalG = g, finalB = b;
          let isValidPixel = this.allowedColorsSet.has(colorKey);
          if (!isValidPixel && this.allowedColors && this.allowedColors.length > 0) {
            const closestColor = ColorUtils.findClosestPaletteColor(r, g, b, this.allowedColors, {
              useLegacyRgb: false,
              // Usar algoritmo LAB avanzado
              whiteThreshold: 240
            });
            if (closestColor) {
              finalR = closestColor.r;
              finalG = closestColor.g;
              finalB = closestColor.b;
              finalColorKey = `${finalR},${finalG},${finalB}`;
              isValidPixel = true;
            }
          }
          if (!isValidPixel) continue;
          const globalX = baseX + x;
          const globalY = baseY + y;
          const tileX = Math.floor(globalX / 1e3);
          const tileY = Math.floor(globalY / 1e3);
          const localX = globalX % 1e3;
          const localY = globalY % 1e3;
          const colorMeta = this.rgbToMeta.get(finalColorKey) || { id: 0, name: "Unknown" };
          queue.push({
            // Coordenadas de imagen (relativas)
            imageX: x,
            imageY: y,
            // Coordenadas globales
            globalX,
            globalY,
            // Coordenadas de tile/local
            tileX,
            tileY,
            localX,
            localY,
            // Información de color
            color: {
              r: finalR,
              g: finalG,
              b: finalB,
              id: colorMeta.id,
              name: colorMeta.name
            },
            originalColor: { r: finalR, g: finalG, b: finalB, alpha }
          });
        }
      }
      log(`[BLUE MARBLE] Cola: ${queue.length} p\xEDxeles`);
      return queue;
    }
    /**
     * Redimensiona la imagen (preserva proporciones por defecto)
     */
    async resize(newWidth, newHeight, keepAspectRatio = true) {
      if (!this.img) {
        throw new Error("Imagen no cargada. Llama a load() primero.");
      }
      const originalWidth = this.img.width;
      const originalHeight = this.img.height;
      if (keepAspectRatio) {
        const aspectRatio = originalWidth / originalHeight;
        if (newWidth / newHeight > aspectRatio) {
          newWidth = newHeight * aspectRatio;
        } else {
          newHeight = newWidth / aspectRatio;
        }
      }
      const tempCanvas = document.createElement("canvas");
      tempCanvas.width = newWidth;
      tempCanvas.height = newHeight;
      const tempCtx = tempCanvas.getContext("2d");
      tempCtx.imageSmoothingEnabled = false;
      tempCtx.drawImage(this.img, 0, 0, newWidth, newHeight);
      const newDataUrl = tempCanvas.toDataURL();
      this.img.src = newDataUrl;
      this.imageSrc = newDataUrl;
      await new Promise((resolve) => {
        this.img.onload = async () => {
          this.bitmap = await createImageBitmap(this.img);
          this.imageWidth = this.bitmap.width;
          this.imageHeight = this.bitmap.height;
          this.totalPixels = this.imageWidth * this.imageHeight;
          resolve();
        };
      });
      log(`[BLUE MARBLE] Imagen redimensionada: ${originalWidth}\xD7${originalHeight} \u2192 ${this.imageWidth}\xD7${this.imageHeight}`);
      return {
        width: this.imageWidth,
        height: this.imageHeight
      };
    }
    /**
     * Obtiene información completa de la imagen procesada
     */
    getImageData() {
      return {
        width: this.imageWidth,
        height: this.imageHeight,
        totalPixels: this.totalPixels,
        requiredPixels: this.requiredPixelCount,
        defacePixels: this.defacePixelCount,
        colorPalette: this.colorPalette,
        coords: [...this.coords],
        originalName: this.originalName || "image.png",
        // Para compatibilidad con Auto-Image actual
        pixels: this.generatePixelQueue()
      };
    }
    /**
     * Genera preview de la imagen
     */
    generatePreview(maxWidth = 200, maxHeight = 200) {
      if (!this.img) return null;
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      const { width: origWidth, height: origHeight } = this.img;
      const aspectRatio = origWidth / origHeight;
      let newWidth, newHeight;
      if (maxWidth / maxHeight > aspectRatio) {
        newHeight = maxHeight;
        newWidth = maxHeight * aspectRatio;
      } else {
        newWidth = maxWidth;
        newHeight = maxWidth / aspectRatio;
      }
      canvas.width = newWidth;
      canvas.height = newHeight;
      ctx.imageSmoothingEnabled = false;
      ctx.drawImage(this.img, 0, 0, newWidth, newHeight);
      return canvas.toDataURL();
    }
    getDimensions() {
      return {
        width: this.imageWidth,
        height: this.imageHeight
      };
    }
    /**
     * Establecer colores seleccionados por el usuario
     */
    setSelectedColors(selectedColors) {
      this.selectedColors = selectedColors;
      if (selectedColors && selectedColors.length > 0) {
        this.allowedColorsSet = new Set(selectedColors.map((c) => c.id));
        this.colorPalette = {};
        selectedColors.forEach((color) => {
          this.colorPalette[color.id] = color.rgb;
        });
        log(`\u{1F3A8} [BLUE MARBLE] Paleta actualizada con ${selectedColors.length} colores seleccionados`);
        this.imageDataCache = null;
      } else {
        log(`\u{1F3A8} [BLUE MARBLE] Usando todos los colores disponibles`);
      }
    }
  };

  // src/image/painter.js
  init_logger();

  // src/core/timing.js
  var sleep = (ms) => new Promise((r) => setTimeout(r, ms));

  // src/core/turnstile.js
  init_logger();
  var turnstileToken = null;
  var tokenExpiryTime = 0;
  var tokenGenerationInProgress = false;
  var _resolveToken = null;
  var tokenPromise = new Promise((resolve) => {
    _resolveToken = resolve;
  });
  var TOKEN_LIFETIME = 24e4;
  var _turnstileWidgetId = null;
  var _turnstileContainer = null;
  var _turnstileOverlay = null;
  var _lastSitekey = null;
  var _cachedSitekey = null;
  function setTurnstileToken(t2) {
    if (_resolveToken) {
      _resolveToken(t2);
      _resolveToken = null;
    }
    turnstileToken = t2;
    tokenExpiryTime = Date.now() + TOKEN_LIFETIME;
    log("\u2705 Turnstile token set successfully");
  }
  function isTokenValid() {
    return turnstileToken && Date.now() < tokenExpiryTime;
  }
  function invalidateToken() {
    turnstileToken = null;
    tokenExpiryTime = 0;
    log("\u{1F5D1}\uFE0F Token invalidated, will force fresh generation");
  }
  async function ensureToken(forceNew = false) {
    if (isTokenValid() && !forceNew) {
      return turnstileToken;
    }
    if (forceNew) {
      invalidateToken();
    }
    if (tokenGenerationInProgress) {
      log("\u{1F504} Token generation already in progress, waiting...");
      await sleep2(2e3);
      return isTokenValid() ? turnstileToken : null;
    }
    tokenGenerationInProgress = true;
    try {
      log("\u{1F504} Token expired or missing, generating new one...");
      const token = await handleCaptcha();
      if (token && token.length > 20) {
        setTurnstileToken(token);
        log("\u2705 Token captured and cached successfully");
        return token;
      }
      log("\u26A0\uFE0F Invisible Turnstile failed, forcing browser automation...");
      const fallbackToken = await handleCaptchaFallback();
      if (fallbackToken && fallbackToken.length > 20) {
        setTurnstileToken(fallbackToken);
        log("\u2705 Fallback token captured successfully");
        return fallbackToken;
      }
      log("\u274C All token generation methods failed");
      return null;
    } finally {
      tokenGenerationInProgress = false;
    }
  }
  async function handleCaptcha() {
    const startTime = Date.now();
    try {
      const sitekey = detectSitekey();
      log("\u{1F511} Generating Turnstile token for sitekey:", sitekey);
      if (typeof window !== "undefined" && window.navigator) {
        log("\u{1F9ED} UA:", window.navigator.userAgent, "Platform:", window.navigator.platform);
      }
      const token = await generatePaintToken(sitekey);
      if (token && token.length > 20) {
        const duration = Math.round(Date.now() - startTime);
        log(`\u2705 Turnstile token generated successfully in ${duration}ms`);
        return token;
      } else {
        throw new Error("Invalid or empty token received");
      }
    } catch (error) {
      const duration = Math.round(Date.now() - startTime);
      log(`\u274C Turnstile token generation failed after ${duration}ms:`, error);
      throw error;
    }
  }
  async function generatePaintToken(sitekey) {
    return executeTurnstile(sitekey, "paint");
  }
  async function loadTurnstile() {
    if (window.turnstile) {
      return Promise.resolve();
    }
    return new Promise((resolve, reject) => {
      if (document.querySelector('script[src^="https://challenges.cloudflare.com/turnstile/v0/api.js"]')) {
        const checkReady = () => {
          if (window.turnstile) {
            resolve();
          } else {
            setTimeout(checkReady, 100);
          }
        };
        return checkReady();
      }
      const script = document.createElement("script");
      script.src = "https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit";
      script.async = true;
      script.defer = true;
      script.onload = () => {
        log("\u2705 Turnstile script loaded successfully");
        resolve();
      };
      script.onerror = () => {
        log("\u274C Failed to load Turnstile script");
        reject(new Error("Failed to load Turnstile"));
      };
      document.head.appendChild(script);
    });
  }
  function ensureTurnstileContainer() {
    if (!_turnstileContainer || !document.body.contains(_turnstileContainer)) {
      if (_turnstileContainer) {
        _turnstileContainer.remove();
      }
      _turnstileContainer = document.createElement("div");
      _turnstileContainer.style.cssText = `
      position: fixed !important;
      left: -9999px !important; /* keep off-screen for invisible mode */
      top: -9999px !important;
      width: 300px !important;
      height: 65px !important;
      pointer-events: none !important;
      opacity: 0 !important; /* do not use visibility:hidden to avoid engine quirks */
      z-index: -1 !important;
    `;
      _turnstileContainer.setAttribute("aria-hidden", "true");
      _turnstileContainer.id = "turnstile-widget-container";
      document.body.appendChild(_turnstileContainer);
    }
    return _turnstileContainer;
  }
  function ensureTurnstileOverlayContainer() {
    if (_turnstileOverlay && document.body.contains(_turnstileOverlay)) {
      return _turnstileOverlay;
    }
    const overlay = document.createElement("div");
    overlay.id = "turnstile-overlay-container";
    overlay.style.cssText = `
    position: fixed;
    right: 16px;
    bottom: 16px;
    width: 320px;
    min-height: 80px;
    background: rgba(0,0,0,0.7);
    border: 1px solid rgba(255,255,255,0.2);
    border-radius: 10px;
    padding: 12px;
    z-index: 100000;
    backdrop-filter: blur(6px);
    color: #fff;
    box-shadow: 0 8px 24px rgba(0,0,0,0.4);
  `;
    const title = document.createElement("div");
    title.textContent = "Cloudflare Turnstile \u2014 please complete the check if shown";
    title.style.cssText = 'font: 600 12px/1.3 "Segoe UI",sans-serif; margin-bottom: 8px; opacity: 0.9;';
    const widgetHost = document.createElement("div");
    widgetHost.id = "turnstile-overlay-host";
    widgetHost.style.cssText = "width: 100%; min-height: 70px;";
    const closeBtn = document.createElement("button");
    closeBtn.textContent = "Hide";
    closeBtn.style.cssText = "position:absolute; top:6px; right:6px; font-size:11px; background:transparent; color:#fff; border:1px solid rgba(255,255,255,0.2); border-radius:6px; padding:2px 6px; cursor:pointer;";
    closeBtn.addEventListener("click", () => overlay.remove());
    overlay.appendChild(title);
    overlay.appendChild(widgetHost);
    overlay.appendChild(closeBtn);
    document.body.appendChild(overlay);
    _turnstileOverlay = overlay;
    return overlay;
  }
  async function executeTurnstile(sitekey, action = "paint") {
    var _a;
    await loadTurnstile();
    if (_turnstileWidgetId && _lastSitekey === sitekey && ((_a = window.turnstile) == null ? void 0 : _a.execute)) {
      try {
        log("\u{1F504} Reusing existing Turnstile widget...");
        const token = await Promise.race([
          window.turnstile.execute(_turnstileWidgetId, { action }),
          new Promise((_, reject) => setTimeout(() => reject(new Error("Execute timeout")), 15e3))
        ]);
        if (token && token.length > 20) {
          log("\u2705 Token generated via widget reuse");
          return token;
        }
      } catch (err) {
        log("\u{1F504} Widget reuse failed, will create a fresh widget:", err.message);
      }
    }
    const invisible = await createNewTurnstileWidgetInvisible(sitekey, action);
    if (invisible && invisible.length > 20) return invisible;
    log("\u{1F440} Falling back to interactive Turnstile (visible).");
    return await createNewTurnstileWidgetInteractive(sitekey, action);
  }
  async function createNewTurnstileWidgetInvisible(sitekey, action) {
    return new Promise((resolve) => {
      var _a;
      try {
        if (_turnstileWidgetId && ((_a = window.turnstile) == null ? void 0 : _a.remove)) {
          try {
            window.turnstile.remove(_turnstileWidgetId);
          } catch {
          }
        }
        const container = ensureTurnstileContainer();
        container.innerHTML = "";
        const widgetId = window.turnstile.render(container, {
          sitekey,
          action,
          size: "invisible",
          retry: "auto",
          "retry-interval": 8e3,
          callback: (token) => {
            log("\u2705 Invisible Turnstile callback");
            resolve(token);
          },
          "error-callback": () => resolve(null),
          "timeout-callback": () => resolve(null)
        });
        _turnstileWidgetId = widgetId;
        _lastSitekey = sitekey;
        if (!widgetId) return resolve(null);
        Promise.race([
          window.turnstile.execute(widgetId, { action }),
          new Promise((_, reject) => setTimeout(() => reject(new Error("Invisible execute timeout")), 12e3))
        ]).then(resolve).catch(() => resolve(null));
      } catch (e) {
        log("Invisible Turnstile failed:", e);
        resolve(null);
      }
    });
  }
  async function createNewTurnstileWidgetInteractive(sitekey, action) {
    return new Promise((resolve, reject) => {
      var _a;
      try {
        if (_turnstileWidgetId && ((_a = window.turnstile) == null ? void 0 : _a.remove)) {
          try {
            window.turnstile.remove(_turnstileWidgetId);
          } catch {
          }
        }
        const overlay = ensureTurnstileOverlayContainer();
        const host = overlay.querySelector("#turnstile-overlay-host");
        host.innerHTML = "";
        const timeoutId = setTimeout(() => {
          log("\u23F0 Interactive Turnstile timed out");
          resolve(null);
        }, 12e4);
        const widgetId = window.turnstile.render(host, {
          sitekey,
          action,
          size: "normal",
          retry: "auto",
          "retry-interval": 8e3,
          callback: (token) => {
            clearTimeout(timeoutId);
            try {
              overlay.remove();
            } catch {
            }
            log("\u2705 Interactive Turnstile solved");
            resolve(token);
          },
          "error-callback": (error) => {
            log("\u{1F6A8} Interactive Turnstile error:", error);
          },
          "timeout-callback": () => {
            log("\u23F0 Turnstile timeout callback (interactive)");
          },
          "expired-callback": () => {
            log("\u26A0\uFE0F Interactive Turnstile token expired");
          }
        });
        _turnstileWidgetId = widgetId;
        _lastSitekey = sitekey;
        if (!widgetId) {
          clearTimeout(timeoutId);
          resolve(null);
          return;
        }
      } catch (error) {
        log("\u274C Error creating interactive Turnstile widget:", error);
        reject(error);
      }
    });
  }
  function detectSitekey(fallback = "0x4AAAAAABpqJe8FO0N84q0F") {
    var _a;
    if (_cachedSitekey) {
      return _cachedSitekey;
    }
    try {
      const sitekeySel = document.querySelector("[data-sitekey]");
      if (sitekeySel) {
        const sitekey = sitekeySel.getAttribute("data-sitekey");
        if (sitekey && sitekey.length > 10) {
          _cachedSitekey = sitekey;
          log("\u{1F50D} Sitekey detected from data attribute:", sitekey);
          return sitekey;
        }
      }
      const turnstileEl = document.querySelector(".cf-turnstile");
      if (((_a = turnstileEl == null ? void 0 : turnstileEl.dataset) == null ? void 0 : _a.sitekey) && turnstileEl.dataset.sitekey.length > 10) {
        _cachedSitekey = turnstileEl.dataset.sitekey;
        log("\u{1F50D} Sitekey detected from turnstile element:", _cachedSitekey);
        return _cachedSitekey;
      }
      if (typeof window !== "undefined" && window.__TURNSTILE_SITEKEY && window.__TURNSTILE_SITEKEY.length > 10) {
        _cachedSitekey = window.__TURNSTILE_SITEKEY;
        log("\u{1F50D} Sitekey detected from global variable:", _cachedSitekey);
        return _cachedSitekey;
      }
      const scripts = document.querySelectorAll("script");
      for (const script of scripts) {
        const content = script.textContent || script.innerHTML;
        const sitekeyMatch = content.match(/sitekey['":\s]+(['"0-9a-zA-Z_-]{20,})/i);
        if (sitekeyMatch && sitekeyMatch[1] && sitekeyMatch[1].length > 10) {
          _cachedSitekey = sitekeyMatch[1].replace(/['"]/g, "");
          log("\u{1F50D} Sitekey detected from script content:", _cachedSitekey);
          return _cachedSitekey;
        }
      }
    } catch (error) {
      log("Error detecting sitekey:", error);
    }
    log("\u{1F50D} Using fallback sitekey:", fallback);
    _cachedSitekey = fallback;
    return fallback;
  }
  function sleep2(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  function waitForSelector(selector, interval = 200, timeout = 1e4) {
    return new Promise((resolve) => {
      const endTime = Date.now() + timeout;
      const check = () => {
        const element = document.querySelector(selector);
        if (element) {
          resolve(element);
        } else if (Date.now() < endTime) {
          setTimeout(check, interval);
        } else {
          resolve(null);
        }
      };
      check();
    });
  }
  async function handleCaptchaFallback() {
    return new Promise((resolve, reject) => {
      const executeFlow = async () => {
        try {
          log("\u{1F3AF} Starting automatic CAPTCHA solving process...");
          invalidateToken();
          tokenPromise = new Promise((res) => {
            _resolveToken = res;
          });
          const timeoutPromise = sleep2(3e4).then(() => reject(new Error("Auto-CAPTCHA timed out after 30 seconds.")));
          const solvePromise = (async () => {
            let mainPaintBtn = await waitForSelector("button.btn.btn-primary.btn-lg", 200, 3e3);
            if (!mainPaintBtn) {
              mainPaintBtn = await waitForSelector("button.btn-primary.sm\\:btn-xl", 200, 3e3);
            }
            if (!mainPaintBtn) {
              mainPaintBtn = await waitForSelector("button.btn-primary", 200, 3e3);
            }
            if (!mainPaintBtn) {
              log("\u{1F3AF} No paint button found, clicking on canvas directly to trigger CAPTCHA...");
              const canvas2 = await waitForSelector("canvas", 200, 5e3);
              if (canvas2) {
                canvas2.click();
                await sleep2(1e3);
                mainPaintBtn = await waitForSelector("button.btn.btn-primary.btn-lg, button.btn-primary.sm\\:btn-xl, button.btn-primary", 200, 5e3);
              }
            }
            if (!mainPaintBtn) throw new Error("Could not find any paint button after attempts.");
            log("\u{1F3AF} Found paint button, clicking...");
            mainPaintBtn.click();
            await sleep2(500);
            log("\u{1F3AF} Selecting transparent color...");
            const transBtn = await waitForSelector("button#color-0", 200, 5e3);
            if (!transBtn) {
              log("\u26A0\uFE0F Could not find transparent color button, trying alternative selectors...");
              const colorBtns = document.querySelectorAll('button[id^="color-"]');
              if (colorBtns.length > 0) {
                colorBtns[0].click();
                log("\u{1F3AF} Clicked first available color button");
              }
            } else {
              transBtn.click();
            }
            await sleep2(500);
            log("\u{1F3AF} Finding canvas element...");
            const canvas = await waitForSelector("canvas", 200, 5e3);
            if (!canvas) throw new Error("Could not find the canvas element.");
            canvas.setAttribute("tabindex", "0");
            canvas.focus();
            const rect = canvas.getBoundingClientRect();
            const centerX = Math.round(rect.left + rect.width / 2);
            const centerY = Math.round(rect.top + rect.height / 2);
            log("\u{1F3AF} Simulating canvas interaction...");
            if (typeof window !== "undefined" && window.MouseEvent && window.KeyboardEvent) {
              canvas.dispatchEvent(new window.MouseEvent("mousemove", { clientX: centerX, clientY: centerY, bubbles: true }));
              canvas.dispatchEvent(new window.MouseEvent("mousedown", { clientX: centerX, clientY: centerY, bubbles: true }));
              await sleep2(50);
              canvas.dispatchEvent(new window.MouseEvent("mouseup", { clientX: centerX, clientY: centerY, bubbles: true }));
              canvas.dispatchEvent(new window.KeyboardEvent("keydown", { key: " ", code: "Space", bubbles: true }));
              await sleep2(50);
              canvas.dispatchEvent(new window.KeyboardEvent("keyup", { key: " ", code: "Space", bubbles: true }));
            }
            await sleep2(1e3);
            log("\u{1F3AF} Waiting for CAPTCHA challenge...");
            await sleep2(2e3);
            log("\u{1F3AF} Starting confirmation loop...");
            const startTime = Date.now();
            const confirmLoop = async () => {
              let attempts = 0;
              while (!isTokenValid() && Date.now() - startTime < 25e3) {
                attempts++;
                let confirmBtn = await waitForSelector("button.btn.btn-primary.btn-lg", 100, 1e3);
                if (!confirmBtn) {
                  confirmBtn = await waitForSelector("button.btn.btn-primary.sm\\:btn-xl", 100, 1e3);
                }
                if (!confirmBtn) {
                  const allPrimary = Array.from(document.querySelectorAll("button.btn-primary"));
                  confirmBtn = allPrimary.length ? allPrimary[allPrimary.length - 1] : null;
                }
                if (confirmBtn && !confirmBtn.disabled) {
                  log(`\u{1F3AF} Clicking confirmation button (attempt ${attempts})...`);
                  confirmBtn.click();
                } else {
                  log(`\u{1F3AF} No active confirm button found (attempt ${attempts})`);
                }
                await sleep2(800);
              }
            };
            confirmLoop();
            const token = await tokenPromise;
            await sleep2(500);
            log("\u2705 Token successfully captured through browser automation");
            resolve(token);
          })();
          await Promise.race([solvePromise, timeoutPromise]);
        } catch (error) {
          log("\u274C Auto-CAPTCHA process failed:", error);
          reject(error);
        }
      };
      executeFlow();
    });
  }
  window.__WPA_SET_TURNSTILE_TOKEN__ = function(token) {
    if (token && typeof token === "string" && token.length > 20) {
      log("\u2705 Turnstile Token Captured:", token);
      setTurnstileToken(token);
    }
  };
  (function() {
    if (window.__WPA_FETCH_HOOKED__) return;
    window.__WPA_FETCH_HOOKED__ = true;
    const originalFetch = window.fetch;
    window.fetch = async function(...args) {
      const response = await originalFetch.apply(this, args);
      const url = args[0] instanceof Request ? args[0].url : args[0];
      if (typeof url === "string") {
        if (url.includes("https://backend.wplace.live/s0/pixel/")) {
          try {
            const payload = JSON.parse(args[1].body);
            if (payload.t) {
              const capturedToken = payload.t;
              if (!isTokenValid() || turnstileToken !== capturedToken) {
                log("\u2705 Turnstile Token Captured:", capturedToken);
                window.postMessage({ source: "turnstile-capture", token: capturedToken }, "*");
              }
            }
          } catch {
          }
        }
      }
      return response;
    };
    window.addEventListener("message", (event) => {
      const { source, token } = event.data;
      if (source === "turnstile-capture" && token) {
        if (!isTokenValid() || turnstileToken !== token) {
          setTurnstileToken(token);
        }
      }
    });
  })();

  // src/core/wplace-api.js
  init_logger();
  var BASE = "https://backend.wplace.live";
  async function getSession() {
    var _a, _b, _c;
    try {
      const me = await fetch(`${BASE}/me`, { credentials: "include" }).then((r) => r.json());
      const user = me || null;
      const c = (me == null ? void 0 : me.charges) || {};
      const charges = {
        count: (_a = c.count) != null ? _a : 0,
        // Mantener valor decimal original
        max: (_b = c.max) != null ? _b : 0,
        // Mantener valor original (puede variar por usuario)
        cooldownMs: (_c = c.cooldownMs) != null ? _c : 3e4
      };
      return {
        success: true,
        data: {
          user,
          charges: charges.count,
          maxCharges: charges.max,
          chargeRegen: charges.cooldownMs
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        data: {
          user: null,
          charges: 0,
          maxCharges: 0,
          chargeRegen: 3e4
        }
      };
    }
  }
  async function postPixelBatchImage(tileX, tileY, coords, colors, turnstileToken2) {
    try {
      const body = JSON.stringify({
        colors,
        coords,
        t: turnstileToken2
      });
      log(`[API] Sending batch to tile ${tileX},${tileY} with ${colors.length} pixels, token: ${turnstileToken2 ? turnstileToken2.substring(0, 50) + "..." : "null"}`);
      const response = await fetch(`${BASE}/s0/pixel/${tileX}/${tileY}`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "text/plain;charset=UTF-8" },
        body
      });
      log(`[API] Response: ${response.status} ${response.statusText}`);
      if (response.status === 403) {
        try {
          await response.json();
        } catch {
        }
        console.error("\u274C 403 Forbidden. Turnstile token might be invalid or expired.");
        try {
          console.log("\u{1F504} Regenerating Turnstile token after 403...");
          const newToken = await ensureToken(true);
          if (!newToken) {
            return {
              status: 403,
              json: { error: "Could not generate new token" },
              success: false,
              painted: 0
            };
          }
          const retryBody = JSON.stringify({
            colors,
            coords,
            t: newToken
          });
          log(`[API] Retrying with fresh token: ${newToken.substring(0, 50)}...`);
          const retryResponse = await fetch(`${BASE}/s0/pixel/${tileX}/${tileY}`, {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "text/plain;charset=UTF-8" },
            body: retryBody
          });
          log(`[API] Retry response: ${retryResponse.status} ${retryResponse.statusText}`);
          if (retryResponse.status === 403) {
            return {
              status: 403,
              json: { error: "Fresh token still expired or invalid after retry" },
              success: false,
              painted: 0
            };
          }
          let retryData = null;
          try {
            const text = await retryResponse.text();
            if (text.trim()) {
              retryData = JSON.parse(text);
            } else {
              retryData = {};
            }
          } catch (parseError) {
            log(`[API] Warning: Could not parse retry response JSON: ${parseError.message}`);
            retryData = {};
          }
          const painted2 = (retryData == null ? void 0 : retryData.painted) || 0;
          log(`[API] Retry result: ${painted2} pixels painted`);
          return {
            status: retryResponse.status,
            json: retryData,
            success: retryResponse.ok,
            painted: painted2
          };
        } catch (retryError) {
          console.error("\u274C Token regeneration failed:", retryError);
          return {
            status: 403,
            json: { error: "Token regeneration failed: " + retryError.message },
            success: false,
            painted: 0
          };
        }
      }
      let responseData = null;
      try {
        const text = await response.text();
        if (text.trim()) {
          responseData = JSON.parse(text);
        } else {
          responseData = {};
        }
      } catch (parseError) {
        log(`[API] Warning: Could not parse response JSON: ${parseError.message}`);
        responseData = {};
      }
      const painted = (responseData == null ? void 0 : responseData.painted) || 0;
      log(`[API] Success: ${painted} pixels painted`);
      return {
        status: response.status,
        json: responseData,
        success: response.ok,
        painted
      };
    } catch (error) {
      log(`[API] Network error: ${error.message}`);
      return {
        status: 0,
        json: { error: error.message },
        success: false,
        painted: 0
      };
    }
  }

  // src/image/painter.js
  init_config();
  init_locales();

  // src/image/protection.js
  init_logger();
  init_config();
  var { Image, URL: URL2 } = window;
  async function getTileImage(tileX, tileY) {
    try {
      const url = `https://backend.wplace.live/files/s0/tiles/${tileX}/${tileY}.png`;
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      return await response.blob();
    } catch (error) {
      log(`Error obteniendo tile ${tileX},${tileY}:`, error);
      return null;
    }
  }
  async function detectChangesInDrawnArea(paintedPixelsList) {
    if (!paintedPixelsList || paintedPixelsList.length === 0) {
      return [];
    }
    log(`\u{1F50D} Verificando ${paintedPixelsList.length} p\xEDxeles pintados para detectar cambios`);
    const changes = [];
    const tileMap = /* @__PURE__ */ new Map();
    for (const pixel of paintedPixelsList) {
      const tileKey = `${pixel.tileX},${pixel.tileY}`;
      if (!tileMap.has(tileKey)) {
        tileMap.set(tileKey, []);
      }
      tileMap.get(tileKey).push(pixel);
    }
    for (const [tileKey, tilePixels] of tileMap) {
      const [tileX, tileY] = tileKey.split(",").map(Number);
      try {
        const tileBlob = await getTileImage(tileX, tileY);
        if (!tileBlob) {
          log(`\u26A0\uFE0F No se pudo obtener tile ${tileX},${tileY} para verificaci\xF3n de protecci\xF3n`);
          continue;
        }
        const img = new Image();
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        await new Promise((resolve, reject) => {
          img.onload = resolve;
          img.onerror = reject;
          img.src = URL2.createObjectURL(tileBlob);
        });
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.drawImage(img, 0, 0);
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const data = imageData.data;
        for (const pixel of tilePixels) {
          const { localX, localY } = pixel;
          if (localX >= 0 && localX < canvas.width && localY >= 0 && localY < canvas.height) {
            const pixelIndex = (localY * canvas.width + localX) * 4;
            const currentR = data[pixelIndex];
            const currentG = data[pixelIndex + 1];
            const currentB = data[pixelIndex + 2];
            const currentA = data[pixelIndex + 3];
            if (currentA > 0) {
              const originalColor = pixel.color;
              const isOriginalColor = currentR === originalColor.r && currentG === originalColor.g && currentB === originalColor.b;
              if (!isOriginalColor) {
                changes.push({
                  imageX: pixel.imageX,
                  imageY: pixel.imageY,
                  localX: pixel.localX,
                  localY: pixel.localY,
                  tileX: pixel.tileX,
                  tileY: pixel.tileY,
                  originalColor: pixel.color,
                  // Color que el bot aplicó originalmente
                  currentRGB: { r: currentR, g: currentG, b: currentB },
                  paintedAt: pixel.paintedAt || Date.now()
                });
                log(`\u{1F6A8} P\xEDxel alterado detectado: (${localX},${localY}) en tile (${tileX},${tileY}) - Original: RGB(${originalColor.r},${originalColor.g},${originalColor.b}) vs Actual: RGB(${currentR},${currentG},${currentB})`);
              }
            }
          }
        }
        URL2.revokeObjectURL(img.src);
      } catch (error) {
        log(`\u274C Error analizando tile ${tileX},${tileY} para protecci\xF3n:`, error);
      }
    }
    if (changes.length > 0) {
      log(`\u{1F6A8} Detectados ${changes.length} p\xEDxeles alterados que necesitan restauraci\xF3n a sus colores originales`);
    } else {
      log(`\u2705 Todos los p\xEDxeles pintados mantienen sus colores originales`);
    }
    return changes;
  }
  async function repairChangedPixels(changedPixels, onProgress) {
    if (!changedPixels || changedPixels.length === 0) {
      return { success: true, repaired: 0 };
    }
    const availableCharges = Math.floor(imageState.currentCharges);
    if (availableCharges === 0) {
      log(`\u26A0\uFE0F Sin cargas disponibles para reparar, esperando recarga...`);
      if (onProgress) {
        onProgress(
          imageState.paintedPixels,
          imageState.totalPixels,
          "\u26A1 Sin cargas para reparar p\xEDxeles alterados, esperando..."
        );
      }
      return { success: false, repaired: 0, reason: "no_charges" };
    }
    const maxRepairs = Math.min(changedPixels.length, availableCharges);
    const pixelsToRepair = changedPixels.slice(0, maxRepairs);
    log(`\u{1F6E0}\uFE0F Reparando ${pixelsToRepair.length} p\xEDxeles alterados (cargas: ${availableCharges})`);
    if (onProgress) {
      onProgress(
        imageState.paintedPixels,
        imageState.totalPixels,
        `\u{1F6E1}\uFE0F Protegiendo dibujo: reparando ${pixelsToRepair.length} p\xEDxeles alterados...`
      );
    }
    const changesByTile = /* @__PURE__ */ new Map();
    for (const change of pixelsToRepair) {
      const tileKey = `${change.tileX},${change.tileY}`;
      if (!changesByTile.has(tileKey)) {
        changesByTile.set(tileKey, []);
      }
      changesByTile.get(tileKey).push(change);
    }
    let totalRepaired = 0;
    for (const [tileKey, tileChanges] of changesByTile) {
      const [tileX, tileY] = tileKey.split(",").map(Number);
      try {
        const coords = [];
        const colors = [];
        for (const change of tileChanges) {
          coords.push(change.localX, change.localY);
          colors.push(change.originalColor.id);
        }
        const result = await repairPixelBatch(tileX, tileY, coords, colors);
        if (result.success && result.painted > 0) {
          totalRepaired += result.painted;
          imageState.currentCharges = Math.max(0, imageState.currentCharges - result.painted);
          log(`\u2705 Reparados ${result.painted} p\xEDxeles en tile (${tileX},${tileY})`);
        } else {
          log(`\u274C Error reparando tile (${tileX},${tileY}):`, result.error);
        }
      } catch (error) {
        log(`\u274C Error reparando tile (${tileX},${tileY}):`, error);
      }
      if (changesByTile.size > 1) {
        await sleep(300);
      }
    }
    const remainingCharges = Math.floor(imageState.currentCharges);
    log(`\u{1F6E1}\uFE0F Protecci\xF3n completada: ${totalRepaired} p\xEDxeles reparados, ${remainingCharges} cargas restantes`);
    if (onProgress && totalRepaired > 0) {
      onProgress(
        imageState.paintedPixels,
        imageState.totalPixels,
        `\u2705 Dibujo protegido: ${totalRepaired} p\xEDxeles reparados`
      );
    }
    return {
      success: totalRepaired > 0,
      repaired: totalRepaired,
      remainingCharges
    };
  }
  async function repairPixelBatch(tileX, tileY, coords, colors) {
    var _a;
    try {
      const token = await ensureToken();
      const sanitizedCoords = [];
      for (let i = 0; i < coords.length; i += 2) {
        const x = (Number(coords[i]) % 1e3 + 1e3) % 1e3;
        const y = (Number(coords[i + 1]) % 1e3 + 1e3) % 1e3;
        if (Number.isFinite(x) && Number.isFinite(y)) {
          sanitizedCoords.push(x, y);
        }
      }
      const response = await postPixelBatchImage(
        tileX,
        tileY,
        sanitizedCoords,
        colors,
        token
      );
      return {
        success: response.status === 200,
        painted: response.painted || 0,
        status: response.status,
        error: response.status === 200 ? null : ((_a = response.json) == null ? void 0 : _a.message) || "Error desconocido"
      };
    } catch (error) {
      return {
        success: false,
        painted: 0,
        error: error.message
      };
    }
  }
  function getPaintedPixelsList() {
    return Array.from(imageState.drawnPixelsMap.values());
  }
  async function protectBeforeNextBatch(onProgress) {
    const paintedPixels = getPaintedPixelsList();
    if (paintedPixels.length === 0) {
      return { needsProtection: false, canContinue: true };
    }
    if (onProgress) {
      onProgress(
        imageState.paintedPixels,
        imageState.totalPixels,
        "\u{1F50D} Verificando integridad del dibujo..."
      );
    }
    const changes = await detectChangesInDrawnArea(paintedPixels);
    if (changes.length === 0) {
      return { needsProtection: false, canContinue: true };
    }
    log(`\u{1F6A8} Se detectaron ${changes.length} p\xEDxeles alterados de ${paintedPixels.length} p\xEDxeles pintados`);
    const repairResult = await repairChangedPixels(changes, onProgress);
    if (!repairResult.success) {
      if (repairResult.reason === "no_charges") {
        return {
          needsProtection: true,
          canContinue: false,
          reason: "no_charges_for_protection",
          changesCount: changes.length
        };
      }
      return {
        needsProtection: true,
        canContinue: true,
        reason: "protection_failed",
        changesCount: changes.length
      };
    }
    return {
      needsProtection: true,
      canContinue: true,
      reason: "protection_completed",
      repairedCount: repairResult.repaired,
      remainingCharges: repairResult.remainingCharges
    };
  }

  // src/image/painter.js
  init_patterns();
  var chargeMonitorInterval = null;
  var CHARGE_CHECK_INTERVAL = 1e4;
  async function startChargeMonitoring() {
    if (chargeMonitorInterval) {
      window.clearInterval(chargeMonitorInterval);
    }
    chargeMonitorInterval = window.setInterval(async () => {
      try {
        if (imageState.remainingPixels.length > 0 && !imageState.running) {
          const sessionResult = await getSession();
          if (sessionResult.success && sessionResult.data.charges > 0) {
            const availableCharges = Math.floor(sessionResult.data.charges);
            log(`\u{1F504} Cargas detectadas: ${availableCharges}. Continuando pintado autom\xE1ticamente...`);
            imageState.currentCharges = sessionResult.data.charges;
            imageState.maxCharges = sessionResult.data.maxCharges;
            if (window.imageBot && typeof window.imageBot.onStartPainting === "function") {
              window.imageBot.onStartPainting();
            }
          }
        }
      } catch (error) {
        log(`Error en monitoreo de cargas: ${error.message}`);
      }
    }, CHARGE_CHECK_INTERVAL);
    log(`\u2705 Monitoreo de cargas iniciado (cada ${CHARGE_CHECK_INTERVAL / 1e3}s)`);
  }
  function stopChargeMonitoring() {
    if (chargeMonitorInterval) {
      window.clearInterval(chargeMonitorInterval);
      chargeMonitorInterval = null;
      log(`\u23F9\uFE0F Monitoreo de cargas detenido`);
    }
  }
  async function ensureSufficientCharges(requiredCharges, onProgress) {
    const sessionResult = await getSession();
    if (sessionResult.success) {
      const availableCharges = Math.floor(sessionResult.data.charges);
      imageState.currentCharges = sessionResult.data.charges;
      imageState.maxCharges = sessionResult.data.maxCharges;
      if (availableCharges < requiredCharges) {
        log(`\u23F3 Cargas insuficientes: ${availableCharges}/${requiredCharges}. Esperando...`);
        await waitForCooldown(requiredCharges - availableCharges, onProgress);
        return await ensureSufficientCharges(requiredCharges, onProgress);
      }
      return true;
    }
    log(`\u26A0\uFE0F No se pudo verificar cargas, continuando con valor cached: ${imageState.currentCharges}`);
    return imageState.currentCharges >= requiredCharges;
  }
  async function getTileImageForVerification(tileX, tileY) {
    try {
      const url = `https://backend.wplace.live/files/s0/tiles/${tileX}/${tileY}.png`;
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      return await response.blob();
    } catch (error) {
      log(`Error obteniendo tile para verificaci\xF3n ${tileX},${tileY}:`, error);
      return null;
    }
  }
  async function filterPixelsThatNeedPainting(initialBatch, targetBatchSize = null) {
    const desiredBatchSize = targetBatchSize || initialBatch.length;
    let currentBatch = [...initialBatch];
    let filteredBatch = [];
    let totalSkippedCount = 0;
    let iterations = 0;
    const maxIterations = 3;
    log(`\u{1F50D} Iniciando verificaci\xF3n inteligente para lote de ${desiredBatchSize} p\xEDxeles`);
    while (filteredBatch.length < desiredBatchSize && currentBatch.length > 0 && iterations < maxIterations) {
      iterations++;
      log(`\u{1F504} Iteraci\xF3n ${iterations}: verificando ${currentBatch.length} p\xEDxeles`);
      const verificationResult = await verifyPixelBatch(currentBatch);
      const newValidPixels = verificationResult.filteredBatch;
      const skippedInThisIteration = verificationResult.skippedCount;
      filteredBatch.push(...newValidPixels);
      totalSkippedCount += skippedInThisIteration;
      log(`\u2705 Iteraci\xF3n ${iterations}: ${newValidPixels.length} p\xEDxeles v\xE1lidos, ${skippedInThisIteration} omitidos`);
      if (filteredBatch.length >= desiredBatchSize) {
        filteredBatch = filteredBatch.slice(0, desiredBatchSize);
        break;
      }
      const pixelsNeeded = desiredBatchSize - filteredBatch.length;
      if (pixelsNeeded > 0 && imageState.remainingPixels.length > 0) {
        const additionalPixels = imageState.remainingPixels.splice(0, pixelsNeeded);
        currentBatch = additionalPixels;
        log(`\u{1F504} Necesitamos ${pixelsNeeded} p\xEDxeles m\xE1s, tomando ${additionalPixels.length} adicionales`);
      } else {
        break;
      }
    }
    log(`\u{1F3AF} Verificaci\xF3n completada: ${filteredBatch.length}/${desiredBatchSize} p\xEDxeles v\xE1lidos, ${totalSkippedCount} omitidos en ${iterations} iteraciones`);
    return {
      filteredBatch,
      skippedCount: totalSkippedCount,
      iterations
    };
  }
  async function verifyPixelBatch(batch) {
    const pixelsByTile = /* @__PURE__ */ new Map();
    for (const pixel of batch) {
      const tileKey = `${pixel.tileX},${pixel.tileY}`;
      if (!pixelsByTile.has(tileKey)) {
        pixelsByTile.set(tileKey, []);
      }
      pixelsByTile.get(tileKey).push(pixel);
    }
    const filteredBatch = [];
    const skippedPixels = [];
    let skippedCount = 0;
    for (const [tileKey, tilePixels] of pixelsByTile) {
      const [tileX, tileY] = tileKey.split(",").map(Number);
      try {
        const tileBlob = await getTileImageForVerification(tileX, tileY);
        if (!tileBlob) {
          filteredBatch.push(...tilePixels);
          continue;
        }
        const img = new window.Image();
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        let objectUrl = null;
        try {
          objectUrl = window.URL.createObjectURL(tileBlob);
          await new Promise((resolve, reject) => {
            img.onload = () => {
              try {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                for (const pixel of tilePixels) {
                  if (pixel.localX >= 0 && pixel.localX < canvas.width && pixel.localY >= 0 && pixel.localY < canvas.height) {
                    const pixelIndex = (pixel.localY * canvas.width + pixel.localX) * 4;
                    const currentR = imageData.data[pixelIndex];
                    const currentG = imageData.data[pixelIndex + 1];
                    const currentB = imageData.data[pixelIndex + 2];
                    const targetColor = pixel.color;
                    const isCorrectColor = currentR === targetColor.r && currentG === targetColor.g && currentB === targetColor.b;
                    if (isCorrectColor) {
                      skippedCount++;
                      skippedPixels.push(pixel);
                      log(`\u{1F4A1} P\xEDxel ya correcto: (${pixel.localX},${pixel.localY}) en tile (${tileX},${tileY}) - RGB actual EXACTO`);
                    } else {
                      log(`\u{1F3AF} P\xEDxel necesita pintura: (${pixel.localX},${pixel.localY}) en tile (${tileX},${tileY}) - RGB actual != objetivo`);
                      filteredBatch.push(pixel);
                    }
                  } else {
                    log(`\u26A0\uFE0F P\xEDxel fuera del tile: (${pixel.localX},${pixel.localY}) en tile (${tileX},${tileY}) de tama\xF1o ${canvas.width}x${canvas.height}`);
                    filteredBatch.push(pixel);
                  }
                }
                resolve();
              } catch (error) {
                reject(error);
              }
            };
            img.onerror = (error) => {
              log(`Error cargando imagen del tile ${tileKey}:`, error);
              filteredBatch.push(...tilePixels);
              resolve();
            };
            img.src = objectUrl;
          });
        } finally {
          if (objectUrl) {
            window.URL.revokeObjectURL(objectUrl);
          }
          canvas.width = 0;
          canvas.height = 0;
        }
      } catch (error) {
        log(`Error verificando tile ${tileKey}:`, error);
        filteredBatch.push(...tilePixels);
      }
    }
    return { filteredBatch, skippedCount, skippedPixels };
  }
  async function revalidateAndTopUpBatch(selectedBatch, targetBatchSize) {
    log(`\u{1F50E} Revalidaci\xF3n final del lote (objetivo: ${targetBatchSize})`);
    const { filteredBatch, skippedCount } = await verifyPixelBatch(selectedBatch);
    let finalBatch = [...filteredBatch];
    let totalSkipped = skippedCount;
    if (finalBatch.length < targetBatchSize && imageState.remainingPixels.length > 0) {
      const need = Math.min(targetBatchSize - finalBatch.length, imageState.remainingPixels.length);
      const candidates = imageState.remainingPixels.splice(0, need);
      const topUp = await verifyPixelBatch(candidates);
      finalBatch.push(...topUp.filteredBatch);
      totalSkipped += topUp.skippedCount;
      log(`\u{1F501} Relleno final: +${topUp.filteredBatch.length} v\xE1lidos, ${topUp.skippedCount} omitidos`);
    }
    log(`\u2705 Revalidaci\xF3n final completada: ${finalBatch.length}/${targetBatchSize} para pintar`);
    return { finalBatch, skippedAdded: totalSkipped };
  }
  async function prevalidateAllPixelsOnStart(onProgress) {
    try {
      if (imageState.__prevalidated) {
        return;
      }
      if (!imageState.smartVerification) {
        imageState.__prevalidated = true;
        return;
      }
      if (!imageState.remainingPixels || imageState.remainingPixels.length === 0) {
        imageState.__prevalidated = true;
        return;
      }
      log(`\u{1F4F8} Iniciando prevalidaci\xF3n inicial de ${imageState.remainingPixels.length} p\xEDxeles (instant\xE1nea por tiles)`);
      const pixelsByTile = /* @__PURE__ */ new Map();
      for (const p of imageState.remainingPixels) {
        if (!p) continue;
        const k = `${p.tileX},${p.tileY}`;
        if (!pixelsByTile.has(k)) pixelsByTile.set(k, []);
        pixelsByTile.get(k).push(p);
      }
      let matchedCount = 0;
      const stillNeeded = [];
      for (const [tileKey, tilePixels] of pixelsByTile) {
        const [tileX, tileY] = tileKey.split(",").map(Number);
        try {
          const tileBlob = await getTileImageForVerification(tileX, tileY);
          if (!tileBlob) {
            stillNeeded.push(...tilePixels);
            continue;
          }
          const img = new window.Image();
          const canvas = document.createElement("canvas");
          const ctx = canvas.getContext("2d");
          let objectUrl = null;
          try {
            objectUrl = window.URL.createObjectURL(tileBlob);
            await new Promise((resolve, reject) => {
              img.onload = () => resolve();
              img.onerror = (e) => reject(e);
              img.src = objectUrl;
            });
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
            for (const pixel of tilePixels) {
              const lx = pixel.localX;
              const ly = pixel.localY;
              if (lx >= 0 && lx < canvas.width && ly >= 0 && ly < canvas.height) {
                const idx = (ly * canvas.width + lx) * 4;
                const r = data[idx];
                const g = data[idx + 1];
                const b = data[idx + 2];
                const target = pixel.color;
                const isCorrect = r === target.r && g === target.g && b === target.b;
                if (isCorrect) {
                  matchedCount++;
                  if (imageState.protectionEnabled) {
                    const key = `${pixel.imageX},${pixel.imageY}`;
                    imageState.drawnPixelsMap.set(key, {
                      imageX: pixel.imageX,
                      imageY: pixel.imageY,
                      localX: pixel.localX,
                      localY: pixel.localY,
                      tileX: pixel.tileX,
                      tileY: pixel.tileY,
                      color: pixel.color,
                      paintedAt: Date.now(),
                      skipped: true
                    });
                  }
                } else {
                  stillNeeded.push(pixel);
                }
              } else {
                stillNeeded.push(pixel);
              }
            }
          } finally {
            if (objectUrl) window.URL.revokeObjectURL(objectUrl);
            canvas.width = 0;
            canvas.height = 0;
          }
        } catch (error) {
          log(`\u26A0\uFE0F Error prevalidando tile ${tileKey}:`, error);
          stillNeeded.push(...tilePixels);
        }
      }
      const prevLen = imageState.remainingPixels.length;
      if (matchedCount > 0) {
        imageState.paintedPixels += matchedCount;
        imageState.remainingPixels = stillNeeded;
        log(`\u2705 Prevalidaci\xF3n inicial completada: ${matchedCount} ya correctos de ${prevLen}. Restantes: ${stillNeeded.length}`);
        if (onProgress && imageState.totalPixels > 0) {
          const percentage = Math.round(imageState.paintedPixels / imageState.totalPixels * 100);
          onProgress(imageState.paintedPixels, imageState.totalPixels, `\u{1F4A1} ${matchedCount} p\xEDxeles ya correctos al inicio - Progreso: ${percentage}%`);
        }
      } else {
        log(`\u2139\uFE0F Prevalidaci\xF3n inicial: no se encontraron p\xEDxeles ya correctos`);
      }
      imageState.__prevalidated = true;
    } catch (err) {
      log("\u26A0\uFE0F Error en prevalidaci\xF3n inicial:", err);
    }
  }
  async function processImage(imageData, startPosition, onProgress, onComplete, onError) {
    const { width, height } = imageData;
    const { x: localStartX, y: localStartY } = startPosition;
    log(`Iniciando pintado: imagen(${width}x${height}) inicio LOCAL(${localStartX},${localStartY}) tile(${imageState.tileX},${imageState.tileY})`);
    log(`\u{1F6E1}\uFE0F Protecci\xF3n: ${imageState.protectionEnabled ? "habilitada" : "deshabilitada"}, Patr\xF3n: ${imageState.paintPattern}`);
    startChargeMonitoring();
    try {
      log("\u{1F511} Generando token Turnstile al inicio del proceso...");
      const initialToken = await ensureToken();
      if (!initialToken) {
        log("\u26A0\uFE0F No se pudo generar token inicial, continuando con flujo normal");
      } else {
        log("\u2705 Token inicial generado exitosamente");
      }
    } catch (error) {
      log("\u26A0\uFE0F Error generando token inicial:", error.message);
    }
    if (!imageState.remainingPixels || imageState.remainingPixels.length === 0 || imageState.lastPosition.x === 0 && imageState.lastPosition.y === 0) {
      log("Generando cola de p\xEDxeles...");
      imageState.remainingPixels = generatePixelQueue(imageData, startPosition, imageState.tileX, imageState.tileY);
      if (imageState.paintPattern && imageState.paintPattern !== "linear_start") {
        log(`\u{1F3A8} Aplicando patr\xF3n de pintado: ${imageState.paintPattern}`);
        imageState.remainingPixels = applyPaintPattern(imageState.remainingPixels, imageState.paintPattern, imageData);
      }
      if (imageState.lastPosition.x > 0 || imageState.lastPosition.y > 0) {
        imageState.remainingPixels = imageState.remainingPixels.filter((pixel) => {
          const pixelIndex = pixel.imageY * width + pixel.imageX;
          const lastIndex = imageState.lastPosition.y * width + imageState.lastPosition.x;
          return pixelIndex >= lastIndex;
        });
      }
      imageState.__prevalidated = false;
      await prevalidateAllPixelsOnStart(onProgress);
      log(`Cola generada: ${imageState.remainingPixels.length} p\xEDxeles pendientes`);
      try {
        if (window.__WPA_PLAN_OVERLAY__) {
          window.__WPA_PLAN_OVERLAY__.injectStyles();
          window.__WPA_PLAN_OVERLAY__.setEnabled(true);
          if (imageState.startPosition && imageState.tileX !== void 0 && imageState.tileY !== void 0) {
            window.__WPA_PLAN_OVERLAY__.setAnchor({
              tileX: imageState.tileX,
              tileY: imageState.tileY,
              pxX: imageState.startPosition.x,
              pxY: imageState.startPosition.y
            });
          }
          window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
            enabled: true,
            nextBatchCount: imageState.pixelsPerBatch
          });
        }
      } catch (e) {
        log("\u26A0\uFE0F Error actualizando plan overlay:", e);
      }
    }
    await prevalidateAllPixelsOnStart(onProgress);
    try {
      while (imageState.remainingPixels.length > 0 && !imageState.stopFlag) {
        if (imageState.protectionEnabled && imageState.paintedPixels > 0) {
          try {
            const protectionResult = await protectBeforeNextBatch(onProgress);
            if (!protectionResult.canContinue) {
              if (protectionResult.reason === "no_charges_for_protection") {
                log(`\u{1F6E1}\uFE0F No hay cargas suficientes para proteger ${protectionResult.changesCount} p\xEDxeles alterados, esperando...`);
                if (onProgress) {
                  onProgress(
                    imageState.paintedPixels,
                    imageState.totalPixels,
                    `\u{1F6E1}\uFE0F Protegiendo dibujo: esperando cargas para reparar ${protectionResult.changesCount} p\xEDxeles alterados...`
                  );
                }
                await waitForCooldown(Math.min(protectionResult.changesCount, 20), onProgress);
                continue;
              }
            } else if (protectionResult.needsProtection) {
              if (protectionResult.reason === "protection_completed") {
                log(`\u{1F6E1}\uFE0F Protecci\xF3n completada: ${protectionResult.repairedCount} p\xEDxeles reparados`);
                imageState.currentCharges = protectionResult.remainingCharges || imageState.currentCharges;
              } else if (protectionResult.reason === "protection_failed") {
                log(`\u26A0\uFE0F Protecci\xF3n fall\xF3, continuando con advertencia (${protectionResult.changesCount} cambios no reparados)`);
              }
            }
          } catch (protectionError) {
            log("\u274C Error en protecci\xF3n:", protectionError);
          }
        }
        let availableCharges = Math.floor(imageState.currentCharges);
        let pixelsPerBatch;
        log(`\u{1F50D} Estado del primer lote - isFirstBatch: ${imageState.isFirstBatch}, useAllChargesFirst: ${imageState.useAllChargesFirst}, availableCharges: ${availableCharges}`);
        if (imageState.isFirstBatch && imageState.useAllChargesFirst && availableCharges > 0) {
          pixelsPerBatch = Math.min(availableCharges, imageState.remainingPixels.length);
          imageState.isFirstBatch = false;
          log(`\u{1F680} Primera pasada: usando ${pixelsPerBatch} cargas de ${availableCharges} disponibles`);
        } else {
          pixelsPerBatch = Math.min(imageState.pixelsPerBatch, imageState.remainingPixels.length);
          log(`\u2699\uFE0F Pasada normal: usando ${pixelsPerBatch} p\xEDxeles (configurado: ${imageState.pixelsPerBatch})`);
        }
        const hasEnoughCharges = await ensureSufficientCharges(pixelsPerBatch, onProgress);
        if (!hasEnoughCharges) {
          log(`\u26A0\uFE0F No se pudieron obtener suficientes cargas, pausando pintado`);
          break;
        }
        availableCharges = Math.floor(imageState.currentCharges);
        const initialBatch = imageState.remainingPixels.splice(0, pixelsPerBatch);
        let batch = initialBatch;
        let skippedCount = 0;
        log(`Verificando lote de ${initialBatch.length} p\xEDxeles...`);
        if (imageState.smartVerification) {
          const verificationResult = await filterPixelsThatNeedPainting(initialBatch, pixelsPerBatch);
          batch = verificationResult.filteredBatch;
          skippedCount = verificationResult.skippedCount;
          if (batch.length === 0) {
            log(`\u{1F4A1} Todos los p\xEDxeles del lote ya ten\xEDan el color correcto. Continuando al siguiente lote.`);
            imageState.paintedPixels += skippedCount;
            if (onProgress) {
              const percentage = Math.round(imageState.paintedPixels / imageState.totalPixels * 100);
              onProgress(
                imageState.paintedPixels,
                imageState.totalPixels,
                `\u{1F4A1} ${skippedCount} p\xEDxeles ya correctos - Progreso: ${percentage}%`
              );
            }
            continue;
          }
          log(`\u{1F3AF} Lote inteligente completado: ${batch.length} p\xEDxeles para pintar (${skippedCount} omitidos, ${verificationResult.iterations} iteraciones)`);
        } else {
          log(`Pintando lote de ${batch.length} p\xEDxeles...`);
        }
        try {
          const beforeLen = batch.length;
          const { finalBatch, skippedAdded } = await revalidateAndTopUpBatch(batch, pixelsPerBatch);
          if (skippedAdded > 0) {
            skippedCount += skippedAdded;
            log(`\u{1F50E} Revalidaci\xF3n final: ${beforeLen} -> ${finalBatch.length} p\xEDxeles; ${skippedAdded} omitidos adicionales`);
          }
          batch = finalBatch;
          if (batch.length === 0) {
            log(`\u{1F4A1} Todos los p\xEDxeles del lote quedaron correctos tras la revalidaci\xF3n final. Continuando...`);
            imageState.paintedPixels += skippedCount;
            if (onProgress) {
              const percentage = Math.round(imageState.paintedPixels / imageState.totalPixels * 100);
              onProgress(
                imageState.paintedPixels,
                imageState.totalPixels,
                `\u{1F4A1} ${skippedCount} p\xEDxeles ya correctos - Progreso: ${percentage}%`
              );
            }
            continue;
          }
        } catch (e) {
          log(`\u26A0\uFE0F Error en revalidaci\xF3n final del lote:`, e);
        }
        try {
          if (window.__WPA_PLAN_OVERLAY__) {
            window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
              enabled: true,
              // Mantener habilitado
              nextBatchCount: imageState.pixelsPerBatch
            });
          }
        } catch (e) {
          log("\u26A0\uFE0F Error actualizando plan overlay durante pintado:", e);
        }
        const result = await paintPixelBatchWithRetry(batch, onProgress);
        if (result.success && result.painted > 0) {
          imageState.paintedPixels += result.painted + skippedCount;
          if (imageState.protectionEnabled) {
            for (const pixel of batch.slice(0, result.painted)) {
              const key = `${pixel.imageX},${pixel.imageY}`;
              imageState.drawnPixelsMap.set(key, {
                imageX: pixel.imageX,
                imageY: pixel.imageY,
                localX: pixel.localX,
                localY: pixel.localY,
                tileX: pixel.tileX,
                tileY: pixel.tileY,
                color: pixel.color,
                paintedAt: Date.now()
              });
            }
            if (imageState.smartVerification && skippedCount > 0) {
              const skippedPixels = initialBatch.filter((ip) => !batch.some(
                (bp) => bp.imageX === ip.imageX && bp.imageY === ip.imageY
              ));
              for (const pixel of skippedPixels) {
                const key = `${pixel.imageX},${pixel.imageY}`;
                imageState.drawnPixelsMap.set(key, {
                  imageX: pixel.imageX,
                  imageY: pixel.imageY,
                  localX: pixel.localX,
                  localY: pixel.localY,
                  tileX: pixel.tileX,
                  tileY: pixel.tileY,
                  color: pixel.color,
                  paintedAt: Date.now(),
                  skipped: true
                  // Marcar como omitido por verificación inteligente/final
                });
              }
            }
          }
          imageState.currentCharges = Math.max(0, imageState.currentCharges - result.painted);
          log(`Cargas despu\xE9s del lote: ${imageState.currentCharges.toFixed(1)} (consumidas: ${result.painted})`);
          imageState.currentCharges = Math.max(0, imageState.currentCharges - result.painted);
          log(`Cargas despu\xE9s del lote: ${imageState.currentCharges.toFixed(1)} (consumidas: ${result.painted})`);
          if (batch.length > 0) {
            const lastPixel = batch[batch.length - 1];
            imageState.lastPosition = { x: lastPixel.imageX, y: lastPixel.imageY };
          }
          log(`Lote exitoso: ${result.painted}/${batch.length} p\xEDxeles pintados. Total: ${imageState.paintedPixels}/${imageState.totalPixels}`);
          const estimatedTime = calculateEstimatedTime();
          const progressPercent = (imageState.paintedPixels / imageState.totalPixels * 100).toFixed(1);
          const successMessage = t("image.passCompleted", {
            painted: result.painted,
            percent: progressPercent,
            current: imageState.paintedPixels,
            total: imageState.totalPixels
          });
          if (onProgress) {
            onProgress(imageState.paintedPixels, imageState.totalPixels, successMessage, estimatedTime);
          }
          await sleep(2e3);
        } else if (result.shouldContinue) {
          log(`Lote fall\xF3 despu\xE9s de todos los reintentos, continuando con siguiente lote...`);
        } else {
          imageState.remainingPixels.unshift(...batch);
          log(`Lote fall\xF3: reintentando en 5 segundos...`);
          await sleep(5e3);
        }
        await sleep(500);
      }
      if (imageState.stopFlag) {
        log(`Pintado pausado en p\xEDxel imagen(${imageState.lastPosition.x},${imageState.lastPosition.y})`);
        if (onComplete) {
          onComplete(false, imageState.paintedPixels);
        }
      } else {
        log(`Pintado completado: ${imageState.paintedPixels} p\xEDxeles pintados`);
        imageState.lastPosition = { x: 0, y: 0 };
        imageState.remainingPixels = [];
        stopChargeMonitoring();
        try {
          if (window.__WPA_PLAN_OVERLAY__) {
            window.__WPA_PLAN_OVERLAY__.setPlan([], {
              enabled: true,
              // Mantener habilitado pero sin píxeles
              nextBatchCount: 0
            });
            log("\u2705 Plan overlay limpiado al completar pintado");
          }
        } catch (e) {
          log("\u26A0\uFE0F Error limpiando plan overlay:", e);
        }
        if (onComplete) {
          onComplete(true, imageState.paintedPixels);
        }
      }
    } catch (error) {
      log("Error en proceso de pintado:", error);
      stopChargeMonitoring();
      if (onError) {
        onError(error);
      }
    }
  }
  async function paintPixelBatch(batch) {
    var _a;
    try {
      if (!batch || batch.length === 0) {
        return { success: false, painted: 0, error: "Lote vac\xEDo" };
      }
      const byTile = /* @__PURE__ */ new Map();
      for (const p of batch) {
        const key = `${p.tileX},${p.tileY}`;
        if (!byTile.has(key)) byTile.set(key, { coords: [], colors: [], tx: p.tileX, ty: p.tileY });
        const bucket = byTile.get(key);
        bucket.coords.push(p.localX, p.localY);
        bucket.colors.push(p.color.id || p.color.value || 1);
      }
      const token = await ensureToken();
      let totalPainted = 0;
      for (const { coords, colors, tx, ty } of byTile.values()) {
        if (colors.length === 0) continue;
        const sanitized = [];
        for (let i = 0; i < coords.length; i += 2) {
          const x = (Number(coords[i]) % 1e3 + 1e3) % 1e3;
          const y = (Number(coords[i + 1]) % 1e3 + 1e3) % 1e3;
          if (Number.isFinite(x) && Number.isFinite(y)) {
            sanitized.push(x, y);
          }
        }
        try {
          let minX = 999, maxX = 0, minY = 999, maxY = 0;
          for (let i = 0; i < sanitized.length; i += 2) {
            const x = sanitized[i], y = sanitized[i + 1];
            if (x < minX) minX = x;
            if (x > maxX) maxX = x;
            if (y < minY) minY = y;
            if (y > maxY) maxY = y;
          }
          log(`[IMG] Enviando tile ${tx},${ty}: ${colors.length} px | x:[${minX},${maxX}] y:[${minY},${maxY}]`);
        } catch {
        }
        const resp = await postPixelBatchImage(tx, ty, sanitized, colors, token);
        if (resp.status !== 200) {
          return {
            success: false,
            painted: totalPainted,
            error: ((_a = resp.json) == null ? void 0 : _a.message) || `HTTP ${resp.status}`,
            status: resp.status
          };
        }
        const actualPainted = resp.painted || 0;
        if (actualPainted === 0 && colors.length > 0) {
          log(`\u26A0\uFE0F API devolvi\xF3 200 OK pero painted=0 para ${colors.length} p\xEDxeles en tile ${tx},${ty}`);
          return {
            success: false,
            painted: totalPainted,
            error: `API devolvi\xF3 painted=0 para ${colors.length} p\xEDxeles`,
            status: 200,
            shouldRetry: true
          };
        }
        totalPainted += actualPainted;
        log(`\u2705 Tile ${tx},${ty}: ${actualPainted}/${colors.length} p\xEDxeles pintados exitosamente`);
      }
      return { success: true, painted: totalPainted };
    } catch (error) {
      log("Error en paintPixelBatch:", error);
      return {
        success: false,
        painted: 0,
        error: error.message
      };
    }
  }
  async function paintPixelBatchWithRetry(batch, onProgress) {
    const maxAttempts = 5;
    const baseDelay = 3e3;
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const result = await paintPixelBatch(batch);
        if (result.success) {
          imageState.retryCount = 0;
          return result;
        }
        imageState.retryCount = attempt;
        if (attempt < maxAttempts) {
          const delay = baseDelay * Math.pow(2, attempt - 1);
          const delaySeconds = Math.round(delay / 1e3);
          let errorMessage;
          if (result.status === 0 || result.status === "NetworkError") {
            errorMessage = t("image.networkError");
          } else if (result.status >= 500) {
            errorMessage = t("image.serverError");
          } else if (result.status === 408) {
            errorMessage = t("image.timeoutError");
          } else {
            errorMessage = t("image.retryAttempt", {
              attempt,
              maxAttempts,
              delay: delaySeconds
            });
          }
          if (onProgress) {
            onProgress(imageState.paintedPixels, imageState.totalPixels, errorMessage);
          }
          log(`Reintento ${attempt}/${maxAttempts} despu\xE9s de ${delaySeconds}s. Error: ${result.error}`);
          await sleep(delay);
        }
      } catch (error) {
        log(`Error en intento ${attempt}:`, error);
        imageState.retryCount = attempt;
        if (attempt < maxAttempts) {
          const delay = baseDelay * Math.pow(2, attempt - 1);
          const delaySeconds = Math.round(delay / 1e3);
          const errorMessage = t("image.retryError", {
            attempt,
            maxAttempts,
            delay: delaySeconds
          });
          if (onProgress) {
            onProgress(imageState.paintedPixels, imageState.totalPixels, errorMessage);
          }
          await sleep(delay);
        }
      }
    }
    imageState.retryCount = maxAttempts;
    const failMessage = t("image.retryFailed", { maxAttempts });
    if (onProgress) {
      onProgress(imageState.paintedPixels, imageState.totalPixels, failMessage);
    }
    log(`Fall\xF3 despu\xE9s de ${maxAttempts} intentos, continuando con siguiente lote`);
    return {
      success: false,
      painted: 0,
      error: `Fall\xF3 despu\xE9s de ${maxAttempts} intentos`,
      shouldContinue: true
      // Indica que debe continuar con el siguiente lote
    };
  }
  async function waitForCooldown(chargesNeeded, onProgress) {
    const chargeTime = IMAGE_DEFAULTS.CHARGE_REGEN_MS * chargesNeeded;
    const waitTime = chargeTime + 5e3;
    log(`Esperando ${Math.round(waitTime / 1e3)}s para obtener ${chargesNeeded} cargas`);
    imageState.inCooldown = true;
    imageState.cooldownEndTime = Date.now() + waitTime;
    imageState.nextBatchCooldown = Math.round(waitTime / 1e3);
    if (onProgress) {
      const minutes = Math.floor(waitTime / 6e4);
      const seconds = Math.floor(waitTime % 6e4 / 1e3);
      const timeText = minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;
      const message = t("image.waitingChargesRegen", {
        current: Math.floor(imageState.currentCharges),
        needed: chargesNeeded,
        time: timeText
      });
      onProgress(imageState.paintedPixels, imageState.totalPixels, message);
    }
    for (let i = Math.round(waitTime / 1e3); i > 0; i--) {
      if (imageState.stopFlag) break;
      imageState.nextBatchCooldown = i;
      if (onProgress && (i % 5 === 0 || i <= 10 || i === Math.round(waitTime / 1e3))) {
        const minutes = Math.floor(i / 60);
        const seconds = i % 60;
        const timeText = minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;
        const message = t("image.waitingChargesCountdown", {
          current: Math.floor(imageState.currentCharges),
          needed: chargesNeeded,
          time: timeText
        });
        onProgress(imageState.paintedPixels, imageState.totalPixels, message);
      }
      await sleep(1e3);
    }
    imageState.inCooldown = false;
    imageState.nextBatchCooldown = 0;
    imageState.currentCharges = Math.min(
      imageState.maxCharges || 9999,
      // usar maxCharges del estado
      imageState.currentCharges + waitTime / IMAGE_DEFAULTS.CHARGE_REGEN_MS
    );
  }
  function generatePixelQueue(imageData, startPosition, baseTileX, baseTileY) {
    const { pixels } = imageData;
    const { x: localStartX, y: localStartY } = startPosition;
    const queue = [];
    if (!Array.isArray(pixels)) {
      log(`\u274C Error: pixels no es un array iterable. Tipo: ${typeof pixels}`, pixels);
      return [];
    }
    for (const pixelData of pixels) {
      if (!pixelData) continue;
      const pixelX = pixelData.imageX !== void 0 ? pixelData.imageX : pixelData.x;
      const pixelY = pixelData.imageY !== void 0 ? pixelData.imageY : pixelData.y;
      const pixelColor = pixelData.color !== void 0 ? pixelData.color : pixelData.targetColor;
      if (pixelX === void 0 || pixelY === void 0) {
        log(`\u26A0\uFE0F P\xEDxel con coordenadas inv\xE1lidas:`, pixelData);
        continue;
      }
      const globalX = localStartX + pixelX;
      const globalY = localStartY + pixelY;
      const tileOffsetX = Math.floor(globalX / 1e3);
      const tileOffsetY = Math.floor(globalY / 1e3);
      const tx = baseTileX + tileOffsetX;
      const ty = baseTileY + tileOffsetY;
      const localX = (globalX % 1e3 + 1e3) % 1e3;
      const localY = (globalY % 1e3 + 1e3) % 1e3;
      queue.push({
        imageX: pixelX,
        imageY: pixelY,
        localX,
        localY,
        tileX: tx,
        tileY: ty,
        color: pixelColor,
        originalColor: pixelData.originalColor
      });
    }
    log(`Cola de p\xEDxeles generada: ${queue.length} p\xEDxeles para pintar`);
    return queue;
  }
  function calculateEstimatedTime() {
    if (!imageState.remainingPixels || imageState.remainingPixels.length === 0) {
      return 0;
    }
    const remainingPixels = imageState.remainingPixels.length;
    const batchSize = imageState.pixelsPerBatch;
    const chargeRegenTime = IMAGE_DEFAULTS.CHARGE_REGEN_MS / 1e3;
    const batchesNeeded = Math.ceil(remainingPixels / batchSize);
    const waitTimeBetweenBatches = batchSize * chargeRegenTime;
    const totalWaitTime = (batchesNeeded - 1) * waitTimeBetweenBatches;
    const executionTime = batchesNeeded * 2;
    return Math.ceil(totalWaitTime + executionTime);
  }
  function stopPainting() {
    imageState.stopFlag = true;
    imageState.running = false;
    stopChargeMonitoring();
    log("\u{1F6D1} Deteniendo proceso de pintado...");
  }

  // src/image/index.js
  init_save_load();

  // src/image/ui.js
  init_logger();

  // src/core/ui-utils.js
  function createShadowRoot(hostId = null) {
    const host = document.createElement("div");
    if (hostId) {
      host.id = hostId;
    }
    host.style.cssText = `
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 2147483647;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  `;
    const root = host.attachShadow({ mode: "open" });
    document.body.appendChild(host);
    return { host, root };
  }
  function makeDraggable(dragHandle, element) {
    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
    dragHandle.style.cursor = "move";
    dragHandle.addEventListener("mousedown", dragMouseDown);
    function dragMouseDown(e) {
      if (e.target.closest(".header-btn, .wplace-header-btn")) return;
      e.preventDefault();
      pos3 = e.clientX;
      pos4 = e.clientY;
      document.addEventListener("mouseup", closeDragElement);
      document.addEventListener("mousemove", elementDrag);
    }
    function elementDrag(e) {
      e.preventDefault();
      pos1 = pos3 - e.clientX;
      pos2 = pos4 - e.clientY;
      pos3 = e.clientX;
      pos4 = e.clientY;
      element.style.top = element.offsetTop - pos2 + "px";
      element.style.left = element.offsetLeft - pos1 + "px";
    }
    function closeDragElement() {
      document.removeEventListener("mouseup", closeDragElement);
      document.removeEventListener("mousemove", elementDrag);
    }
  }

  // src/log_window/log-window.js
  init_logger();
  var LogWindow = class {
    constructor(botName = "Bot") {
      this.botName = botName;
      this.isVisible = false;
      this.logs = [];
      this.maxLogs = 1e3;
      this.container = null;
      this.logContent = null;
      this.isResizing = false;
      this.resizeHandle = null;
      this.originalConsole = {};
      this.config = {
        width: 600,
        height: 400,
        x: window.innerWidth - 620,
        y: 20,
        visible: false
      };
      this.loadConfig();
      this.createWindow();
      this.setupLogInterception();
      this.setupEventListeners();
    }
    /**
     * Carga la configuración guardada del localStorage
     */
    loadConfig() {
      try {
        const saved = localStorage.getItem(`wplace-log-window-${this.botName}`);
        if (saved) {
          this.config = { ...this.config, ...JSON.parse(saved) };
        }
      } catch (error) {
        log("Error cargando configuraci\xF3n de ventana de logs:", error);
      }
    }
    /**
     * Guarda la configuración actual en localStorage
     */
    saveConfig() {
      try {
        localStorage.setItem(`wplace-log-window-${this.botName}`, JSON.stringify(this.config));
      } catch (error) {
        log("Error guardando configuraci\xF3n de ventana de logs:", error);
      }
    }
    /**
     * Crea la estructura HTML de la ventana
     */
    createWindow() {
      this.container = document.createElement("div");
      this.container.className = "wplace-log-window";
      this.container.style.cssText = `
      position: fixed;
      left: ${this.config.x}px;
      top: ${this.config.y}px;
      width: ${this.config.width}px;
      height: ${this.config.height}px;
      background: rgba(0, 0, 0, 0.9);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      z-index: 100001;
      display: ${this.config.visible ? "flex" : "none"};
      flex-direction: column;
      backdrop-filter: blur(10px);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      color: #fff;
      resize: none;
      overflow: hidden;
    `;
      const header = document.createElement("div");
      header.className = "log-window-header";
      header.style.cssText = `
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 12px;
      background: rgba(255, 255, 255, 0.1);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      cursor: move;
      user-select: none;
      border-radius: 7px 7px 0 0;
    `;
      const title = document.createElement("div");
      title.textContent = `\u{1F4CB} Logs - ${this.botName}`;
      title.style.cssText = `
      font-weight: bold;
      font-size: 14px;
      color: #e2e8f0;
    `;
      const controls = document.createElement("div");
      controls.style.cssText = `
      display: flex;
      gap: 8px;
    `;
      const downloadBtn = document.createElement("button");
      downloadBtn.innerHTML = "\u{1F4BE}";
      downloadBtn.title = "Descargar logs";
      downloadBtn.style.cssText = `
      background: rgba(34, 197, 94, 0.8);
      border: none;
      border-radius: 4px;
      color: white;
      width: 24px;
      height: 24px;
      cursor: pointer;
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background 0.2s;
    `;
      downloadBtn.addEventListener("mouseenter", () => {
        downloadBtn.style.background = "rgba(34, 197, 94, 1)";
      });
      downloadBtn.addEventListener("mouseleave", () => {
        downloadBtn.style.background = "rgba(34, 197, 94, 0.8)";
      });
      downloadBtn.addEventListener("click", () => this.downloadLogs());
      const closeBtn = document.createElement("button");
      closeBtn.innerHTML = "\u2715";
      closeBtn.title = "Cerrar ventana";
      closeBtn.style.cssText = `
      background: rgba(239, 68, 68, 0.8);
      border: none;
      border-radius: 4px;
      color: white;
      width: 24px;
      height: 24px;
      cursor: pointer;
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background 0.2s;
    `;
      closeBtn.addEventListener("mouseenter", () => {
        closeBtn.style.background = "rgba(239, 68, 68, 1)";
      });
      closeBtn.addEventListener("mouseleave", () => {
        closeBtn.style.background = "rgba(239, 68, 68, 0.8)";
      });
      closeBtn.addEventListener("click", () => this.hide());
      controls.appendChild(downloadBtn);
      controls.appendChild(closeBtn);
      header.appendChild(title);
      header.appendChild(controls);
      this.logContent = document.createElement("div");
      this.logContent.className = "log-window-content";
      this.logContent.style.cssText = `
      flex: 1;
      padding: 8px;
      overflow-y: auto;
      font-size: 12px;
      line-height: 1.4;
      white-space: pre-wrap;
      word-break: break-word;
    `;
      this.resizeHandle = document.createElement("div");
      this.resizeHandle.className = "log-window-resize-handle";
      this.resizeHandle.style.cssText = `
      position: absolute;
      bottom: 0;
      right: 0;
      width: 20px;
      height: 20px;
      cursor: se-resize;
      background: linear-gradient(-45deg, transparent 30%, rgba(255,255,255,0.3) 30%, rgba(255,255,255,0.3) 70%, transparent 70%);
      border-radius: 0 0 8px 0;
    `;
      this.container.appendChild(header);
      this.container.appendChild(this.logContent);
      this.container.appendChild(this.resizeHandle);
      document.body.appendChild(this.container);
      this.setupDragging(header);
      this.setupResizing();
      this.isVisible = this.config.visible;
    }
    /**
     * Configura el arrastre de la ventana
     */
    setupDragging(header) {
      let isDragging = false;
      let dragOffset = { x: 0, y: 0 };
      header.addEventListener("mousedown", (e) => {
        if (e.target.tagName === "BUTTON") return;
        isDragging = true;
        dragOffset.x = e.clientX - this.container.offsetLeft;
        dragOffset.y = e.clientY - this.container.offsetTop;
        document.addEventListener("mousemove", handleDrag);
        document.addEventListener("mouseup", stopDrag);
        e.preventDefault();
      });
      const handleDrag = (e) => {
        if (!isDragging) return;
        const newX = Math.max(0, Math.min(window.innerWidth - this.container.offsetWidth, e.clientX - dragOffset.x));
        const newY = Math.max(0, Math.min(window.innerHeight - this.container.offsetHeight, e.clientY - dragOffset.y));
        this.container.style.left = newX + "px";
        this.container.style.top = newY + "px";
        this.config.x = newX;
        this.config.y = newY;
      };
      const stopDrag = () => {
        isDragging = false;
        document.removeEventListener("mousemove", handleDrag);
        document.removeEventListener("mouseup", stopDrag);
        this.saveConfig();
      };
    }
    /**
     * Configura el redimensionamiento de la ventana
     */
    setupResizing() {
      let isResizing = false;
      let startX, startY, startWidth, startHeight;
      this.resizeHandle.addEventListener("mousedown", (e) => {
        isResizing = true;
        startX = e.clientX;
        startY = e.clientY;
        startWidth = parseInt(document.defaultView.getComputedStyle(this.container).width, 10);
        startHeight = parseInt(document.defaultView.getComputedStyle(this.container).height, 10);
        document.addEventListener("mousemove", handleResize);
        document.addEventListener("mouseup", stopResize);
        e.preventDefault();
      });
      const handleResize = (e) => {
        if (!isResizing) return;
        const newWidth = Math.max(300, startWidth + e.clientX - startX);
        const newHeight = Math.max(200, startHeight + e.clientY - startY);
        this.container.style.width = newWidth + "px";
        this.container.style.height = newHeight + "px";
        this.config.width = newWidth;
        this.config.height = newHeight;
      };
      const stopResize = () => {
        isResizing = false;
        document.removeEventListener("mousemove", handleResize);
        document.removeEventListener("mouseup", stopResize);
        this.saveConfig();
      };
    }
    /**
     * Configura la interceptación de logs de consola
     */
    setupLogInterception() {
      this.originalConsole = {
        log: console.log,
        info: console.info,
        warn: console.warn,
        error: console.error,
        debug: console.debug
      };
      console.log = (...args) => {
        this.originalConsole.log.apply(console, args);
        this.addLog("log", args);
      };
      console.info = (...args) => {
        this.originalConsole.info.apply(console, args);
        this.addLog("info", args);
      };
      console.warn = (...args) => {
        this.originalConsole.warn.apply(console, args);
        this.addLog("warn", args);
      };
      console.error = (...args) => {
        this.originalConsole.error.apply(console, args);
        this.addLog("error", args);
      };
      console.debug = (...args) => {
        this.originalConsole.debug.apply(console, args);
        this.addLog("debug", args);
      };
    }
    /**
     * Añade un log a la ventana
     */
    addLog(type, args) {
      const timestamp = (/* @__PURE__ */ new Date()).toLocaleTimeString();
      const message = args.map(
        (arg) => typeof arg === "object" ? JSON.stringify(arg, null, 2) : String(arg)
      ).join(" ");
      const logEntry = {
        timestamp,
        type,
        message,
        raw: args
      };
      this.logs.push(logEntry);
      if (this.logs.length > this.maxLogs) {
        this.logs.shift();
      }
      if (this.isVisible) {
        this.updateLogDisplay();
      }
    }
    /**
     * Actualiza la visualización de logs
     */
    updateLogDisplay() {
      if (!this.logContent) return;
      const logHtml = this.logs.map((entry) => {
        const color = this.getLogColor(entry.type);
        return `<div style="color: ${color}; margin-bottom: 2px;">[${entry.timestamp}] ${entry.message}</div>`;
      }).join("");
      this.logContent.innerHTML = logHtml;
      this.logContent.scrollTop = this.logContent.scrollHeight;
    }
    /**
     * Obtiene el color para cada tipo de log
     */
    getLogColor(type) {
      const colors = {
        log: "#e2e8f0",
        info: "#60a5fa",
        warn: "#fbbf24",
        error: "#f87171",
        debug: "#a78bfa"
      };
      return colors[type] || colors.log;
    }
    /**
     * Descarga los logs como archivo
     */
    downloadLogs() {
      const now = /* @__PURE__ */ new Date();
      const dateStr = now.toISOString().split("T")[0];
      const timeStr = now.toTimeString().split(" ")[0].replace(/:/g, "-");
      const filename = `log_${this.botName}_${dateStr}_${timeStr}.log`;
      const logText = this.logs.map(
        (entry) => `[${entry.timestamp}] [${entry.type.toUpperCase()}] ${entry.message}`
      ).join("\n");
      const blob = new Blob([logText], { type: "text/plain" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      log(`\u{1F4E5} Logs descargados como: ${filename}`);
    }
    /**
     * Muestra la ventana de logs
     */
    show() {
      if (this.container) {
        this.container.style.display = "flex";
        this.isVisible = true;
        this.config.visible = true;
        this.updateLogDisplay();
        this.saveConfig();
      }
    }
    /**
     * Oculta la ventana de logs
     */
    hide() {
      if (this.container) {
        this.container.style.display = "none";
        this.isVisible = false;
        this.config.visible = false;
        this.saveConfig();
      }
    }
    /**
     * Alterna la visibilidad de la ventana
     */
    toggle() {
      if (this.isVisible) {
        this.hide();
      } else {
        this.show();
      }
    }
    /**
     * Limpia todos los logs
     */
    clear() {
      this.logs = [];
      if (this.logContent) {
        this.logContent.innerHTML = "";
      }
    }
    /**
     * Configura los event listeners globales
     */
    setupEventListeners() {
      window.addEventListener("resize", () => {
        if (this.container) {
          const maxX = window.innerWidth - this.container.offsetWidth;
          const maxY = window.innerHeight - this.container.offsetHeight;
          if (this.config.x > maxX) {
            this.config.x = Math.max(0, maxX);
            this.container.style.left = this.config.x + "px";
          }
          if (this.config.y > maxY) {
            this.config.y = Math.max(0, maxY);
            this.container.style.top = this.config.y + "px";
          }
          this.saveConfig();
        }
      });
    }
    /**
     * Destruye la ventana y restaura console original
     */
    destroy() {
      if (this.originalConsole.log) {
        console.log = this.originalConsole.log;
        console.info = this.originalConsole.info;
        console.warn = this.originalConsole.warn;
        console.error = this.originalConsole.error;
        console.debug = this.originalConsole.debug;
      }
      if (this.container && this.container.parentNode) {
        this.container.parentNode.removeChild(this.container);
      }
      this.container = null;
      this.logContent = null;
      this.logs = [];
    }
  };
  window.__wplaceLogWindows = window.__wplaceLogWindows || {};
  function createLogWindow(botName) {
    if (!window.__wplaceLogWindows[botName]) {
      window.__wplaceLogWindows[botName] = new LogWindow(botName);
    }
    return window.__wplaceLogWindows[botName];
  }

  // src/image/painting-stats.js
  init_logger();

  // src/image/palette.js
  var COLOR_MAP = {
    0: { id: 1, name: "Black", rgb: { r: 0, g: 0, b: 0 } },
    1: { id: 2, name: "Dark Gray", rgb: { r: 60, g: 60, b: 60 } },
    2: { id: 3, name: "Gray", rgb: { r: 120, g: 120, b: 120 } },
    3: { id: 4, name: "Light Gray", rgb: { r: 210, g: 210, b: 210 } },
    4: { id: 5, name: "White", rgb: { r: 255, g: 255, b: 255 } },
    5: { id: 6, name: "Deep Red", rgb: { r: 96, g: 0, b: 24 } },
    6: { id: 7, name: "Red", rgb: { r: 237, g: 28, b: 36 } },
    7: { id: 8, name: "Orange", rgb: { r: 255, g: 127, b: 39 } },
    8: { id: 9, name: "Gold", rgb: { r: 246, g: 170, b: 9 } },
    9: { id: 10, name: "Yellow", rgb: { r: 249, g: 221, b: 59 } },
    10: { id: 11, name: "Light Yellow", rgb: { r: 255, g: 250, b: 188 } },
    11: { id: 12, name: "Dark Green", rgb: { r: 14, g: 185, b: 104 } },
    12: { id: 13, name: "Green", rgb: { r: 19, g: 230, b: 123 } },
    13: { id: 14, name: "Light Green", rgb: { r: 135, g: 255, b: 94 } },
    14: { id: 15, name: "Dark Teal", rgb: { r: 12, g: 129, b: 110 } },
    15: { id: 16, name: "Teal", rgb: { r: 16, g: 174, b: 166 } },
    16: { id: 17, name: "Light Teal", rgb: { r: 19, g: 225, b: 190 } },
    17: { id: 20, name: "Cyan", rgb: { r: 96, g: 247, b: 242 } },
    18: { id: 44, name: "Light Cyan", rgb: { r: 187, g: 250, b: 242 } },
    19: { id: 18, name: "Dark Blue", rgb: { r: 40, g: 80, b: 158 } },
    20: { id: 19, name: "Blue", rgb: { r: 64, g: 147, b: 228 } },
    21: { id: 21, name: "Indigo", rgb: { r: 107, g: 80, b: 246 } },
    22: { id: 22, name: "Light Indigo", rgb: { r: 153, g: 177, b: 251 } },
    23: { id: 23, name: "Dark Purple", rgb: { r: 120, g: 12, b: 153 } },
    24: { id: 24, name: "Purple", rgb: { r: 170, g: 56, b: 185 } },
    25: { id: 25, name: "Light Purple", rgb: { r: 224, g: 159, b: 249 } },
    26: { id: 26, name: "Dark Pink", rgb: { r: 203, g: 0, b: 122 } },
    27: { id: 27, name: "Pink", rgb: { r: 236, g: 31, b: 128 } },
    28: { id: 28, name: "Light Pink", rgb: { r: 243, g: 141, b: 169 } },
    29: { id: 29, name: "Dark Brown", rgb: { r: 104, g: 70, b: 52 } },
    30: { id: 30, name: "Brown", rgb: { r: 149, g: 104, b: 42 } },
    31: { id: 31, name: "Beige", rgb: { r: 248, g: 178, b: 119 } },
    32: { id: 52, name: "Light Beige", rgb: { r: 255, g: 197, b: 165 } },
    33: { id: 32, name: "Medium Gray", rgb: { r: 170, g: 170, b: 170 } },
    34: { id: 33, name: "Dark Red", rgb: { r: 165, g: 14, b: 30 } },
    35: { id: 34, name: "Light Red", rgb: { r: 250, g: 128, b: 114 } },
    36: { id: 35, name: "Dark Orange", rgb: { r: 228, g: 92, b: 26 } },
    37: { id: 37, name: "Dark Goldenrod", rgb: { r: 156, g: 132, b: 49 } },
    38: { id: 38, name: "Goldenrod", rgb: { r: 197, g: 173, b: 49 } },
    39: { id: 39, name: "Light Goldenrod", rgb: { r: 232, g: 212, b: 95 } },
    40: { id: 40, name: "Dark Olive", rgb: { r: 74, g: 107, b: 58 } },
    41: { id: 41, name: "Olive", rgb: { r: 90, g: 148, b: 74 } },
    42: { id: 42, name: "Light Olive", rgb: { r: 132, g: 197, b: 115 } },
    43: { id: 43, name: "Dark Cyan", rgb: { r: 15, g: 121, b: 159 } },
    44: { id: 45, name: "Light Blue", rgb: { r: 125, g: 199, b: 255 } },
    45: { id: 46, name: "Dark Indigo", rgb: { r: 77, g: 49, b: 184 } },
    46: { id: 47, name: "Dark Slate Blue", rgb: { r: 74, g: 66, b: 132 } },
    47: { id: 48, name: "Slate Blue", rgb: { r: 122, g: 113, b: 196 } },
    48: { id: 49, name: "Light Slate Blue", rgb: { r: 181, g: 174, b: 241 } },
    49: { id: 53, name: "Dark Peach", rgb: { r: 155, g: 82, b: 73 } },
    50: { id: 54, name: "Peach", rgb: { r: 209, g: 128, b: 120 } },
    51: { id: 55, name: "Light Peach", rgb: { r: 250, g: 182, b: 164 } },
    52: { id: 50, name: "Light Brown", rgb: { r: 219, g: 164, b: 99 } },
    53: { id: 56, name: "Dark Tan", rgb: { r: 123, g: 99, b: 82 } },
    54: { id: 57, name: "Tan", rgb: { r: 156, g: 132, b: 107 } },
    55: { id: 36, name: "Light Tan", rgb: { r: 214, g: 181, b: 148 } },
    56: { id: 51, name: "Dark Beige", rgb: { r: 209, g: 128, b: 81 } },
    57: { id: 61, name: "Dark Stone", rgb: { r: 109, g: 100, b: 63 } },
    58: { id: 62, name: "Stone", rgb: { r: 148, g: 140, b: 107 } },
    59: { id: 63, name: "Light Stone", rgb: { r: 205, g: 197, b: 158 } },
    60: { id: 58, name: "Dark Slate", rgb: { r: 51, g: 57, b: 65 } },
    61: { id: 59, name: "Slate", rgb: { r: 109, g: 117, b: 141 } },
    62: { id: 60, name: "Light Slate", rgb: { r: 179, g: 185, b: 209 } },
    63: { id: 0, name: "Transparent", rgb: null }
  };

  // src/image/painting-stats.js
  function createPaintingStatsWindow() {
    log("\u{1F4CA} Creando ventana de estad\xEDsticas de pintado");
    const { host, root } = createShadowRoot();
    const style = document.createElement("style");
    style.textContent = `
    @keyframes slideIn {
      from { transform: translateY(-20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    
    .stats-container {
      position: fixed;
      top: 60px;
      right: 20px;
      width: 380px;
      background: #1a1a1a;
      border: 1px solid #333;
      border-radius: 8px;
      padding: 0;
      box-shadow: 0 5px 15px rgba(0,0,0,0.5);
      z-index: 9997;
      font-family: 'Segoe UI', Roboto, sans-serif;
      color: #eee;
      animation: slideIn 0.4s ease-out;
      overflow: hidden;
      display: none;
    }
    
    .header {
      padding: 12px 15px;
      background: #2d3748;
      color: #60a5fa;
      font-size: 16px;
      font-weight: 600;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: move;
      user-select: none;
    }
    
    .header-title {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .header-controls {
      display: flex;
      gap: 10px;
    }
    
    .header-btn {
      background: none;
      border: none;
      color: #eee;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.2s;
      padding: 5px;
    }
    
    .header-btn:hover {
      opacity: 1;
    }
    
    .content {
      padding: 15px;
      max-height: 70vh;
      overflow-y: auto;
    }
    
    .stats-section {
      background: #2d3748;
      padding: 12px;
      border-radius: 6px;
      margin-bottom: 15px;
      border: 1px solid #3a4553;
    }
    
    .section-title {
      font-size: 14px;
      font-weight: 600;
      color: #60a5fa;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .stat-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 6px 0;
      font-size: 14px;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .stat-item:last-child {
      border-bottom: none;
    }
    
    .stat-label {
      display: flex;
      align-items: center;
      gap: 6px;
      opacity: 0.8;
    }
    
    .stat-value {
      font-weight: 600;
      color: #60a5fa;
    }
    
    .colors-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
      gap: 6px;
      margin-top: 10px;
    }
    
    .color-swatch {
      width: 40px;
      height: 40px;
      border-radius: 4px;
      border: 2px solid #333;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
      font-weight: bold;
      text-shadow: 1px 1px 1px rgba(0,0,0,0.8);
      position: relative;
      transition: all 0.2s;
      cursor: pointer;
    }
    
    .color-swatch:hover {
      transform: scale(1.1);
      border-color: #60a5fa;
    }
    
    .color-swatch.unavailable {
      opacity: 0.4;
      border-color: #666;
    }
    
    .color-info {
      position: absolute;
      bottom: -20px;
      left: 50%;
      transform: translateX(-50%);
      background: #000;
      color: #fff;
      padding: 2px 6px;
      border-radius: 4px;
      font-size: 10px;
      white-space: nowrap;
      opacity: 0;
      transition: opacity 0.2s;
      z-index: 1000;
    }
    
    .color-swatch:hover .color-info {
      opacity: 1;
    }
    
    .refresh-btn {
      background: #60a5fa;
      color: white;
      border: none;
      border-radius: 6px;
      padding: 8px 12px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.2s;
      font-size: 12px;
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .refresh-btn:hover {
      background: #4facfe;
      transform: translateY(-2px);
    }
    
    .refresh-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
    }
    
    .progress-bar {
      width: 100%;
      height: 8px;
      background: #333;
      border-radius: 4px;
      overflow: hidden;
      margin: 8px 0;
    }
    
    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #60a5fa, #4facfe);
      transition: width 0.3s;
      width: 0%;
    }
  `;
    root.appendChild(style);
    const container = document.createElement("div");
    container.className = "stats-container";
    container.innerHTML = `
    <div class="header">
      <div class="header-title">
        \u{1F4CA}
        <span>Painting Stats</span>
      </div>
      <div class="header-controls">
        <button class="header-btn refresh-btn-header" title="Actualizar estad\xEDsticas">
          \u{1F504}
        </button>
        <button class="header-btn close-btn" title="Cerrar">
          \u2715
        </button>
      </div>
    </div>
    <div class="content">
      <div class="stats-section">
        <div class="section-title">
          \u{1F464} Informaci\xF3n del Usuario
        </div>
        <div class="user-stats">
          <div class="stat-item">
            <div class="stat-label">Cargando estad\xEDsticas...</div>
          </div>
        </div>
      </div>
      
      <div class="stats-section">
        <div class="section-title">
          \u{1F3A8} Progreso de la Imagen
        </div>
        <div class="image-stats">
          <div class="stat-item">
            <div class="stat-label">No hay imagen cargada</div>
          </div>
        </div>
      </div>
      
      <div class="stats-section">
        <div class="section-title">
          \u{1F3A8} Colores Disponibles
          <button class="refresh-btn" style="margin-left: auto;">
            \u{1F504} Actualizar
          </button>
        </div>
        <div class="colors-stats">
          <div class="stat-item">
            <div class="stat-label">Abra la paleta de colores en el sitio</div>
          </div>
        </div>
      </div>
    </div>
  `;
    root.appendChild(container);
    const elements = {
      container,
      header: container.querySelector(".header"),
      refreshBtnHeader: container.querySelector(".refresh-btn-header"),
      closeBtn: container.querySelector(".close-btn"),
      userStats: container.querySelector(".user-stats"),
      imageStats: container.querySelector(".image-stats"),
      colorsStats: container.querySelector(".colors-stats"),
      refreshBtn: container.querySelector(".refresh-btn")
    };
    makeDraggable(elements.header, container);
    let visible = false;
    let refreshCallback = null;
    elements.closeBtn.addEventListener("click", () => {
      hide();
    });
    elements.refreshBtnHeader.addEventListener("click", () => {
      if (refreshCallback) {
        refreshCallback();
      }
    });
    elements.refreshBtn.addEventListener("click", () => {
      if (refreshCallback) {
        refreshCallback();
      }
    });
    function show() {
      container.style.display = "block";
      visible = true;
      log("\u{1F4CA} Ventana de estad\xEDsticas mostrada");
    }
    function hide() {
      container.style.display = "none";
      visible = false;
      log("\u{1F4CA} Ventana de estad\xEDsticas ocultada");
    }
    function toggle() {
      if (visible) {
        hide();
      } else {
        show();
      }
    }
    function updateUserStats(userInfo) {
      if (!userInfo) {
        elements.userStats.innerHTML = `
        <div class="stat-item">
          <div class="stat-label">\u274C No se pudo obtener informaci\xF3n del usuario</div>
        </div>
      `;
        return;
      }
      let statsHTML = "";
      if (userInfo.username) {
        statsHTML += `
        <div class="stat-item">
          <div class="stat-label">\u{1F464} Usuario</div>
          <div class="stat-value">${userInfo.username}</div>
        </div>
      `;
      }
      if (userInfo.charges !== void 0) {
        statsHTML += `
        <div class="stat-item">
          <div class="stat-label">\u26A1 Cargas</div>
          <div class="stat-value">${Math.floor(userInfo.charges)} / ${userInfo.maxCharges || "N/A"}</div>
        </div>
      `;
      }
      if (userInfo.pixels !== void 0) {
        statsHTML += `
        <div class="stat-item">
          <div class="stat-label">\u{1F533} P\xEDxeles Pintados</div>
          <div class="stat-value">${userInfo.pixels.toLocaleString()}</div>
        </div>
      `;
      }
      if (userInfo.cooldown !== void 0 && userInfo.cooldown > 0) {
        const minutes = Math.floor(userInfo.cooldown / 60);
        const seconds = userInfo.cooldown % 60;
        const timeStr = minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;
        statsHTML += `
        <div class="stat-item">
          <div class="stat-label">\u23F0 Cooldown</div>
          <div class="stat-value">${timeStr}</div>
        </div>
      `;
      }
      elements.userStats.innerHTML = statsHTML || `
      <div class="stat-item">
        <div class="stat-label">\u2139\uFE0F Informaci\xF3n no disponible</div>
      </div>
    `;
    }
    function updateImageStats(imageInfo) {
      if (!imageInfo || !imageInfo.loaded) {
        elements.imageStats.innerHTML = `
        <div class="stat-item">
          <div class="stat-label">\u{1F4F7} No hay imagen cargada</div>
        </div>
      `;
        return;
      }
      const progress = imageInfo.totalPixels > 0 ? Math.round(imageInfo.paintedPixels / imageInfo.totalPixels * 100) : 0;
      let statsHTML = `
      <div class="stat-item">
        <div class="stat-label">\u{1F4CA} Progreso</div>
        <div class="stat-value">${progress}%</div>
      </div>
      <div class="progress-bar">
        <div class="progress-fill" style="width: ${progress}%"></div>
      </div>
      <div class="stat-item">
        <div class="stat-label">\u{1F3A8} P\xEDxeles</div>
        <div class="stat-value">${imageInfo.paintedPixels}/${imageInfo.totalPixels}</div>
      </div>
    `;
      if (imageInfo.estimatedTime !== void 0 && imageInfo.estimatedTime > 0) {
        const hours = Math.floor(imageInfo.estimatedTime / 3600);
        const minutes = Math.floor(imageInfo.estimatedTime % 3600 / 60);
        const timeStr = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
        statsHTML += `
        <div class="stat-item">
          <div class="stat-label">\u23F0 Tiempo Estimado</div>
          <div class="stat-value">${timeStr}</div>
        </div>
      `;
      }
      if (imageInfo.originalName) {
        statsHTML += `
        <div class="stat-item">
          <div class="stat-label">\u{1F4C1} Archivo</div>
          <div class="stat-value">${imageInfo.originalName}</div>
        </div>
      `;
      }
      elements.imageStats.innerHTML = statsHTML;
    }
    function updateColorsStats(availableColors) {
      if (!availableColors || availableColors.length === 0) {
        elements.colorsStats.innerHTML = `
        <div class="stat-item">
          <div class="stat-label">\u274C Abra la paleta de colores en el sitio</div>
        </div>
      `;
        return;
      }
      const allColors = Object.values(COLOR_MAP).filter((c) => c.rgb !== null);
      const availableIds = new Set(availableColors.map((c) => c.id));
      let statsHTML = `
      <div class="stat-item">
        <div class="stat-label">\u2705 Colores Disponibles</div>
        <div class="stat-value">${availableColors.length}</div>
      </div>
      <div class="stat-item">
        <div class="stat-label">\u{1F4CA} Total de Colores</div>
        <div class="stat-value">${allColors.length}</div>
      </div>
      <div class="colors-grid">
    `;
      availableColors.forEach((color) => {
        const colorInfo = COLOR_MAP[Object.keys(COLOR_MAP).find((key) => COLOR_MAP[key].id === color.id)];
        const name = colorInfo ? colorInfo.name : `Color ${color.id}`;
        const rgb = color.rgb || [0, 0, 0];
        const rgbString = `rgb(${rgb.join(",")})`;
        statsHTML += `
        <div class="color-swatch" style="background-color: ${rgbString};" title="${name} (ID: ${color.id})">
          <div class="color-info">${name}</div>
        </div>
      `;
      });
      const unavailableColors = allColors.filter((c) => !availableIds.has(c.id));
      unavailableColors.forEach((color) => {
        const rgb = [color.rgb.r, color.rgb.g, color.rgb.b];
        const rgbString = `rgb(${rgb.join(",")})`;
        statsHTML += `
        <div class="color-swatch unavailable" style="background-color: ${rgbString};" title="${color.name} (ID: ${color.id}) - No disponible">
          <div class="color-info">${color.name} (No disponible)</div>
        </div>
      `;
      });
      statsHTML += "</div>";
      elements.colorsStats.innerHTML = statsHTML;
    }
    function setRefreshCallback(callback) {
      refreshCallback = callback;
    }
    function destroy() {
      host.remove();
    }
    log("\u2705 Ventana de estad\xEDsticas de pintado creada");
    return {
      show,
      hide,
      toggle,
      updateUserStats,
      updateImageStats,
      updateColorsStats,
      setRefreshCallback,
      destroy,
      isVisible: () => visible
    };
  }

  // src/image/color-palette-selector.js
  init_logger();
  function createColorPaletteSelector(container, availableColors = []) {
    log("\u{1F3A8} Creando selector de paleta de colores");
    const paletteSection = document.createElement("div");
    paletteSection.className = "wplace-section";
    paletteSection.id = "color-palette-section";
    paletteSection.style.marginTop = "15px";
    paletteSection.innerHTML = `
    <div class="wplace-section-title">
      <i class="fas fa-palette"></i>&nbsp;Color Palette
    </div>
    <div class="wplace-controls">
      <div class="wplace-row single">
        <label style="display: flex; align-items: center; gap: 8px; font-size: 12px;">
          <input type="checkbox" id="showAllColorsToggle" style="cursor: pointer;">
          <span>Show All Colors (including unavailable)</span>
        </label>
      </div>
      <div class="wplace-row">
        <button id="selectAllBtn" class="wplace-btn">Select All</button>
        <button id="unselectAllBtn" class="wplace-btn">Unselect All</button>
      </div>
      <div id="colors-container" class="wplace-color-grid"></div>
    </div>
  `;
    const style = document.createElement("style");
    style.textContent = `
    .wplace-section {
      background: rgba(255,255,255,0.05);
      border-radius: 8px;
      padding: 15px;
      border: 1px solid rgba(255,255,255,0.1);
    }
    
    .wplace-section-title {
      font-size: 14px;
      font-weight: 600;
      color: #60a5fa;
      margin-bottom: 12px;
      display: flex;
      align-items: center;
    }
    
    .wplace-controls {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .wplace-row {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    
    .wplace-row.single {
      justify-content: flex-start;
    }
    
    .wplace-btn {
      background: #60a5fa;
      color: white;
      border: none;
      border-radius: 6px;
      padding: 6px 12px;
      cursor: pointer;
      font-size: 12px;
      font-weight: 500;
      transition: all 0.2s;
    }
    
    .wplace-btn:hover {
      background: #4facfe;
      transform: translateY(-1px);
    }
    
    .wplace-color-grid {
      display: grid;
      grid-template-columns: repeat(8, 1fr);
      gap: 8px;
      padding: 12px;
      max-height: 300px;
      overflow-y: auto;
      background: rgba(0, 0, 0, 0.1);
      border-radius: 6px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .wplace-color-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 6px;
      min-width: 0;
    }
    
    .wplace-color-item-name {
      font-size: 9px;
      color: #ccc;
      text-align: center;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      width: 100%;
      line-height: 1.2;
    }
    
    .wplace-color-swatch {
      width: 32px;
      height: 32px;
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
      margin: 0 auto;
      background: transparent;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .wplace-color-swatch.unavailable {
      border-color: #666;
      border-style: dashed;
      cursor: not-allowed;
      opacity: 0.4;
      filter: grayscale(70%);
    }
    
    .wplace-color-swatch:hover:not(.unavailable) {
      transform: scale(1.05);
      border-color: #60a5fa;
      box-shadow: 0 0 8px rgba(96, 165, 250, 0.3);
      z-index: 1;
    }
    
    .wplace-color-swatch:not(.active):not(.unavailable) {
      opacity: 0.5;
      filter: grayscale(60%);
    }
    
    .wplace-color-swatch.unavailable:not(.active) {
      opacity: 0.3;
      filter: grayscale(80%);
    }
    
    .wplace-color-swatch.active {
      border-color: #10b981;
      opacity: 1;
      filter: none;
      box-shadow: 0 0 6px rgba(16, 185, 129, 0.4);
    }
    
    .wplace-color-swatch.active::after {
      content: '\u2713';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      font-size: 18px;
      font-weight: bold;
      text-shadow: 
        -1px -1px 0 #000,
        1px -1px 0 #000,
        -1px 1px 0 #000,
        1px 1px 0 #000,
        0 0 3px rgba(0,0,0,0.8);
      z-index: 2;
    }
    
    .wplace-color-item.unavailable .wplace-color-item-name {
      color: #888;
      font-style: italic;
    }
  `;
    const rootNode = container.getRootNode && container.getRootNode();
    const isShadowRoot = rootNode && rootNode.nodeType === 11 && rootNode.host;
    if (isShadowRoot) {
      if (!rootNode.querySelector("#color-palette-styles")) {
        style.id = "color-palette-styles";
        rootNode.appendChild(style);
      }
    } else {
      if (!document.head.querySelector("#color-palette-styles")) {
        style.id = "color-palette-styles";
        document.head.appendChild(style);
      }
    }
    container.appendChild(paletteSection);
    const elements = {
      showAllToggle: paletteSection.querySelector("#showAllColorsToggle"),
      selectAllBtn: paletteSection.querySelector("#selectAllBtn"),
      unselectAllBtn: paletteSection.querySelector("#unselectAllBtn"),
      colorsContainer: paletteSection.querySelector("#colors-container")
    };
    let selectedColors = /* @__PURE__ */ new Set();
    let showUnavailable = false;
    let changeCallback = null;
    function updateActiveColorPalette() {
      selectedColors.clear();
      const activeSwatches = elements.colorsContainer.querySelectorAll(".wplace-color-swatch.active");
      activeSwatches.forEach((swatch) => {
        const colorId = parseInt(swatch.dataset.colorId);
        if (!isNaN(colorId)) {
          selectedColors.add(colorId);
        }
      });
      if (changeCallback) {
        changeCallback(Array.from(selectedColors));
      }
    }
    function toggleAllColors(select, showingUnavailable = false) {
      const swatches = elements.colorsContainer.querySelectorAll(".wplace-color-swatch");
      swatches.forEach((swatch) => {
        const isUnavailable = swatch.classList.contains("unavailable");
        const colorId = parseInt(swatch.dataset.colorId);
        if (!isUnavailable || showingUnavailable) {
          if (!isUnavailable) {
            swatch.classList.toggle("active", select);
            if (select) {
              selectedColors.add(colorId);
            } else {
              selectedColors.delete(colorId);
            }
          }
        }
      });
      updateActiveColorPalette();
      log(`\u{1F3A8} ${select ? "Seleccionados" : "Deseleccionados"} todos los colores disponibles`);
    }
    function populateColors(showUnavailable2 = false) {
      elements.colorsContainer.innerHTML = "";
      if (!availableColors || availableColors.length === 0) {
        elements.colorsContainer.innerHTML = '<div style="text-align: center; color: #888; padding: 20px;">Upload an image first to capture available colors</div>';
        return;
      }
      let _availableCount = 0;
      let _totalCount = 0;
      const hasExistingSelection = selectedColors.size > 0;
      const nextSelected = /* @__PURE__ */ new Set();
      const allColors = Object.values(COLOR_MAP).filter((color) => color.rgb !== null);
      allColors.forEach((colorData) => {
        const { id, name, rgb } = colorData;
        const rgbKey = `${rgb.r},${rgb.g},${rgb.b}`;
        _totalCount++;
        const isAvailable = availableColors.some(
          (c) => c.r === rgb.r && c.g === rgb.g && c.b === rgb.b
        );
        if (!showUnavailable2 && !isAvailable) {
          return;
        }
        if (isAvailable) _availableCount++;
        const colorItem = document.createElement("div");
        colorItem.className = "wplace-color-item";
        const swatch = document.createElement("button");
        swatch.className = `wplace-color-swatch ${!isAvailable ? "unavailable" : ""}`;
        swatch.title = `${name} (ID: ${id})${!isAvailable ? " (Unavailable)" : ""}`;
        swatch.dataset.rgb = rgbKey;
        swatch.dataset.colorId = id;
        swatch.style.backgroundColor = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
        if (!isAvailable) {
          swatch.disabled = true;
        }
        const shouldBeActive = hasExistingSelection ? selectedColors.has(id) : isAvailable;
        swatch.classList.toggle("active", shouldBeActive);
        if (shouldBeActive) {
          nextSelected.add(id);
        } else {
          nextSelected.delete(id);
        }
        const nameLabel = document.createElement("span");
        nameLabel.className = "wplace-color-item-name";
        nameLabel.textContent = name + (!isAvailable ? " (N/A)" : "");
        if (!isAvailable) {
          nameLabel.style.color = "#888";
          nameLabel.style.fontStyle = "italic";
        }
        if (isAvailable) {
          swatch.addEventListener("click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            const wasActive = swatch.classList.contains("active");
            swatch.classList.toggle("active", !wasActive);
            if (wasActive) {
              selectedColors.delete(id);
            } else {
              selectedColors.add(id);
            }
            updateActiveColorPalette();
            log(`\u{1F3A8} Color ${name} (ID: ${id}) ${wasActive ? "deseleccionado" : "seleccionado"}`);
          });
        }
        colorItem.appendChild(swatch);
        colorItem.appendChild(nameLabel);
        elements.colorsContainer.appendChild(colorItem);
      });
      selectedColors = nextSelected;
      const swatches = elements.colorsContainer.querySelectorAll(".wplace-color-swatch");
      swatches.forEach((swatch) => {
        const colorId = parseInt(swatch.dataset.colorId);
        const shouldBeActive = selectedColors.has(colorId);
        swatch.classList.toggle("active", shouldBeActive);
      });
      updateActiveColorPalette();
    }
    elements.showAllToggle.addEventListener("change", (e) => {
      showUnavailable = e.target.checked;
      populateColors(showUnavailable);
    });
    elements.selectAllBtn.addEventListener("click", () => {
      toggleAllColors(true, showUnavailable);
    });
    elements.unselectAllBtn.addEventListener("click", () => {
      toggleAllColors(false, showUnavailable);
    });
    populateColors(false);
    function updateAvailableColors(newAvailableColors) {
      availableColors = newAvailableColors || [];
      populateColors(showUnavailable);
    }
    function getSelectedColors() {
      return Array.from(selectedColors);
    }
    function setSelectedColors(colorIds) {
      selectedColors = new Set(colorIds || []);
      const swatches = elements.colorsContainer.querySelectorAll(".wplace-color-swatch");
      swatches.forEach((swatch) => {
        const colorId = parseInt(swatch.dataset.colorId);
        const shouldBeActive = selectedColors.has(colorId);
        swatch.classList.toggle("active", shouldBeActive);
      });
      if (changeCallback) {
        changeCallback(Array.from(selectedColors));
      }
    }
    function onSelectionChange(callback) {
      changeCallback = callback;
    }
    log("\u2705 Selector de paleta de colores creado");
    return {
      updateAvailableColors,
      getSelectedColors,
      setSelectedColors,
      onSelectionChange,
      element: paletteSection
    };
  }

  // src/image/ui.js
  async function createImageUI({ texts, ...handlers }) {
    log("\u{1F3A8} Creando interfaz de Auto-Image");
    if (!document.querySelector('link[href*="font-awesome"]')) {
      const fontAwesome = document.createElement("link");
      fontAwesome.rel = "stylesheet";
      fontAwesome.href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css";
      document.head.appendChild(fontAwesome);
      log("\u{1F4E6} FontAwesome a\xF1adido al document.head");
    }
    const { host, root } = createShadowRoot();
    const style = document.createElement("style");
    style.textContent = `
    @keyframes slideIn {
      from { transform: translateY(20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(0, 255, 0, 0.7); }
      70% { box-shadow: 0 0 0 10px rgba(0, 255, 0, 0); }
      100% { box-shadow: 0 0 0 0 rgba(0, 255, 0, 0); }
    }
    
    .container {
      position: fixed;
      top: 20px;
      right: 20px;
      width: 300px;
      background: #1a1a1a;
      border: 1px solid #333;
      border-radius: 8px;
      padding: 0;
      box-shadow: 0 5px 15px rgba(0,0,0,0.5);
      z-index: 9998;
      font-family: 'Segoe UI', Roboto, sans-serif;
      color: #eee;
      animation: slideIn 0.4s ease-out;
      overflow: hidden;
    }
    
    .header {
      padding: 12px 15px;
      background: #2d3748;
      color: #60a5fa;
      font-size: 16px;
      font-weight: 600;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: move;
      user-select: none;
    }
    
    .header-title {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .header-controls {
      display: flex;
      gap: 10px;
    }
    
    .header-btn {
      background: none;
      border: none;
      color: #eee;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.2s;
      padding: 5px;
    }
    
    .header-btn:hover {
      opacity: 1;
    }
    
    .content {
      padding: 15px;
      display: block;
    }
    
    .controls {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 15px;
    }
    
    .config-panel {
      display: none;
      background: #2d3748;
      padding: 10px;
      border-radius: 6px;
      margin-bottom: 10px;
    }
    
    .config-panel.visible {
      display: block;
    }
    
    .config-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
      font-size: 14px;
    }
    
    .config-input {
      width: 60px;
      padding: 4px;
      border: 1px solid #333;
      border-radius: 4px;
      background: #1a1a1a;
      color: #eee;
      text-align: center;
    }
    
    .config-input[type="text"], 
    .config-input select {
      width: 120px;
      text-align: left;
    }
    
    .config-checkbox {
      margin-right: 8px;
    }
    
    .main-config {
      background: #2d3748;
      padding: 10px;
      border-radius: 6px;
      margin-bottom: 10px;
      border: 1px solid #3a4553;
    }
    
    .config-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 10px;
    }
    
    .config-label {
      font-size: 13px;
      color: #cbd5e0;
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .batch-value, .cooldown-value {
      font-weight: bold;
      color: #60a5fa;
    }
    
    .btn {
      padding: 10px;
      border: none;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      transition: all 0.2s;
      font-size: 14px;
    }
    
    .btn:hover:not(:disabled) {
      transform: translateY(-2px);
    }
    
    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
    }
    
    .btn-primary {
      background: #60a5fa;
      color: white;
    }
    
    .btn-upload {
      background: #2d3748;
      color: white;
      border: 1px dashed #eee;
    }
    
    .btn-load {
      background: #2196F3;
      color: white;
    }
    
    .btn-start {
      background: #10b981;
      color: white;
    }
    
    .btn-stop {
      background: #ef4444;
      color: white;
    }
    
    .btn-select {
      background: #f59e0b;
      color: black;
    }
    
    .btn-secondary {
      background: #6b7280;
      color: white;
    }
    
    .progress {
      width: 100%;
      background: #2d3748;
      border-radius: 4px;
      margin: 10px 0;
      overflow: hidden;
      height: 10px;
    }
    
    .progress-bar {
      height: 100%;
      background: #60a5fa;
      transition: width 0.3s;
      width: 0%;
    }
    
    .stats {
      background: #2d3748;
      padding: 12px;
      border-radius: 6px;
      margin-bottom: 15px;
    }
    
    .stat-item {
      display: flex;
      justify-content: space-between;
      padding: 6px 0;
      font-size: 14px;
    }
    
    .stat-label {
      display: flex;
      align-items: center;
      gap: 6px;
      opacity: 0.8;
    }
    
    .status {
      padding: 8px;
      border-radius: 4px;
      text-align: center;
      font-size: 13px;
    }
    
    .status-default {
      background: rgba(255,255,255,0.1);
    }
    
    .status-success {
      background: rgba(0, 255, 0, 0.1);
      color: #10b981;
    }
    
    .status-error {
      background: rgba(255, 0, 0, 0.1);
      color: #ef4444;
    }
    
    .status-warning {
      background: rgba(255, 165, 0, 0.1);
      color: orange;
    }
    
    .status-info {
      background: rgba(0, 150, 255, 0.1);
      color: #60a5fa;
    }
    
    .minimized .content {
      display: none;
    }
    
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      z-index: 10001;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .modal {
      background: #1a1a1a;
      border: 2px solid #333;
      border-radius: 15px;
      padding: 25px;
      color: #eee;
      min-width: 350px;
      max-width: 400px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.5);
    }
    
    .modal h3 {
      margin: 0 0 15px 0;
      text-align: center;
      font-size: 18px;
    }
    
    .modal p {
      margin: 0 0 20px 0;
      text-align: center;
      line-height: 1.4;
    }
    
    .modal-buttons {
      display: flex;
      gap: 10px;
      justify-content: center;
    }
    
    .modal-btn {
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s;
      min-width: 100px;
    }
    
    .modal-btn-save {
      background: #10b981;
      color: white;
    }
    
    .modal-btn-discard {
      background: #ef4444;
      color: white;
    }
    
    .modal-btn-cancel {
      background: #2d3748;
      color: white;
    }
    
    .modal-btn:hover {
      transform: translateY(-2px);
    }
    
    /* Resize Dialog Styles */
    .resize-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      z-index: 9999;
      display: none;
    }
    
    .resize-container {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #1a1a1a;
      padding: 20px;
      border-radius: 8px;
      z-index: 10000;
      box-shadow: 0 0 20px rgba(0,0,0,0.5);
      max-width: 90%;
      max-height: 90%;
      overflow: auto;
      color: #ffffff;
      display: none;
    }
    
    .resize-container h3 {
      margin: 0 0 15px 0;
      color: #ffffff;
    }
    
    .resize-controls {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-top: 15px;
    }
    
    .resize-controls label {
      color: #ffffff;
      font-size: 14px;
    }
    
    .resize-slider {
      width: 100%;
      margin: 5px 0;
    }
    
    .resize-preview {
      max-width: 100%;
      max-height: 300px;
      margin: 10px 0;
      border: 1px solid #333;
      display: block;
    }
    
    .resize-buttons {
      display: flex;
      gap: 10px;
      margin-top: 15px;
    }
  `;
    root.appendChild(style);
    const container = document.createElement("div");
    container.className = "container";
    container.innerHTML = `
    <div class="header">
      <div class="header-title">
        \u{1F5BC}\uFE0F
        <span>${texts.title}</span>
      </div>
      <div class="header-controls">
        <button class="header-btn config-btn" title="Configuraci\xF3n">
          \u2699\uFE0F
        </button>
        <button class="header-btn minimize-btn" title="${texts.minimize}">
          \u2796
        </button>
      </div>
    </div>
    <div class="content">
      <div class="config-panel">
        <div class="config-item">
          <label>${texts.batchSize}:</label>
          <input class="config-input pixels-per-batch" type="number" min="1" max="9999" value="20">
        </div>
        <div class="config-item">
          <label>
            <input class="config-checkbox use-all-charges" type="checkbox" checked>
            ${texts.useAllCharges}
          </label>
        </div>
        <div class="config-item">
          <label>
            <input class="config-checkbox show-overlay" type="checkbox" checked>
            ${texts.showOverlay || "Mostrar overlay"}
          </label>
        </div>
        <div class="config-item">
          <label>
            <input class="config-checkbox protection-enabled" type="checkbox" checked>
            \u{1F6E1}\uFE0F Protecci\xF3n del dibujo
          </label>
        </div>
        <div class="config-item">
          <label>
            <input class="config-checkbox smart-verification" type="checkbox" checked>
            \u{1F4A1} Verificaci\xF3n inteligente
          </label>
        </div>
        <div class="config-item">
          <label>\u{1F4D0} Patr\xF3n de pintado:</label>
          <select class="config-input paint-pattern">
            <option value="linear_start">Lineal (Inicio)</option>
            <option value="linear_end">Lineal (Final)</option>
            <option value="random">Aleatorio</option>
            <option value="center_out">Centro hacia afuera</option>
            <option value="corners_first">Esquinas primero</option>
            <option value="spiral">Espiral</option>
          </select>
        </div>
      </div>
      
      <!-- Configuraci\xF3n visible en la interfaz principal -->
      <div class="main-config">
        <div class="config-row">
          <div class="config-label">
            \u{1F3AF} ${texts.batchSize}:
            <span class="batch-value">20</span>
          </div>
          <div class="config-label">
            \u23F1\uFE0F ${texts.nextBatchTime}:
            <span class="cooldown-value">--</span>
          </div>
        </div>
      </div>
      
      <div class="controls">
        <!-- Estado inicial: Solo 3 botones principales -->
        <button class="btn btn-upload upload-btn" data-state="initial">
          \u{1F4E4}
          <span>${texts.uploadImage}</span>
        </button>
        <button class="btn btn-load load-progress-btn" data-state="initial">
          \u{1F4C1}
          <span>${texts.loadProgress}</span>
        </button>
        <button class="btn btn-secondary stats-btn" data-state="initial">
          \u{1F4CA}
          <span>Estad\xEDsticas</span>
        </button>
        <button class="btn btn-secondary log-window-btn" data-state="initial,load-progress,upload-image">
          \u{1F4CB}
          <span>${texts.logWindow || "Logs"}</span>
        </button>
        
        <!-- Flujo de carga de progreso -->
        <button class="btn btn-load load-progress-btn-flow" data-state="load-progress" style="display: none;">
          \u{1F4C1}
          <span>${texts.loadProgress}</span>
        </button>
        <button class="btn btn-start start-btn" data-state="load-progress" style="display: none;">
          \u25B6\uFE0F
          <span>${texts.startPainting}</span>
        </button>
        <button class="btn btn-stop stop-btn" data-state="load-progress" style="display: none;">
          \u23F9\uFE0F
          <span>${texts.stopPainting}</span>
        </button>
        <button class="btn btn-load export-guard-btn" data-state="load-progress" style="background: #8b5cf6; display: none;">
          \u{1F6E1}\uFE0F
          <span>Exportar para Guard</span>
        </button>
        
        <!-- Flujo de subida de imagen -->
        <button class="btn btn-load export-guard-btn-upload" data-state="upload-image" style="background: #8b5cf6; display: none;">
          \u{1F6E1}\uFE0F
          <span>Exportar para Guard</span>
        </button>
        <button class="btn btn-primary resize-btn" data-state="upload-image" style="display: none;">
          \u{1F504}
          <span>${texts.resizeImage}</span>
        </button>
        <button class="btn btn-select select-pos-btn" data-state="upload-image" style="display: none;">
          \u{1F3AF}
          <span>${texts.selectPosition}</span>
        </button>
        <button class="btn btn-start start-btn-upload" data-state="upload-image" style="display: none;">
          \u25B6\uFE0F
          <span>${texts.startPainting}</span>
        </button>
        <button class="btn btn-stop stop-btn-upload" data-state="upload-image" style="display: none;">
          \u23F9\uFE0F
          <span>${texts.stopPainting}</span>
        </button>
        
        <!-- Bot\xF3n de inicializaci\xF3n oculto por defecto -->
        <button class="btn btn-primary init-btn" style="display: none;">
          \u{1F916}
          <span>${texts.initBot}</span>
        </button>
      </div>
      
      <div class="progress">
        <div class="progress-bar"></div>
      </div>
      
      <div class="stats">
        <div class="stats-area">
          <div class="stat-item">
            <div class="stat-label">\u2139\uFE0F ${texts.initMessage}</div>
          </div>
        </div>
      </div>
      
      <div class="status status-default">
        ${texts.waitingInit}
      </div>
    </div>
  `;
    root.appendChild(container);
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/png,image/jpeg";
    fileInput.style.display = "none";
    root.appendChild(fileInput);
    const progressFileInput = document.createElement("input");
    progressFileInput.type = "file";
    progressFileInput.accept = ".json";
    progressFileInput.style.display = "none";
    root.appendChild(progressFileInput);
    const resizeOverlay = document.createElement("div");
    resizeOverlay.className = "resize-overlay";
    root.appendChild(resizeOverlay);
    const resizeContainer = document.createElement("div");
    resizeContainer.className = "resize-container";
    resizeContainer.innerHTML = `
    <h3>${texts.resizeImage}</h3>
    <div class="resize-controls">
      <label>
        ${texts.width}: <span class="width-value">0</span>px
        <input type="range" class="resize-slider width-slider" min="10" max="500" value="100">
      </label>
      <label>
        ${texts.height}: <span class="height-value">0</span>px
        <input type="range" class="resize-slider height-slider" min="10" max="500" value="100">
      </label>
      <label>
        <input type="checkbox" class="keep-aspect" checked>
        ${texts.keepAspect}
      </label>
      <img class="resize-preview" src="" alt="Preview">
      <div class="resize-buttons">
        <button class="btn btn-primary confirm-resize">
          \u2705
          <span>${texts.apply}</span>
        </button>
        <button class="btn btn-stop cancel-resize">
          \u274C
          <span>${texts.cancel}</span>
        </button>
      </div>
    </div>
  `;
    root.appendChild(resizeContainer);
    const elements = {
      header: container.querySelector(".header"),
      configBtn: container.querySelector(".config-btn"),
      minimizeBtn: container.querySelector(".minimize-btn"),
      configPanel: container.querySelector(".config-panel"),
      pixelsPerBatch: container.querySelector(".pixels-per-batch"),
      useAllCharges: container.querySelector(".use-all-charges"),
      protectionEnabled: container.querySelector(".protection-enabled"),
      smartVerification: container.querySelector(".smart-verification"),
      paintPattern: container.querySelector(".paint-pattern"),
      showOverlay: container.querySelector(".show-overlay"),
      batchValue: container.querySelector(".batch-value"),
      cooldownValue: container.querySelector(".cooldown-value"),
      initBtn: container.querySelector(".init-btn"),
      uploadBtn: container.querySelector(".upload-btn"),
      loadProgressBtn: container.querySelector(".load-progress-btn"),
      loadProgressBtnFlow: container.querySelector(".load-progress-btn-flow"),
      exportGuardBtn: container.querySelector(".export-guard-btn"),
      exportGuardBtnUpload: container.querySelector(".export-guard-btn-upload"),
      resizeBtn: container.querySelector(".resize-btn"),
      selectPosBtn: container.querySelector(".select-pos-btn"),
      startBtn: container.querySelector(".start-btn"),
      startBtnUpload: container.querySelector(".start-btn-upload"),
      stopBtn: container.querySelector(".stop-btn"),
      stopBtnUpload: container.querySelector(".stop-btn-upload"),
      statsBtn: container.querySelector(".stats-btn"),
      logWindowBtn: container.querySelector(".log-window-btn"),
      progressBar: container.querySelector(".progress-bar"),
      statsArea: container.querySelector(".stats-area"),
      status: container.querySelector(".status"),
      content: container.querySelector(".content")
    };
    const resizeElements = {
      overlay: resizeOverlay,
      container: resizeContainer,
      widthSlider: resizeContainer.querySelector(".width-slider"),
      heightSlider: resizeContainer.querySelector(".height-slider"),
      widthValue: resizeContainer.querySelector(".width-value"),
      heightValue: resizeContainer.querySelector(".height-value"),
      keepAspect: resizeContainer.querySelector(".keep-aspect"),
      preview: resizeContainer.querySelector(".resize-preview"),
      confirmBtn: resizeContainer.querySelector(".confirm-resize"),
      cancelBtn: resizeContainer.querySelector(".cancel-resize")
    };
    let state = {
      minimized: false,
      configVisible: false
    };
    makeDraggable(elements.header, container);
    elements.minimizeBtn.addEventListener("click", () => {
      state.minimized = !state.minimized;
      if (state.minimized) {
        container.classList.add("minimized");
        elements.minimizeBtn.innerHTML = "\u{1F53C}";
      } else {
        container.classList.remove("minimized");
        elements.minimizeBtn.innerHTML = "\u{1F53D}";
      }
    });
    elements.configBtn.addEventListener("click", () => {
      state.configVisible = !state.configVisible;
      if (state.configVisible) {
        elements.configPanel.classList.add("visible");
        elements.configBtn.innerHTML = "\u274C";
      } else {
        elements.configPanel.classList.remove("visible");
        elements.configBtn.innerHTML = "\u2699\uFE0F";
      }
    });
    elements.pixelsPerBatch.addEventListener("change", () => {
      const value = parseInt(elements.pixelsPerBatch.value) || 20;
      elements.batchValue.textContent = value;
      if (handlers.onConfigChange) {
        handlers.onConfigChange({ pixelsPerBatch: value });
      }
    });
    elements.useAllCharges.addEventListener("change", () => {
      if (handlers.onConfigChange) {
        handlers.onConfigChange({ useAllCharges: elements.useAllCharges.checked });
      }
    });
    elements.protectionEnabled.addEventListener("change", () => {
      if (handlers.onConfigChange) {
        handlers.onConfigChange({ protectionEnabled: elements.protectionEnabled.checked });
      }
    });
    elements.smartVerification.addEventListener("change", () => {
      if (handlers.onConfigChange) {
        handlers.onConfigChange({ smartVerification: elements.smartVerification.checked });
      }
    });
    elements.paintPattern.addEventListener("change", () => {
      if (handlers.onConfigChange) {
        handlers.onConfigChange({ paintPattern: elements.paintPattern.value });
      }
    });
    function setState(newState) {
      const allButtons = container.querySelectorAll("[data-state]");
      allButtons.forEach((btn) => {
        btn.style.display = "none";
      });
      const stateButtons = container.querySelectorAll(`[data-state*="${newState}"]`);
      stateButtons.forEach((btn) => {
        btn.style.display = "flex";
      });
      log(`\u{1F504} Estado cambiado a: ${newState}`);
    }
    function enableButtonsAfterInit() {
    }
    elements.initBtn.addEventListener("click", async () => {
      elements.initBtn.disabled = true;
      if (handlers.onInitBot) {
        const success = await handlers.onInitBot();
        if (success) {
          enableButtonsAfterInit();
        }
      }
      elements.initBtn.disabled = false;
    });
    elements.uploadBtn.addEventListener("click", () => {
      fileInput.click();
    });
    fileInput.addEventListener("change", async () => {
      if (fileInput.files.length > 0 && handlers.onUploadImage) {
        const success = await handlers.onUploadImage(fileInput.files[0]);
        if (success) {
          setState("upload-image");
        }
      }
    });
    elements.loadProgressBtn.addEventListener("click", () => {
      progressFileInput.click();
    });
    progressFileInput.addEventListener("change", async () => {
      if (progressFileInput.files.length > 0 && handlers.onLoadProgress) {
        const success = await handlers.onLoadProgress(progressFileInput.files[0]);
        if (success) {
          setState("load-progress");
        }
      }
    });
    elements.loadProgressBtnFlow.addEventListener("click", () => {
      progressFileInput.click();
    });
    elements.resizeBtn.addEventListener("click", () => {
      if (handlers.onResizeImage) {
        handlers.onResizeImage();
      }
    });
    elements.exportGuardBtn.addEventListener("click", () => {
      if (handlers.onExportGuard) {
        handlers.onExportGuard();
      }
    });
    elements.exportGuardBtnUpload.addEventListener("click", () => {
      if (handlers.onExportGuard) {
        handlers.onExportGuard();
      }
    });
    const handleSelectPosition = async (btn, startBtn) => {
      if (handlers.onSelectPosition) {
        btn.disabled = true;
        const success = await handlers.onSelectPosition();
        if (success && startBtn) {
          startBtn.disabled = false;
        }
        btn.disabled = false;
      }
    };
    elements.selectPosBtn.addEventListener("click", () => {
      handleSelectPosition(elements.selectPosBtn, elements.startBtnUpload);
    });
    elements.showOverlay.addEventListener("change", () => {
      if (!window.__WPA_PLAN_OVERLAY__) return;
      window.__WPA_PLAN_OVERLAY__.injectStyles();
      const isEnabled = elements.showOverlay.checked;
      window.__WPA_PLAN_OVERLAY__.setEnabled(isEnabled);
    });
    const handleStartPainting = async (startBtn, stopBtn) => {
      if (handlers.onStartPainting) {
        startBtn.disabled = true;
        stopBtn.disabled = false;
        const success = await handlers.onStartPainting();
        if (!success) {
          startBtn.disabled = false;
          stopBtn.disabled = true;
        }
      }
    };
    const handleStopPainting = async (startBtn, stopBtn) => {
      if (handlers.onStopPainting) {
        const shouldStop = await handlers.onStopPainting();
        if (shouldStop) {
          startBtn.disabled = false;
          stopBtn.disabled = true;
        }
      }
    };
    elements.startBtn.addEventListener("click", () => {
      handleStartPainting(elements.startBtn, elements.stopBtn);
    });
    elements.stopBtn.addEventListener("click", () => {
      handleStopPainting(elements.startBtn, elements.stopBtn);
    });
    elements.startBtnUpload.addEventListener("click", () => {
      handleStartPainting(elements.startBtnUpload, elements.stopBtnUpload);
    });
    elements.stopBtnUpload.addEventListener("click", () => {
      handleStopPainting(elements.startBtnUpload, elements.stopBtnUpload);
    });
    let logWindow = null;
    let statsWindow = null;
    elements.logWindowBtn.addEventListener("click", () => {
      if (!logWindow) {
        logWindow = createLogWindow("image");
        logWindow.show();
      } else {
        logWindow.toggle();
      }
    });
    elements.statsBtn.addEventListener("click", () => {
      if (!statsWindow) {
        statsWindow = createPaintingStatsWindow();
        statsWindow.setRefreshCallback(() => {
          if (handlers.onRefreshStats) {
            handlers.onRefreshStats();
          }
        });
        statsWindow.show();
      } else {
        statsWindow.toggle();
      }
    });
    function setStatus(message, type = "default") {
      elements.status.textContent = message;
      elements.status.className = `status status-${type}`;
      elements.status.style.animation = "none";
      void elements.status.offsetWidth;
      elements.status.style.animation = "slideIn 0.3s ease-out";
    }
    function showResizeDialog(processor) {
      const { width, height } = processor.getDimensions();
      const aspectRatio = width / height;
      resizeElements.widthSlider.value = width;
      resizeElements.heightSlider.value = height;
      resizeElements.widthValue.textContent = width;
      resizeElements.heightValue.textContent = height;
      resizeElements.preview.src = processor.img.src;
      if (!resizeElements.colorPaletteSelector) {
        const availableColors = handlers.getAvailableColors ? handlers.getAvailableColors() : [];
        resizeElements.colorPaletteSelector = createColorPaletteSelector(
          resizeElements.container.querySelector(".resize-buttons").parentNode,
          availableColors
        );
        resizeElements.colorPaletteSelector.onSelectionChange((selectedColorIds) => {
          if (handlers.onColorSelectionChange) {
            handlers.onColorSelectionChange(selectedColorIds);
          }
        });
        const buttonsDiv = resizeElements.container.querySelector(".resize-buttons");
        buttonsDiv.parentNode.insertBefore(resizeElements.colorPaletteSelector.element, buttonsDiv);
      } else {
        const availableColors = handlers.getAvailableColors ? handlers.getAvailableColors() : [];
        resizeElements.colorPaletteSelector.updateAvailableColors(availableColors);
      }
      resizeElements.overlay.style.display = "block";
      resizeElements.container.style.display = "block";
      const updatePreview = () => {
        const newWidth = parseInt(resizeElements.widthSlider.value);
        const newHeight = parseInt(resizeElements.heightSlider.value);
        resizeElements.widthValue.textContent = newWidth;
        resizeElements.heightValue.textContent = newHeight;
        resizeElements.preview.src = processor.generatePreview(newWidth, newHeight);
      };
      const onWidthChange = () => {
        if (resizeElements.keepAspect.checked) {
          const newWidth = parseInt(resizeElements.widthSlider.value);
          const newHeight = Math.round(newWidth / aspectRatio);
          resizeElements.heightSlider.value = newHeight;
        }
        updatePreview();
      };
      const onHeightChange = () => {
        if (resizeElements.keepAspect.checked) {
          const newHeight = parseInt(resizeElements.heightSlider.value);
          const newWidth = Math.round(newHeight * aspectRatio);
          resizeElements.widthSlider.value = newWidth;
        }
        updatePreview();
      };
      resizeElements.widthSlider.addEventListener("input", onWidthChange);
      resizeElements.heightSlider.addEventListener("input", onHeightChange);
      const onConfirm = () => {
        const newWidth = parseInt(resizeElements.widthSlider.value);
        const newHeight = parseInt(resizeElements.heightSlider.value);
        const selectedColors = resizeElements.colorPaletteSelector.getSelectedColors();
        if (handlers.onConfirmResize) {
          handlers.onConfirmResize(processor, newWidth, newHeight, selectedColors);
        }
        closeResizeDialog();
      };
      const onCancel = () => {
        closeResizeDialog();
      };
      resizeElements.confirmBtn.addEventListener("click", onConfirm);
      resizeElements.cancelBtn.addEventListener("click", onCancel);
      resizeElements.overlay.addEventListener("click", onCancel);
      window.cleanupResizeDialog = () => {
        resizeElements.widthSlider.removeEventListener("input", onWidthChange);
        resizeElements.heightSlider.removeEventListener("input", onHeightChange);
        resizeElements.confirmBtn.removeEventListener("click", onConfirm);
        resizeElements.cancelBtn.removeEventListener("click", onCancel);
        resizeElements.overlay.removeEventListener("click", onCancel);
      };
      updatePreview();
    }
    function closeResizeDialog() {
      resizeElements.overlay.style.display = "none";
      resizeElements.container.style.display = "none";
      if (window.cleanupResizeDialog) {
        window.cleanupResizeDialog();
        delete window.cleanupResizeDialog;
      }
    }
    function updateProgress(current, total, userInfo = null) {
      const percentage = total > 0 ? current / total * 100 : 0;
      elements.progressBar.style.width = `${percentage}%`;
      let statsHTML = `
      <div class="stat-item">
        <div class="stat-label">\u{1F3A8} ${texts.progress}</div>
        <div>${current}/${total} (${percentage.toFixed(1)}%)</div>
      </div>
    `;
      if (userInfo) {
        if (userInfo.username) {
          statsHTML += `
          <div class="stat-item">
            <div class="stat-label">\u{1F464} ${texts.userName}</div>
            <div>${userInfo.username}</div>
          </div>
        `;
        }
        if (userInfo.charges !== void 0) {
          statsHTML += `
          <div class="stat-item">
            <div class="stat-label">\u26A1 ${texts.charges}</div>
            <div>${Math.floor(userInfo.charges)}</div>
          </div>
        `;
        }
        if (userInfo.pixels !== void 0) {
          statsHTML += `
          <div class="stat-item">
            <div class="stat-label">\u{1F533} ${texts.pixels}</div>
            <div>${userInfo.pixels.toLocaleString()}</div>
          </div>
        `;
        }
        if (userInfo.estimatedTime !== void 0 && userInfo.estimatedTime > 0) {
          const hours = Math.floor(userInfo.estimatedTime / 3600);
          const minutes = Math.floor(userInfo.estimatedTime % 3600 / 60);
          const timeStr = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
          statsHTML += `
          <div class="stat-item">
            <div class="stat-label">\u23F0 ${texts.timeRemaining}</div>
            <div>${timeStr}</div>
          </div>
        `;
        }
      }
      elements.statsArea.innerHTML = statsHTML;
    }
    function updateCooldownDisplay(seconds) {
      if (seconds > 0) {
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        const timeStr = minutes > 0 ? `${minutes}m ${secs}s` : `${secs}s`;
        elements.cooldownValue.textContent = timeStr;
      } else {
        elements.cooldownValue.textContent = "--";
      }
    }
    function updateCooldownMessage(message) {
      if (message && message.includes("\u23F3")) {
        elements.status.textContent = message;
        elements.status.className = "status status-info";
      } else if (message) {
        setStatus(message, "info");
      }
    }
    function setInitialized(isInitialized) {
      if (isInitialized) {
        elements.initBtn.disabled = true;
        elements.initBtn.style.opacity = "0.6";
        elements.initBtn.innerHTML = `\u2705 <span>${texts.initBot} - Completado</span>`;
      } else {
        elements.initBtn.disabled = false;
        elements.initBtn.style.opacity = "1";
        elements.initBtn.innerHTML = `\u{1F916} <span>${texts.initBot}</span>`;
      }
    }
    function setInitButtonVisible(visible) {
      elements.initBtn.style.display = visible ? "flex" : "none";
    }
    function resetToInitialState() {
      setState("initial");
      const allButtons = container.querySelectorAll("button");
      allButtons.forEach((btn) => {
        btn.disabled = false;
      });
    }
    function destroy() {
      if (logWindow) {
        logWindow.destroy();
      }
      if (statsWindow) {
        statsWindow.destroy();
      }
      host.remove();
    }
    function updateStatsWindow(data) {
      if (statsWindow && statsWindow.isVisible()) {
        if (data.userInfo) {
          statsWindow.updateUserStats(data.userInfo);
        }
        if (data.imageInfo) {
          statsWindow.updateImageStats(data.imageInfo);
        }
        if (data.availableColors) {
          statsWindow.updateColorsStats(data.availableColors);
        }
      }
    }
    log("\u2705 Interfaz de Auto-Image creada");
    setState("initial");
    return {
      setStatus,
      updateProgress,
      updateCooldownDisplay,
      updateCooldownMessage,
      setInitialized,
      setInitButtonVisible,
      enableButtonsAfterInit,
      setState,
      resetToInitialState,
      showResizeDialog,
      closeResizeDialog,
      updateStatsWindow,
      destroy
    };
  }
  function showConfirmDialog(message, title, buttons = {}) {
    return new Promise((resolve) => {
      const overlay = document.createElement("div");
      overlay.className = "modal-overlay";
      overlay.style.position = "fixed";
      overlay.style.top = "0";
      overlay.style.left = "0";
      overlay.style.width = "100%";
      overlay.style.height = "100%";
      overlay.style.background = "rgba(0,0,0,0.7)";
      overlay.style.zIndex = "10001";
      overlay.style.display = "flex";
      overlay.style.alignItems = "center";
      overlay.style.justifyContent = "center";
      const modal = document.createElement("div");
      modal.style.background = "#1a1a1a";
      modal.style.border = "2px solid #333";
      modal.style.borderRadius = "15px";
      modal.style.padding = "25px";
      modal.style.color = "#eee";
      modal.style.minWidth = "350px";
      modal.style.maxWidth = "400px";
      modal.style.boxShadow = "0 10px 30px rgba(0,0,0,0.5)";
      modal.style.fontFamily = "'Segoe UI', Roboto, sans-serif";
      modal.innerHTML = `
      <h3 style="margin: 0 0 15px 0; text-align: center; font-size: 18px;">${title}</h3>
      <p style="margin: 0 0 20px 0; text-align: center; line-height: 1.4;">${message}</p>
      <div style="display: flex; gap: 10px; justify-content: center;">
        ${buttons.save ? `<button class="save-btn" style="padding: 10px 20px; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; min-width: 100px; background: #10b981; color: white;">${buttons.save}</button>` : ""}
        ${buttons.discard ? `<button class="discard-btn" style="padding: 10px 20px; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; min-width: 100px; background: #ef4444; color: white;">${buttons.discard}</button>` : ""}
        ${buttons.cancel ? `<button class="cancel-btn" style="padding: 10px 20px; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; min-width: 100px; background: #2d3748; color: white;">${buttons.cancel}</button>` : ""}
      </div>
    `;
      overlay.appendChild(modal);
      document.body.appendChild(overlay);
      const saveBtn = modal.querySelector(".save-btn");
      const discardBtn = modal.querySelector(".discard-btn");
      const cancelBtn = modal.querySelector(".cancel-btn");
      const cleanup = () => {
        document.body.removeChild(overlay);
      };
      if (saveBtn) {
        saveBtn.addEventListener("click", () => {
          cleanup();
          resolve("save");
        });
      }
      if (discardBtn) {
        discardBtn.addEventListener("click", () => {
          cleanup();
          resolve("discard");
        });
      }
      if (cancelBtn) {
        cancelBtn.addEventListener("click", () => {
          cleanup();
          resolve("cancel");
        });
      }
      overlay.addEventListener("click", (e) => {
        if (e.target === overlay) {
          cleanup();
          resolve("cancel");
        }
      });
    });
  }

  // src/image/index.js
  init_locales();

  // src/core/dom.js
  function isPaletteOpen(debug = false) {
    const paletteSelectors = [
      '[data-testid="color-picker"]',
      ".color-picker",
      ".palette",
      '[class*="color"][class*="picker"]',
      '[class*="palette"]'
    ];
    for (const selector of paletteSelectors) {
      const element = document.querySelector(selector);
      if (element && element.offsetParent !== null) {
        if (debug) console.log(`[WPA-UI] \u{1F3A8} Paleta detectada por selector: ${selector}`);
        return true;
      }
    }
    const colorElements = document.querySelectorAll('[style*="background-color"], [style*="background:"], .color, [class*="color"]');
    let visibleColors = 0;
    for (const el of colorElements) {
      if (el.offsetParent !== null && el.offsetWidth > 10 && el.offsetHeight > 10) {
        visibleColors++;
        if (visibleColors >= 5) {
          if (debug) console.log(`[WPA-UI] \u{1F3A8} Paleta detectada por colores visibles: ${visibleColors}`);
          return true;
        }
      }
    }
    if (debug) console.log(`[WPA-UI] \u{1F50D} Paleta no detectada. Colores visibles: ${visibleColors}`);
    return false;
  }
  function findAndClickPaintButton(debug = false, doubleClick = false) {
    const specificButton = document.querySelector("button.btn.btn-primary.btn-lg, button.btn.btn-primary.sm\\:btn-xl");
    if (specificButton) {
      const buttonText = specificButton.textContent.toLowerCase();
      const hasPaintText = buttonText.includes("paint") || buttonText.includes("pintar");
      const hasPaintIcon = specificButton.querySelector('svg path[d*="240-120"]') || specificButton.querySelector('svg path[d*="M15"]');
      if (hasPaintText || hasPaintIcon) {
        if (debug) console.log(`[WPA-UI] \u{1F3AF} Bot\xF3n Paint encontrado por selector espec\xEDfico: "${buttonText}"`);
        specificButton.click();
        if (doubleClick) {
          setTimeout(() => {
            if (debug) console.log(`[WPA-UI] \u{1F3AF} Segundo clic en bot\xF3n Paint`);
            specificButton.click();
          }, 500);
        }
        return true;
      }
    }
    const buttons = document.querySelectorAll("button");
    for (const button of buttons) {
      const buttonText = button.textContent.toLowerCase();
      if ((buttonText.includes("paint") || buttonText.includes("pintar")) && button.offsetParent !== null && !button.disabled) {
        if (debug) console.log(`[WPA-UI] \u{1F3AF} Bot\xF3n Paint encontrado por texto: "${button.textContent.trim()}"`);
        button.click();
        if (doubleClick) {
          setTimeout(() => {
            if (debug) console.log(`[WPA-UI] \u{1F3AF} Segundo clic en bot\xF3n Paint`);
            button.click();
          }, 500);
        }
        return true;
      }
    }
    if (debug) console.log(`[WPA-UI] \u274C Bot\xF3n Paint no encontrado`);
    return false;
  }
  async function autoClickPaintButton(maxAttempts = 3, debug = true) {
    if (debug) console.log(`[WPA-UI] \u{1F916} Iniciando auto-click del bot\xF3n Paint (m\xE1ximo ${maxAttempts} intentos)`);
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      if (debug) console.log(`[WPA-UI] \u{1F3AF} Intento ${attempt}/${maxAttempts} - Buscando bot\xF3n Paint...`);
      if (isPaletteOpen()) {
        if (debug) console.log(`[WPA-UI] \u2705 Paleta ya est\xE1 abierta, auto-click completado`);
        return true;
      }
      if (findAndClickPaintButton(debug, false)) {
        if (debug) console.log(`[WPA-UI] \u{1F446} Clic en bot\xF3n Paint realizado (sin segundo clic)`);
        await new Promise((resolve) => setTimeout(resolve, 1500));
        if (isPaletteOpen()) {
          if (debug) console.log(`[WPA-UI] \u2705 Paleta abierta exitosamente despu\xE9s del intento ${attempt}`);
          return true;
        } else {
          if (debug) console.log(`[WPA-UI] \u26A0\uFE0F Paleta no detectada tras el clic en intento ${attempt}. Reintentar\xE1.`);
        }
      } else {
        if (debug) console.log(`[WPA-UI] \u274C Bot\xF3n Paint no encontrado para clic en intento ${attempt}`);
      }
      if (attempt < maxAttempts) {
        await new Promise((resolve) => setTimeout(resolve, 1e3));
      }
    }
    if (debug) console.log(`[WPA-UI] \u274C Auto-click fall\xF3 despu\xE9s de ${maxAttempts} intentos`);
    return false;
  }

  // src/image/plan-overlay-blue-marble.js
  (() => {
    const TILE_SIZE = 3e3;
    const state = {
      enabled: false,
      templates: [],
      // Plantillas estilo Blue Marble
      templatesShouldBeDrawn: true,
      tileSize: 1e3,
      // Tamaño de tile (como Blue Marble)
      drawMult: 3,
      // Multiplicador de dibujo
      // Plan de píxeles actual
      pixelPlan: null,
      nextBatchCount: 0,
      anchor: null,
      // { tileX, tileY, pxX, pxY }
      imageWidth: null,
      imageHeight: null,
      // Sistema de intercepción
      originalFetch: null,
      fetchedBlobQueue: /* @__PURE__ */ new Map(),
      isIntercepting: false
    };
    function injectStyles() {
    }
    function startFetchInterception() {
      if (state.isIntercepting) return;
      state.originalFetch = window.fetch;
      state.isIntercepting = true;
      window.fetch = async function(...args) {
        var _a;
        const response = await state.originalFetch.apply(this, args);
        const cloned = response.clone();
        const endpointName = (args[0] instanceof Request ? (_a = args[0]) == null ? void 0 : _a.url : args[0]) || "ignore";
        const contentType = cloned.headers.get("content-type") || "";
        if (contentType.includes("image/") && endpointName.includes("/tiles/") && !endpointName.includes("openfreemap") && !endpointName.includes("maps")) {
          try {
            const blob = await cloned.blob();
            const processedBlob = await drawPlanOnTile(blob, endpointName);
            return new Response(processedBlob, {
              headers: cloned.headers,
              status: cloned.status,
              statusText: cloned.statusText
            });
          } catch (error) {
            console.error("[PLAN OVERLAY] Error processing tile:", error);
            return response;
          }
        }
        return response;
      };
    }
    function stopFetchInterception() {
      if (!state.isIntercepting || !state.originalFetch) return;
      window.fetch = state.originalFetch;
      state.isIntercepting = false;
    }
    async function drawPlanOnTile(tileBlob, endpointUrl) {
      if (!state.enabled || !state.templatesShouldBeDrawn || !state.pixelPlan) {
        return tileBlob;
      }
      const urlParts = endpointUrl.split("/");
      const tileY = parseInt(urlParts[urlParts.length - 1].replace(".png", ""));
      const tileX = parseInt(urlParts[urlParts.length - 2]);
      if (isNaN(tileX) || isNaN(tileY)) {
        console.warn("[PLAN OVERLAY] Could not extract tile coordinates from URL:", endpointUrl);
        return tileBlob;
      }
      const tilePixels = getPixelsForTile(tileX, tileY);
      if (tilePixels.length === 0) {
        return tileBlob;
      }
      const drawSize = state.tileSize * state.drawMult;
      const tileBitmap = await createImageBitmap(tileBlob);
      const canvas = new OffscreenCanvas(drawSize, drawSize);
      const context = canvas.getContext("2d");
      context.imageSmoothingEnabled = false;
      context.clearRect(0, 0, drawSize, drawSize);
      context.drawImage(tileBitmap, 0, 0, drawSize, drawSize);
      drawPixelsOnTile(context, tilePixels, tileX, tileY);
      return await canvas.convertToBlob({ type: "image/png" });
    }
    function getPixelsForTile(tileX, tileY) {
      if (!state.pixelPlan || !state.pixelPlan.pixels) return [];
      return state.pixelPlan.pixels.filter((pixel) => {
        const pixelTileX = Math.floor(pixel.globalX / TILE_SIZE);
        const pixelTileY = Math.floor(pixel.globalY / TILE_SIZE);
        return pixelTileX === tileX && pixelTileY === tileY;
      });
    }
    function drawPixelsOnTile(context, pixels, tileX, tileY) {
      const tileStartX = tileX * TILE_SIZE;
      const tileStartY = tileY * TILE_SIZE;
      context.globalAlpha = 0.7;
      for (const pixel of pixels) {
        const localX = (pixel.globalX - tileStartX) * state.drawMult + 1;
        const localY = (pixel.globalY - tileStartY) * state.drawMult + 1;
        if (localX >= 0 && localX < state.tileSize * state.drawMult && localY >= 0 && localY < state.tileSize * state.drawMult) {
          context.fillStyle = `rgb(${pixel.r},${pixel.g},${pixel.b})`;
          context.fillRect(localX, localY, 1, 1);
        }
      }
      if (state.nextBatchCount > 0) {
        context.globalAlpha = 1;
        const batchPixels = pixels.slice(0, state.nextBatchCount);
        for (const pixel of batchPixels) {
          const localX = (pixel.globalX - tileStartX) * state.drawMult + 1;
          const localY = (pixel.globalY - tileStartY) * state.drawMult + 1;
          if (localX >= 0 && localX < state.tileSize * state.drawMult && localY >= 0 && localY < state.tileSize * state.drawMult) {
            context.fillStyle = `rgb(${pixel.r},${pixel.g},${pixel.b})`;
            context.fillRect(localX, localY, 1, 1);
          }
        }
      }
    }
    function setEnabled(enabled) {
      state.enabled = !!enabled;
      if (state.enabled) {
        startFetchInterception();
      } else {
        stopFetchInterception();
      }
    }
    function setPlan(planItems, opts = {}) {
      var _a, _b, _c;
      if (!planItems || planItems.length === 0) {
        state.pixelPlan = null;
        return;
      }
      const pixels = [];
      for (const item of planItems) {
        let globalX, globalY;
        if (typeof item.tileX === "number" && typeof item.localX === "number") {
          globalX = item.tileX * TILE_SIZE + item.localX;
          globalY = item.tileY * TILE_SIZE + item.localY;
        } else if (opts.anchor && typeof item.imageX === "number") {
          const baseX = opts.anchor.tileX * TILE_SIZE + (opts.anchor.pxX || 0);
          const baseY = opts.anchor.tileY * TILE_SIZE + (opts.anchor.pxY || 0);
          globalX = baseX + item.imageX;
          globalY = baseY + item.imageY;
        } else {
          continue;
        }
        pixels.push({
          globalX,
          globalY,
          r: ((_a = item.color) == null ? void 0 : _a.r) || 0,
          g: ((_b = item.color) == null ? void 0 : _b.g) || 0,
          b: ((_c = item.color) == null ? void 0 : _c.b) || 0
        });
      }
      state.pixelPlan = { pixels };
      state.nextBatchCount = opts.nextBatchCount || 0;
      state.anchor = opts.anchor || null;
      state.imageWidth = opts.imageWidth || null;
      state.imageHeight = opts.imageHeight || null;
      if (typeof opts.enabled === "boolean") {
        setEnabled(opts.enabled);
      }
    }
    function setNextBatchCount(count) {
      state.nextBatchCount = Math.max(0, Number(count || 0));
    }
    function setAnchor(anchor) {
      state.anchor = anchor;
    }
    function setAnchorCss() {
    }
    function endSelectionMode() {
    }
    function cleanup() {
      stopFetchInterception();
      state.pixelPlan = null;
      state.fetchedBlobQueue.clear();
    }
    window.__WPA_PLAN_OVERLAY__ = {
      injectStyles,
      setEnabled,
      setPlan,
      setPlanItemsFromTileList: setPlan,
      // Alias
      setNextBatchCount,
      setAnchor,
      setAnchorCss,
      endSelectionMode,
      render: () => {
      },
      cleanup,
      get state() {
        return state;
      }
    };
  })();

  // src/image/index.js
  async function runImage() {
    console.log("[WPA-Image] \u{1F680} runImage() iniciado");
    log("\u{1F680} Iniciando WPlace Auto-Image (versi\xF3n modular)");
    console.log("[WPA-Image] \u{1F30D} Inicializando sistema de idiomas");
    initializeLanguage();
    console.log("[WPA-Image] \u2705 Sistema de idiomas inicializado");
    window.__wplaceBot = { ...window.__wplaceBot, imageRunning: true };
    console.log("[WPA-Image] \u{1F527} Estado global actualizado");
    let currentUserInfo = null;
    let originalFetch = window.fetch;
    const restoreFetch = () => {
      const overlayActive = window.__WPA_PLAN_OVERLAY__ && window.__WPA_PLAN_OVERLAY__.state && window.__WPA_PLAN_OVERLAY__.state.enabled;
      if (window.fetch !== originalFetch && !overlayActive) {
        window.fetch = originalFetch;
        log("\u{1F504} Fetch original restaurado");
      } else if (overlayActive) {
        log("\u{1F504} Fetch NO restaurado - overlay activo");
      }
      if (imageState.positionTimeoutId) {
        clearTimeout(imageState.positionTimeoutId);
        imageState.positionTimeoutId = null;
      }
      if (imageState.cleanupObserver) {
        imageState.cleanupObserver();
        imageState.cleanupObserver = null;
      }
      imageState.selectingPosition = false;
    };
    try {
      const config = { ...IMAGE_DEFAULTS };
      const texts = getSection("image");
      imageState.language = getCurrentLanguage();
      if (!config.SITEKEY) {
        const siteKeyElement = document.querySelector("*[data-sitekey]");
        if (siteKeyElement) {
          config.SITEKEY = siteKeyElement.getAttribute("data-sitekey");
          log(`\u{1F4DD} Sitekey encontrada autom\xE1ticamente: ${config.SITEKEY.substring(0, 20)}...`);
        } else {
          log("\u26A0\uFE0F No se pudo encontrar la sitekey autom\xE1ticamente");
        }
      }
      async function tryAutoInit() {
        log("\u{1F916} Intentando auto-inicio...");
        if (isPaletteOpen()) {
          log("\u{1F3A8} Paleta de colores ya est\xE1 abierta");
          return true;
        }
        log("\u{1F50D} Paleta no encontrada, iniciando auto-click del bot\xF3n Paint...");
        const success = await autoClickPaintButton(3, true);
        if (success) {
          log("\u2705 Auto-click exitoso, paleta abierta");
          return true;
        } else {
          log("\u274C Auto-click fall\xF3, requerir\xE1 inicio manual");
          return false;
        }
      }
      async function initializeBot(isAutoInit = false) {
        log("\u{1F916} Inicializando Auto-Image...");
        ui.setStatus(t("image.checkingColors"), "info");
        const colors = detectAvailableColors();
        if (colors.length === 0) {
          ui.setStatus(t("image.noColorsFound"), "error");
          return false;
        }
        const sessionInfo = await getSession();
        let userInfo = null;
        if (sessionInfo.success && sessionInfo.data.user) {
          userInfo = {
            username: sessionInfo.data.user.name || "An\xF3nimo",
            charges: sessionInfo.data.charges,
            maxCharges: sessionInfo.data.maxCharges,
            pixels: sessionInfo.data.user.pixelsPainted || 0
            // Usar pixelsPainted en lugar de pixels
          };
          currentUserInfo = userInfo;
          imageState.currentCharges = sessionInfo.data.charges;
          imageState.maxCharges = sessionInfo.data.maxCharges || 9999;
          log(`\u{1F464} Usuario conectado: ${sessionInfo.data.user.name || "An\xF3nimo"} - Cargas: ${userInfo.charges}/${userInfo.maxCharges} - P\xEDxeles: ${userInfo.pixels}`);
        } else {
          log("\u26A0\uFE0F No se pudo obtener informaci\xF3n del usuario");
        }
        imageState.availableColors = colors;
        imageState.colorsChecked = true;
        ui.setStatus(t("image.colorsFound", { count: colors.length }), "success");
        ui.updateProgress(0, 0, userInfo);
        if (!isAutoInit) {
          log(`\u2705 ${colors.length} colores disponibles detectados`);
        }
        ui.setInitialized(true);
        ui.enableButtonsAfterInit();
        try {
        } catch {
        }
        return true;
      }
      const ui = await createImageUI({
        texts,
        onConfigChange: (config2) => {
          if (config2.pixelsPerBatch !== void 0) {
            imageState.pixelsPerBatch = config2.pixelsPerBatch;
          }
          if (config2.useAllCharges !== void 0) {
            imageState.useAllChargesFirst = config2.useAllCharges;
          }
          if (config2.protectionEnabled !== void 0) {
            imageState.protectionEnabled = config2.protectionEnabled;
            log(`\u{1F6E1}\uFE0F Protecci\xF3n del dibujo: ${config2.protectionEnabled ? "habilitada" : "deshabilitada"}`);
          }
          if (config2.smartVerification !== void 0) {
            imageState.smartVerification = config2.smartVerification;
            log(`\u{1F4A1} Verificaci\xF3n inteligente: ${config2.smartVerification ? "habilitada" : "deshabilitada"}`);
          }
          if (config2.paintPattern !== void 0) {
            imageState.paintPattern = config2.paintPattern;
            log(`\u{1F3A8} Patr\xF3n de pintado cambiado a: ${config2.paintPattern}`);
            if (imageState.remainingPixels && imageState.remainingPixels.length > 0) {
              Promise.resolve().then(() => (init_patterns(), patterns_exports)).then(({ applyPaintPattern: applyPaintPattern2 }) => {
                imageState.remainingPixels = applyPaintPattern2(
                  imageState.remainingPixels,
                  config2.paintPattern,
                  imageState.imageData
                );
                try {
                  if (window.__WPA_PLAN_OVERLAY__) {
                    window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
                      enabled: true,
                      nextBatchCount: imageState.pixelsPerBatch
                    });
                    log(`\u2705 Overlay actualizado con nuevo patr\xF3n: ${config2.paintPattern}`);
                  }
                } catch (e) {
                  log("\u26A0\uFE0F Error actualizando overlay con nuevo patr\xF3n:", e);
                }
              }).catch((error) => {
                log("\u274C Error aplicando nuevo patr\xF3n:", error);
              });
            }
          }
          log(`Configuraci\xF3n actualizada:`, config2);
        },
        onInitBot: initializeBot,
        onUploadImage: async (file) => {
          try {
            ui.setStatus(t("image.loadingImage"), "info");
            const imageUrl = window.URL.createObjectURL(file);
            const processor = new BlueMarblelImageProcessor(imageUrl);
            processor.originalName = file.name;
            await processor.load();
            const availableColors = processor.initializeColorPalette();
            imageState.availableColors = availableColors;
            const analysisResult = await processor.analyzePixels();
            processor.setCoords(0, 0, 0, 0);
            const processedData = processor.getImageData();
            imageState.imageData = processedData;
            imageState.imageData.processor = processor;
            imageState.totalPixels = analysisResult.requiredPixels;
            imageState.paintedPixels = 0;
            imageState.originalImageName = file.name;
            imageState.imageLoaded = true;
            ui.setStatus(t("image.imageLoaded", { count: analysisResult.requiredPixels }), "success");
            ui.updateProgress(0, analysisResult.requiredPixels, currentUserInfo);
            log(`\u2705 [BLUE MARBLE] Imagen cargada: ${processedData.width}x${processedData.height}, ${analysisResult.requiredPixels} p\xEDxeles v\xE1lidos`);
            log(`\u2705 [BLUE MARBLE] An\xE1lisis: ${analysisResult.uniqueColors} colores \xFAnicos, ${analysisResult.defacePixels} p\xEDxeles #deface`);
            window.URL.revokeObjectURL(imageUrl);
            try {
              if (window.__WPA_PLAN_OVERLAY__) {
                window.__WPA_PLAN_OVERLAY__.injectStyles();
                window.__WPA_PLAN_OVERLAY__.setEnabled(true);
                window.__WPA_PLAN_OVERLAY__.setPlan([], {
                  enabled: true,
                  nextBatchCount: 0
                });
                log("\u2705 Plan overlay activado autom\xE1ticamente al cargar imagen");
              }
            } catch (e) {
              log("\u26A0\uFE0F Error activando plan overlay:", e);
            }
            return true;
          } catch (error) {
            ui.setStatus(t("image.imageError"), "error");
            log("\u274C Error cargando imagen:", error);
            return false;
          }
        },
        onSelectPosition: async () => {
          return new Promise((resolve) => {
            ui.setStatus(t("image.selectPositionAlert"), "info");
            ui.setStatus(t("image.waitingPosition"), "info");
            imageState.selectingPosition = true;
            let positionCaptured = false;
            const setupFetchInterception = () => {
              window.fetch = async (url, options) => {
                if (imageState.selectingPosition && !positionCaptured && typeof url === "string" && url.includes("/s0/pixel/") && options && options.method === "POST") {
                  try {
                    log(`\u{1F3AF} Interceptando request de pintado: ${url}`);
                    const response = await originalFetch(url, options);
                    if (response.ok && options.body) {
                      let bodyData;
                      try {
                        bodyData = JSON.parse(options.body);
                      } catch (parseError) {
                        log("Error parseando body del request:", parseError);
                        return response;
                      }
                      if (bodyData.coords && Array.isArray(bodyData.coords) && bodyData.coords.length >= 2) {
                        const localX = bodyData.coords[0];
                        const localY = bodyData.coords[1];
                        const tileMatch = url.match(/\/s0\/pixel\/(-?\d+)\/(-?\d+)/);
                        if (tileMatch && !positionCaptured) {
                          positionCaptured = true;
                          const tileX = parseInt(tileMatch[1]);
                          const tileY = parseInt(tileMatch[2]);
                          imageState.tileX = tileX;
                          imageState.tileY = tileY;
                          imageState.startPosition = { x: localX, y: localY };
                          imageState.selectingPosition = false;
                          if (imageState.imageData && imageState.imageData.processor) {
                            const processor = imageState.imageData.processor;
                            processor.setCoords(tileX, tileY, localX, localY);
                            try {
                              await processor.createTemplateTiles();
                              log(`\u2705 [BLUE MARBLE] Template tiles creados para posici\xF3n tile(${tileX},${tileY}) pixel(${localX},${localY})`);
                            } catch (error) {
                              log(`\u274C [BLUE MARBLE] Error creando template tiles: ${error.message}`);
                            }
                            const pixelQueue = processor.generatePixelQueue();
                            imageState.remainingPixels = pixelQueue;
                            if (!imageState.totalPixels || imageState.totalPixels === 0) {
                              imageState.totalPixels = pixelQueue.length;
                            }
                            log(`\u2705 Cola de p\xEDxeles generada: ${pixelQueue.length} p\xEDxeles para overlay`);
                          }
                          try {
                            if (window.__WPA_PLAN_OVERLAY__) {
                              window.__WPA_PLAN_OVERLAY__.setEnabled(false);
                              window.__WPA_PLAN_OVERLAY__.setPlan([], {});
                              window.__WPA_PLAN_OVERLAY__.injectStyles();
                              window.__WPA_PLAN_OVERLAY__.setEnabled(true);
                              window.__WPA_PLAN_OVERLAY__.setAnchor({
                                tileX,
                                tileY,
                                pxX: localX,
                                pxY: localY
                              });
                              if (imageState.remainingPixels && imageState.remainingPixels.length > 0) {
                                window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
                                  anchor: { tileX, tileY, pxX: localX, pxY: localY },
                                  imageWidth: imageState.imageData.width,
                                  imageHeight: imageState.imageData.height,
                                  enabled: true
                                });
                                log(`\u2705 Plan overlay reiniciado y anclado en tile(${tileX},${tileY}) local(${localX},${localY})`);
                              } else {
                                log(`\u26A0\uFE0F No hay p\xEDxeles para mostrar en overlay`);
                              }
                            }
                          } catch (error) {
                            log(`\u274C Error configurando overlay: ${error.message}`);
                          }
                          restoreFetch();
                          ui.setStatus(t("image.positionSet"), "success");
                          log(`\u2705 Posici\xF3n establecida: tile(${imageState.tileX},${imageState.tileY}) local(${localX},${localY})`);
                          resolve(true);
                        } else {
                          log("\u26A0\uFE0F No se pudo extraer tile de la URL:", url);
                        }
                      }
                    }
                    return response;
                  } catch (error) {
                    log("\u274C Error interceptando pixel:", error);
                    if (!positionCaptured) {
                      restoreFetch();
                      return originalFetch(url, options);
                    }
                  }
                }
                return originalFetch(url, options);
              };
            };
            const setupCanvasObserver = () => {
              const canvasElements = document.querySelectorAll("canvas");
              if (canvasElements.length === 0) {
                log("\u26A0\uFE0F No se encontraron elementos canvas");
                return;
              }
              log(`\u{1F4CA} Configurando observer para ${canvasElements.length} canvas`);
              const clickHandler = (event) => {
                var _a;
                if (!imageState.selectingPosition || positionCaptured) return;
                const target = event.target;
                if (target && target.tagName === "CANVAS") {
                  log("\u{1F5B1}\uFE0F Click detectado en canvas durante selecci\xF3n");
                  try {
                    const board = ((_a = document.querySelector("canvas")) == null ? void 0 : _a.parentElement) || document.body;
                    const rect = board.getBoundingClientRect();
                    const cssX = event.clientX - rect.left;
                    const cssY = event.clientY - rect.top;
                    if (window.__WPA_PLAN_OVERLAY__) {
                      window.__WPA_PLAN_OVERLAY__.setAnchorCss(cssX, cssY);
                      log(`Plan overlay: ancla CSS establecida en (${cssX}, ${cssY})`);
                    }
                  } catch (e) {
                    log("Plan Overlay: error calculando ancla CSS", e);
                  }
                  setTimeout(() => {
                    if (!positionCaptured && imageState.selectingPosition) {
                      log("\u{1F50D} Buscando requests recientes de pintado...");
                    }
                  }, 500);
                }
              };
              document.addEventListener("click", clickHandler);
              imageState.cleanupObserver = () => {
                document.removeEventListener("click", clickHandler);
              };
            };
            setupFetchInterception();
            setupCanvasObserver();
            const timeoutId = setTimeout(() => {
              if (imageState.selectingPosition && !positionCaptured) {
                restoreFetch();
                if (imageState.cleanupObserver) {
                  imageState.cleanupObserver();
                }
                ui.setStatus(t("image.positionTimeout"), "error");
                log("\u23F0 Timeout en selecci\xF3n de posici\xF3n");
                resolve(false);
              }
            }, 12e4);
            imageState.positionTimeoutId = timeoutId;
          });
        },
        onStartPainting: async () => {
          var _a;
          log(`\u{1F50D} Estado para iniciar pintura:`, {
            imageLoaded: imageState.imageLoaded,
            startPosition: imageState.startPosition,
            tileX: imageState.tileX,
            tileY: imageState.tileY,
            totalPixels: imageState.totalPixels,
            remainingPixels: ((_a = imageState.remainingPixels) == null ? void 0 : _a.length) || 0
          });
          if (!imageState.imageLoaded || !imageState.startPosition) {
            ui.setStatus(t("image.missingRequirements"), "error");
            log(`\u274C Validaci\xF3n fallida: imageLoaded=${imageState.imageLoaded}, startPosition=${!!imageState.startPosition}`);
            return false;
          }
          imageState.running = true;
          imageState.stopFlag = false;
          imageState.isFirstBatch = imageState.useAllChargesFirst;
          log(`\u{1F680} Iniciando pintado - isFirstBatch: ${imageState.isFirstBatch}, useAllChargesFirst: ${imageState.useAllChargesFirst}`);
          ui.setStatus(t("image.startPaintingMsg"), "success");
          try {
            await processImage(
              imageState.imageData,
              imageState.startPosition,
              // onProgress - ahora incluye tiempo estimado
              (painted, total, message, estimatedTime) => {
                if (currentUserInfo) {
                  currentUserInfo.charges = Math.floor(imageState.currentCharges);
                  if (estimatedTime !== void 0) {
                    currentUserInfo.estimatedTime = estimatedTime;
                  }
                }
                ui.updateProgress(painted, total, currentUserInfo);
                if (imageState.inCooldown && imageState.nextBatchCooldown > 0) {
                  ui.updateCooldownDisplay(imageState.nextBatchCooldown);
                } else {
                  ui.updateCooldownDisplay(0);
                }
                if (message) {
                  if (message.includes("\u23F3") && imageState.inCooldown) {
                    ui.updateCooldownMessage(message);
                  } else {
                    ui.setStatus(message, "info");
                  }
                } else {
                  ui.setStatus(t("image.paintingProgress", { painted, total }), "info");
                }
              },
              // onComplete
              (completed, pixelsPainted) => {
                if (completed) {
                  ui.setStatus(t("image.paintingComplete", { count: pixelsPainted }), "success");
                  clearProgress();
                } else {
                  ui.setStatus(t("image.paintingStopped"), "warning");
                }
                imageState.running = false;
              },
              // onError
              (error) => {
                ui.setStatus(t("image.paintingError"), "error");
                log("\u274C Error en proceso de pintado:", error);
                imageState.running = false;
              }
            );
            return true;
          } catch (error) {
            ui.setStatus(t("image.paintingError"), "error");
            log("\u274C Error iniciando pintado:", error);
            imageState.running = false;
            return false;
          }
        },
        onStopPainting: async () => {
          const progressInfo = getProgressInfo();
          if (progressInfo.hasProgress) {
            const shouldSave = await showConfirmDialog(
              t("image.confirmSaveProgress"),
              t("image.saveProgressTitle"),
              {
                save: t("image.saveProgress"),
                discard: t("image.discardProgress"),
                cancel: t("image.cancel")
              }
            );
            if (shouldSave === "save") {
              const result = saveProgress();
              if (result.success) {
                ui.setStatus(t("image.progressSaved", { filename: result.filename }), "success");
              } else {
                ui.setStatus(t("image.progressSaveError", { error: result.error }), "error");
              }
            } else if (shouldSave === "cancel") {
              return false;
            }
          }
          stopPainting();
          ui.setStatus(t("image.paintingStopped"), "warning");
          return true;
        },
        onSaveProgress: async () => {
          const result = saveProgress();
          if (result.success) {
            ui.setStatus(t("image.progressSaved", { filename: result.filename }), "success");
          } else {
            ui.setStatus(t("image.progressSaveError", { error: result.error }), "error");
          }
          return result.success;
        },
        onLoadProgress: async (file) => {
          try {
            const result = await loadProgress(file);
            if (result.success) {
              ui.setStatus(t("image.progressLoaded", { painted: result.painted, total: result.total }), "success");
              ui.updateProgress(result.painted, result.total, currentUserInfo);
              log("\u2705 Progreso cargado - habilitando botones de inicio");
              return true;
            } else {
              ui.setStatus(t("image.progressLoadError", { error: result.error }), "error");
              return false;
            }
          } catch (error) {
            ui.setStatus(t("image.progressLoadError", { error: error.message }), "error");
            return false;
          }
        },
        onExportGuard: async () => {
          try {
            const { exportForGuard: exportForGuard2 } = await Promise.resolve().then(() => (init_save_load(), save_load_exports));
            const result = exportForGuard2();
            if (result.success) {
              ui.setStatus(t("image.guardExportSuccess", { filename: result.filename }), "success");
              log(`\u2705 Exportado para Auto-Guard: ${result.filename}`);
            } else {
              ui.setStatus(t("image.guardExportError", { error: result.error }), "error");
            }
            return result.success;
          } catch (error) {
            ui.setStatus(t("image.guardExportError", { error: error.message }), "error");
            log(`\u274C Error exportando para Guard: ${error.message}`);
            return false;
          }
        },
        onResizeImage: () => {
          if (imageState.imageLoaded && imageState.imageData && imageState.imageData.processor) {
            ui.showResizeDialog(imageState.imageData.processor);
          }
        },
        onConfirmResize: async (processor, newWidth, newHeight, selectedColors) => {
          log(`\u{1F504} Redimensionando imagen de ${processor.getDimensions().width}x${processor.getDimensions().height} a ${newWidth}x${newHeight}`);
          log(`\u{1F3A8} Colores seleccionados: ${selectedColors ? selectedColors.length : "todos"}`);
          try {
            await processor.resize(newWidth, newHeight);
            if (selectedColors && selectedColors.length > 0) {
              const selectedColorObjects = imageState.availableColors.filter(
                (color) => selectedColors.includes(color.id)
              );
              processor.setSelectedColors(selectedColorObjects);
              log(`\u{1F3A8} Paleta actualizada con ${selectedColors.length} colores seleccionados`);
            }
            const analysisResult = await processor.analyzePixels();
            imageState.imageData = {
              processor,
              width: newWidth,
              height: newHeight,
              // Mantener compatibilidad: usar requiredPixels como validPixelCount
              validPixelCount: analysisResult.requiredPixels,
              requiredPixels: analysisResult.requiredPixels,
              totalPixels: analysisResult.totalPixels
            };
            imageState.totalPixels = analysisResult.requiredPixels;
            imageState.paintedPixels = 0;
            imageState.remainingPixels = [];
            imageState.lastPosition = { x: 0, y: 0 };
            ui.updateProgress(0, analysisResult.requiredPixels, currentUserInfo);
            ui.setStatus(t("image.resizeSuccess", { width: newWidth, height: newHeight }), "success");
            log(`\u2705 Imagen redimensionada: ${analysisResult.requiredPixels} p\xEDxeles v\xE1lidos de ${analysisResult.totalPixels} totales`);
            try {
              if (window.__WPA_PLAN_OVERLAY__ && imageState.startPosition && imageState.tileX != null && imageState.tileY != null) {
                await processor.createTemplateTiles();
                const pixelQueue = processor.generatePixelQueue();
                imageState.remainingPixels = pixelQueue;
                window.__WPA_PLAN_OVERLAY__.setPlan(pixelQueue, {
                  anchor: {
                    tileX: imageState.tileX,
                    tileY: imageState.tileY,
                    pxX: imageState.startPosition.x,
                    pxY: imageState.startPosition.y
                  },
                  imageWidth: newWidth,
                  imageHeight: newHeight,
                  enabled: true
                });
                log(`\u2705 Overlay actualizado con ${pixelQueue.length} p\xEDxeles despu\xE9s del resize`);
              }
            } catch (overlayError) {
              log(`\u26A0\uFE0F Error actualizando overlay despu\xE9s del resize: ${overlayError.message}`);
            }
          } catch (error) {
            log(`\u274C Error redimensionando imagen: ${error.message}`);
            ui.setStatus(t("image.imageError"), "error");
          }
        },
        // Funciones para el manejo de estadísticas
        onRefreshStats: async () => {
          var _a;
          log("\u{1F504} Actualizando estad\xEDsticas...");
          try {
            const sessionInfo = await getSession();
            let userInfo = null;
            if (sessionInfo.success && sessionInfo.data.user) {
              userInfo = {
                username: sessionInfo.data.user.name || "An\xF3nimo",
                charges: sessionInfo.data.charges,
                maxCharges: sessionInfo.data.maxCharges,
                pixels: sessionInfo.data.user.pixelsPainted || 0,
                cooldown: sessionInfo.data.cooldown || 0
              };
              currentUserInfo = userInfo;
              imageState.currentCharges = sessionInfo.data.charges;
              imageState.maxCharges = sessionInfo.data.maxCharges || 9999;
            }
            const colors = detectAvailableColors();
            if (colors.length > 0) {
              imageState.availableColors = colors;
              imageState.colorsChecked = true;
            }
            let imageInfo = null;
            if (imageState.imageLoaded) {
              imageInfo = {
                loaded: true,
                totalPixels: imageState.totalPixels,
                paintedPixels: imageState.paintedPixels,
                estimatedTime: imageState.estimatedTime,
                originalName: imageState.originalImageName
              };
            }
            ui.updateStatsWindow({
              userInfo,
              imageInfo,
              availableColors: colors.length > 0 ? colors : imageState.availableColors
            });
            ui.updateProgress(imageState.paintedPixels, imageState.totalPixels, userInfo);
            log(`\u2705 Estad\xEDsticas actualizadas: ${colors.length > 0 ? colors.length : ((_a = imageState.availableColors) == null ? void 0 : _a.length) || 0} colores disponibles`);
          } catch (error) {
            log("\u274C Error actualizando estad\xEDsticas:", error);
          }
        },
        // Función para obtener colores disponibles (usada por el selector de paleta)
        getAvailableColors: () => {
          return imageState.availableColors || [];
        },
        // Función para manejar cambios en la selección de colores
        onColorSelectionChange: (selectedColorIds) => {
          log(`\u{1F3A8} Selecci\xF3n de colores cambiada: ${selectedColorIds.length} colores seleccionados`);
        }
      });
      const handleLauncherLanguageChange = (event) => {
        const { language } = event.detail;
        log(`\u{1F30D} Imagen: Detectado cambio de idioma desde launcher: ${language}`);
        imageState.language = language;
      };
      window.addEventListener("launcherLanguageChanged", handleLauncherLanguageChange);
      window.addEventListener("languageChanged", handleLauncherLanguageChange);
      window.addEventListener("beforeunload", () => {
        restoreFetch();
        stopPainting();
        ui.destroy();
        window.removeEventListener("launcherLanguageChanged", handleLauncherLanguageChange);
        window.removeEventListener("languageChanged", handleLauncherLanguageChange);
        if (window.__wplaceBot) {
          window.__wplaceBot.imageRunning = false;
        }
      });
      log("\u2705 Auto-Image inicializado correctamente");
      setTimeout(async () => {
        try {
          ui.setStatus(t("image.autoInitializing"), "info");
          log("\u{1F916} Intentando auto-inicio...");
          const autoInitSuccess = await tryAutoInit();
          if (autoInitSuccess) {
            ui.setStatus(t("image.autoInitSuccess"), "success");
            log("\u2705 Auto-inicio exitoso");
            ui.setInitButtonVisible(false);
            const initResult = await initializeBot(true);
            if (initResult) {
              log("\u{1F680} Bot auto-iniciado completamente");
            }
          } else {
            ui.setStatus(t("image.autoInitFailed"), "warning");
            log("\u26A0\uFE0F Auto-inicio fall\xF3, se requiere inicio manual");
          }
        } catch (error) {
          log("\u274C Error en auto-inicio:", error);
          ui.setStatus(t("image.manualInitRequired"), "warning");
        }
      }, 1e3);
    } catch (error) {
      log("\u274C Error inicializando Auto-Image:", error);
      if (window.__wplaceBot) {
        window.__wplaceBot.imageRunning = false;
      }
      throw error;
    }
  }

  // src/entries/image.js
  (async () => {
    "use strict";
    var _a, _b;
    console.log("[WPA-Image] \u{1F680} Entry point iniciado");
    try {
      console.log("[WPA-Image] \u{1F916} Iniciando auto-click del bot\xF3n Paint...");
      await autoClickPaintButton(3, true);
      console.log("[WPA-Image] \u2705 Auto-click completado");
    } catch (error) {
      console.log("[WPA-Image] \u26A0\uFE0F Error en auto-click del bot\xF3n Paint:", error);
    }
    if ((_a = window.__wplaceBot) == null ? void 0 : _a.imageRunning) {
      console.log("[WPA-Image] \u26A0\uFE0F Auto-Image ya est\xE1 corriendo");
      alert("Auto-Image ya est\xE1 corriendo.");
      return;
    }
    if ((_b = window.__wplaceBot) == null ? void 0 : _b.farmRunning) {
      console.log("[WPA-Image] \u26A0\uFE0F Auto-Farm est\xE1 ejecut\xE1ndose");
      alert("Auto-Farm est\xE1 ejecut\xE1ndose. Ci\xE9rralo antes de iniciar Auto-Image.");
      return;
    }
    if (!window.__wplaceBot) {
      window.__wplaceBot = {};
      console.log("[WPA-Image] \u{1F527} Estado global inicializado");
    }
    window.__wplaceBot.imageRunning = true;
    console.log("[WPA-Image] \u{1F3C3} Marcado como ejecut\xE1ndose");
    console.log("[WPA-Image] \u{1F3AF} Llamando a runImage()");
    runImage().catch((e) => {
      console.error("[BOT] Error en Auto-Image:", e);
      if (window.__wplaceBot) {
        window.__wplaceBot.imageRunning = false;
      }
      alert("Auto-Image: error inesperado. Revisa consola.");
    });
  })();
})();
//# sourceMappingURL=data:application/json;base64,
